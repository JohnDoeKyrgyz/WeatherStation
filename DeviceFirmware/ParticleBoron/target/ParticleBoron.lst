
c:/working/WeatherStation/DeviceFirmware/ParticleBoron/target/ParticleBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017f10  2**0
                  CONTENTS
  3 .data         00000084  2003e1c8  000d7e60  0000e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005a4  2003e24c  2003e24c  0001e24c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7ee4  000d7ee4  00017ee4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7f0c  000d7f0c  00017f0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d0470  00000000  00000000  00017f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000146d9  00000000  00000000  000e8380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00019da3  00000000  00000000  000fca59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000025f0  00000000  00000000  001167fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003ea0  00000000  00000000  00118dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003dcf9  00000000  00000000  0011cc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003821b  00000000  00000000  0015a985  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e60a0  00000000  00000000  00192ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cb40  00000000  00000000  00278c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	7c 78 0d 00                                         |x..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fbd9 	bl	d77e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fbde 	bl	d77fa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1c8 	.word	0x2003e1c8
   d4048:	000d7e60 	.word	0x000d7e60
   d404c:	2003e24c 	.word	0x2003e24c
   d4050:	2003e24c 	.word	0x2003e24c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f8f5 	bl	d6248 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7e5c 	.word	0x000d7e5c
   d4080:	000d7e08 	.word	0x000d7e08

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b942 	b.w	d430c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa7d 	bl	d4588 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b8a7 	b.w	d61e4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bb05 	b.w	d56a4 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bb03 	b.w	d56a4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	4718      	bx	r3

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr

000d40ca <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40ca:	2a01      	cmp	r2, #1
   d40cc:	d002      	beq.n	d40d4 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ce:	2a02      	cmp	r2, #2
   d40d0:	d002      	beq.n	d40d8 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40d2:	e004      	b.n	d40de <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d4:	6001      	str	r1, [r0, #0]
	      break;
   d40d6:	e002      	b.n	d40de <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40d8:	b108      	cbz	r0, d40de <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40da:	680b      	ldr	r3, [r1, #0]
   d40dc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40de:	2000      	movs	r0, #0
   d40e0:	4770      	bx	lr
	...

000d40e4 <_ZNSt17_Function_handlerIFbvEZ14readAnemometerP7ReadingEUlvE_E9_M_invokeERKSt9_Any_data>:

bool readAnemometer(Reading *reading)
{
    Serial.print("ANEMOMETER ");
    bool result = timeout(ANEMOMETER_TIMEOUT, [reading]()
    {
   d40e4:	6801      	ldr	r1, [r0, #0]
        return laCrosseTX23.read(reading->windSpeed, reading->windDirection);
    });
   d40e6:	4803      	ldr	r0, [pc, #12]	; (d40f4 <_ZNSt17_Function_handlerIFbvEZ14readAnemometerP7ReadingEUlvE_E9_M_invokeERKSt9_Any_data+0x10>)
   d40e8:	f101 0214 	add.w	r2, r1, #20
   d40ec:	3110      	adds	r1, #16
   d40ee:	f000 beff 	b.w	d4ef0 <_ZN13LaCrosse_TX234readERfRi>
   d40f2:	bf00      	nop
   d40f4:	2003e328 	.word	0x2003e328

000d40f8 <_Z15watchDogTimeoutv>:
        }
    }
}

void watchDogTimeout()
{
   d40f8:	b508      	push	{r3, lr}
  Serial.println("Watchdog timeout");
   d40fa:	f002 f97b 	bl	d63f4 <_Z16_fetch_usbserialv>
   d40fe:	4903      	ldr	r1, [pc, #12]	; (d410c <_Z15watchDogTimeoutv+0x14>)
   d4100:	f001 fdbb 	bl	d5c7a <_ZN5Print7printlnEPKc>
  System.reset();
}
   d4104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void watchDogTimeout()
{
  Serial.println("Watchdog timeout");
  System.reset();
   d4108:	f001 bc4c 	b.w	d59a4 <_ZN11SystemClass5resetEv>
   d410c:	000d7890 	.word	0x000d7890

000d4110 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4110:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4112:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4114:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4116:	b10b      	cbz	r3, d411c <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d4118:	68c0      	ldr	r0, [r0, #12]
   d411a:	e006      	b.n	d412a <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d411c:	6840      	ldr	r0, [r0, #4]
   d411e:	b128      	cbz	r0, d412c <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4120:	6883      	ldr	r3, [r0, #8]
   d4122:	b90b      	cbnz	r3, d4128 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d4124:	f002 fd05 	bl	d6b32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4128:	68c3      	ldr	r3, [r0, #12]
   d412a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d412c:	2301      	movs	r3, #1
   d412e:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4130:	2000      	movs	r0, #0
    }
   d4132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d4136:	f001 b8f9 	b.w	d532c <os_thread_exit>

000d413a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d413c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4140:	b113      	cbz	r3, d4148 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4142:	2203      	movs	r2, #3
   d4144:	4601      	mov	r1, r0
   d4146:	4798      	blx	r3
    }
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
   d414c:	b538      	push	{r3, r4, r5, lr}
   d414e:	4604      	mov	r4, r0
   d4150:	6940      	ldr	r0, [r0, #20]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
   d4152:	b1b0      	cbz	r0, d4182 <_ZN19ApplicationWatchdogD1Ev+0x36>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4154:	f001 f8b2 	bl	d52bc <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4158:	b998      	cbnz	r0, d4182 <_ZN19ApplicationWatchdogD1Ev+0x36>
            return;

        if (!exited_) {
   d415a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d415e:	b91b      	cbnz	r3, d4168 <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4160:	6960      	ldr	r0, [r4, #20]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4162:	b108      	cbz	r0, d4168 <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4164:	f001 f8b2 	bl	d52cc <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4168:	69a5      	ldr	r5, [r4, #24]
   d416a:	b13d      	cbz	r5, d417c <_ZN19ApplicationWatchdogD1Ev+0x30>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d416c:	4628      	mov	r0, r5
   d416e:	f7ff ffe4 	bl	d413a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   d4172:	4628      	mov	r0, r5
   d4174:	f7ff ff8f 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d4178:	2300      	movs	r3, #0
   d417a:	61a3      	str	r3, [r4, #24]
        }

        os_thread_cleanup(handle);
   d417c:	6960      	ldr	r0, [r4, #20]
   d417e:	f001 f8ad 	bl	d52dc <os_thread_cleanup>
   d4182:	1d20      	adds	r0, r4, #4
   d4184:	f7ff ffd9 	bl	d413a <_ZNSt14_Function_baseD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd38      	pop	{r3, r4, r5, pc}

000d418c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d418c:	6803      	ldr	r3, [r0, #0]
   d418e:	b2c9      	uxtb	r1, r1
   d4190:	689b      	ldr	r3, [r3, #8]
   d4192:	4718      	bx	r3

000d4194 <_Z7onErrorPKc>:
};

Reading initialReading;

void onError(const char* message)
{
   d4194:	b510      	push	{r4, lr}
    RGB.color(255, 255, 0);
   d4196:	21ff      	movs	r1, #255	; 0xff
};

Reading initialReading;

void onError(const char* message)
{
   d4198:	4604      	mov	r4, r0
    RGB.color(255, 255, 0);
   d419a:	2200      	movs	r2, #0
   d419c:	4608      	mov	r0, r1
   d419e:	f001 fef6 	bl	d5f8e <_ZN8RGBClass5colorEiii>
    Serial.println(message);
   d41a2:	f002 f927 	bl	d63f4 <_Z16_fetch_usbserialv>
   d41a6:	4621      	mov	r1, r4
}
   d41a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Reading initialReading;

void onError(const char* message)
{
    RGB.color(255, 255, 0);
    Serial.println(message);
   d41ac:	f001 bd65 	b.w	d5c7a <_ZN5Print7printlnEPKc>

000d41b0 <_Z7timeoutiSt8functionIFbvEE>:
}

bool timeout(int timeout, std::function<bool()> opperation)
{
   d41b0:	b570      	push	{r4, r5, r6, lr}
   d41b2:	4604      	mov	r4, r0
   d41b4:	460d      	mov	r5, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41b6:	f001 f851 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
    unsigned long endTime = millis() + timeout;
   d41ba:	4404      	add	r4, r0
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d41bc:	68ab      	ldr	r3, [r5, #8]
   d41be:	b90b      	cbnz	r3, d41c4 <_Z7timeoutiSt8functionIFbvEE+0x14>
	__throw_bad_function_call();
   d41c0:	f002 fcb7 	bl	d6b32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41c4:	68eb      	ldr	r3, [r5, #12]
   d41c6:	4628      	mov	r0, r5
   d41c8:	4798      	blx	r3
    bool result = false;
    while(!(result = opperation()) && millis() < endTime)
   d41ca:	4606      	mov	r6, r0
   d41cc:	b960      	cbnz	r0, d41e8 <_Z7timeoutiSt8functionIFbvEE+0x38>
   d41ce:	f001 f845 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
   d41d2:	42a0      	cmp	r0, r4
   d41d4:	d208      	bcs.n	d41e8 <_Z7timeoutiSt8functionIFbvEE+0x38>
    {
        Serial.print(".");
   d41d6:	f002 f90d 	bl	d63f4 <_Z16_fetch_usbserialv>
   d41da:	4904      	ldr	r1, [pc, #16]	; (d41ec <_Z7timeoutiSt8functionIFbvEE+0x3c>)
   d41dc:	f001 fd3a 	bl	d5c54 <_ZN5Print5printEPKc>
        delay(10);
   d41e0:	200a      	movs	r0, #10
   d41e2:	f001 febb 	bl	d5f5c <delay>

bool timeout(int timeout, std::function<bool()> opperation)
{
    unsigned long endTime = millis() + timeout;
    bool result = false;
    while(!(result = opperation()) && millis() < endTime)
   d41e6:	e7e9      	b.n	d41bc <_Z7timeoutiSt8functionIFbvEE+0xc>
    {
        Serial.print(".");
        delay(10);
    }
    return result;
}
   d41e8:	4630      	mov	r0, r6
   d41ea:	bd70      	pop	{r4, r5, r6, pc}
   d41ec:	000d78a1 	.word	0x000d78a1

000d41f0 <_Z13checkBrownoutv>:

bool checkBrownout()
{
   d41f0:	b510      	push	{r4, lr}
    return settings.brownout && fuelGuage.getVCell() < settings.brownoutVoltage;
   d41f2:	4c08      	ldr	r4, [pc, #32]	; (d4214 <_Z13checkBrownoutv+0x24>)
   d41f4:	7920      	ldrb	r0, [r4, #4]
   d41f6:	b158      	cbz	r0, d4210 <_Z13checkBrownoutv+0x20>
   d41f8:	4807      	ldr	r0, [pc, #28]	; (d4218 <_Z13checkBrownoutv+0x28>)
   d41fa:	f001 ff53 	bl	d60a4 <_ZN9FuelGauge8getVCellEv>
   d41fe:	edd4 7a02 	vldr	s15, [r4, #8]
   d4202:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d420a:	bf4c      	ite	mi
   d420c:	2001      	movmi	r0, #1
   d420e:	2000      	movpl	r0, #0
}
   d4210:	bd10      	pop	{r4, pc}
   d4212:	bf00      	nop
   d4214:	2003e250 	.word	0x2003e250
   d4218:	2003e344 	.word	0x2003e344

000d421c <_Z14readAnemometerP7Reading>:

bool readAnemometer(Reading *reading)
{
   d421c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d421e:	4604      	mov	r4, r0
    Serial.print("ANEMOMETER ");
   d4220:	f002 f8e8 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4224:	490b      	ldr	r1, [pc, #44]	; (d4254 <_Z14readAnemometerP7Reading+0x38>)
   d4226:	f001 fd15 	bl	d5c54 <_ZN5Print5printEPKc>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d422a:	4b0b      	ldr	r3, [pc, #44]	; (d4258 <_Z14readAnemometerP7Reading+0x3c>)
   d422c:	9303      	str	r3, [sp, #12]
    bool result = timeout(ANEMOMETER_TIMEOUT, [reading]()
    {
        return laCrosseTX23.read(reading->windSpeed, reading->windDirection);
    });
   d422e:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d4230:	4b0a      	ldr	r3, [pc, #40]	; (d425c <_Z14readAnemometerP7Reading+0x40>)
   d4232:	9302      	str	r3, [sp, #8]
   d4234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4238:	9400      	str	r4, [sp, #0]
   d423a:	f7ff ffb9 	bl	d41b0 <_Z7timeoutiSt8functionIFbvEE>
   d423e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4240:	4668      	mov	r0, sp
   d4242:	f7ff ff7a 	bl	d413a <_ZNSt14_Function_baseD1Ev>
    Serial.println();
   d4246:	f002 f8d5 	bl	d63f4 <_Z16_fetch_usbserialv>
   d424a:	f001 fd0a 	bl	d5c62 <_ZN5Print7printlnEv>
    return result;
}
   d424e:	4620      	mov	r0, r4
   d4250:	b004      	add	sp, #16
   d4252:	bd10      	pop	{r4, pc}
   d4254:	000d78a3 	.word	0x000d78a3
   d4258:	000d40e5 	.word	0x000d40e5
   d425c:	000d40cb 	.word	0x000d40cb

000d4260 <_Z11deviceSetupv>:
    return !isnan(reading->bmeTemperature) && !isnan(reading->pressure) && reading->pressure > 0 && !isnan(reading->bmeHumidity);
}

STARTUP(deviceSetup());
void deviceSetup()
{
   d4260:	b570      	push	{r4, r5, r6, lr}
   d4262:	f000 fffb 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
    duration = millis();
   d4266:	4b22      	ldr	r3, [pc, #136]	; (d42f0 <_Z11deviceSetupv+0x90>)
    //Turn off the status LED to save power
    RGB.control(true);
    RGB.color(0, 0, 0);

    //Load saved settings;
    settings = *loadSettings();
   d4268:	4e22      	ldr	r6, [pc, #136]	; (d42f4 <_Z11deviceSetupv+0x94>)
}

STARTUP(deviceSetup());
void deviceSetup()
{
    duration = millis();
   d426a:	6018      	str	r0, [r3, #0]

    //Turn off the status LED to save power
    RGB.control(true);
   d426c:	2001      	movs	r0, #1
   d426e:	f001 fe7e 	bl	d5f6e <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
   d4272:	2200      	movs	r2, #0
   d4274:	4611      	mov	r1, r2
   d4276:	4610      	mov	r0, r2
   d4278:	f001 fe89 	bl	d5f8e <_ZN8RGBClass5colorEiii>

    //Load saved settings;
    settings = *loadSettings();
   d427c:	f000 fb5a 	bl	d4934 <_Z12loadSettingsv>
   d4280:	4605      	mov	r5, r0
   d4282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4284:	4634      	mov	r4, r6
   d4286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4288:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d428c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    if(!(brownout = checkBrownout()))
   d4290:	f7ff ffae 	bl	d41f0 <_Z13checkBrownoutv>
   d4294:	4b18      	ldr	r3, [pc, #96]	; (d42f8 <_Z11deviceSetupv+0x98>)
   d4296:	7018      	strb	r0, [r3, #0]
   d4298:	bb48      	cbnz	r0, d42ee <_Z11deviceSetupv+0x8e>
    {
        if(diagnosticMode)
   d429a:	6973      	ldr	r3, [r6, #20]
   d429c:	b16b      	cbz	r3, d42ba <_Z11deviceSetupv+0x5a>
        {
            pinMode(LED, OUTPUT);
   d429e:	2101      	movs	r1, #1
   d42a0:	2007      	movs	r0, #7
   d42a2:	f002 fb47 	bl	d6934 <pinMode>
            digitalWrite(LED, HIGH);
   d42a6:	2007      	movs	r0, #7
   d42a8:	2101      	movs	r1, #1
   d42aa:	f002 fb54 	bl	d6956 <digitalWrite>
            settings.diagnositicCycles--;
   d42ae:	6973      	ldr	r3, [r6, #20]

            saveSettings(&settings);
   d42b0:	4630      	mov	r0, r6
    {
        if(diagnosticMode)
        {
            pinMode(LED, OUTPUT);
            digitalWrite(LED, HIGH);
            settings.diagnositicCycles--;
   d42b2:	3b01      	subs	r3, #1
   d42b4:	6173      	str	r3, [r6, #20]

            saveSettings(&settings);
   d42b6:	f000 fb5d 	bl	d4974 <_Z12saveSettingsP8Settings>
        }

        //turn on the sensors    
        pinMode(SENSOR_POWER, OUTPUT);    
   d42ba:	2101      	movs	r1, #1
   d42bc:	2013      	movs	r0, #19
   d42be:	f002 fb39 	bl	d6934 <pinMode>
        digitalWrite(SENSOR_POWER, HIGH);
   d42c2:	2101      	movs	r1, #1
   d42c4:	2013      	movs	r0, #19
   d42c6:	f002 fb46 	bl	d6956 <digitalWrite>

        dht.begin();
        bme280.begin(0x76);

        //take an initial wind reading
        if(!(initialReading.anemometerRead = readAnemometer(&initialReading)))
   d42ca:	4c0c      	ldr	r4, [pc, #48]	; (d42fc <_Z11deviceSetupv+0x9c>)

        //turn on the sensors    
        pinMode(SENSOR_POWER, OUTPUT);    
        digitalWrite(SENSOR_POWER, HIGH);

        dht.begin();
   d42cc:	480c      	ldr	r0, [pc, #48]	; (d4300 <_Z11deviceSetupv+0xa0>)
   d42ce:	f000 fefd 	bl	d50cc <_ZN3DHT5beginEv>
        bme280.begin(0x76);
   d42d2:	2176      	movs	r1, #118	; 0x76
   d42d4:	480b      	ldr	r0, [pc, #44]	; (d4304 <_Z11deviceSetupv+0xa4>)
   d42d6:	f000 fd8b 	bl	d4df0 <_ZN15Adafruit_BME2805beginEh>

        //take an initial wind reading
        if(!(initialReading.anemometerRead = readAnemometer(&initialReading)))
   d42da:	4620      	mov	r0, r4
   d42dc:	f7ff ff9e 	bl	d421c <_Z14readAnemometerP7Reading>
   d42e0:	7320      	strb	r0, [r4, #12]
   d42e2:	b920      	cbnz	r0, d42ee <_Z11deviceSetupv+0x8e>
        {
            onError("ERROR: Could not get initial wind reading");
   d42e4:	4808      	ldr	r0, [pc, #32]	; (d4308 <_Z11deviceSetupv+0xa8>)
        }
    }
}
   d42e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bme280.begin(0x76);

        //take an initial wind reading
        if(!(initialReading.anemometerRead = readAnemometer(&initialReading)))
        {
            onError("ERROR: Could not get initial wind reading");
   d42ea:	f7ff bf53 	b.w	d4194 <_Z7onErrorPKc>
   d42ee:	bd70      	pop	{r4, r5, r6, pc}
   d42f0:	2003e314 	.word	0x2003e314
   d42f4:	2003e250 	.word	0x2003e250
   d42f8:	2003e310 	.word	0x2003e310
   d42fc:	2003e26c 	.word	0x2003e26c
   d4300:	2003e330 	.word	0x2003e330
   d4304:	2003e2a8 	.word	0x2003e2a8
   d4308:	000d78b4 	.word	0x000d78b4

000d430c <setup>:
  Serial.println("Watchdog timeout");
  System.reset();
}

void setup()
{
   d430c:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
   d430e:	2101      	movs	r1, #1
   d4310:	2007      	movs	r0, #7
   d4312:	f002 fb0f 	bl	d6934 <pinMode>

  Serial.begin(9600);
   d4316:	f002 f86d 	bl	d63f4 <_Z16_fetch_usbserialv>
   d431a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d431e:	f002 f85d 	bl	d63dc <_ZN9USBSerial5beginEl>
  Wire.begin();
   d4322:	f002 fbc1 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4326:	f002 f987 	bl	d6638 <_ZN7TwoWire5beginEv>

  delay(10000);
   d432a:	f242 7010 	movw	r0, #10000	; 0x2710
   d432e:	f001 fe15 	bl	d5f5c <delay>

  Serial.println("Weather Station");
   d4332:	f002 f85f 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4336:	4902      	ldr	r1, [pc, #8]	; (d4340 <setup+0x34>)
}
   d4338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
  Wire.begin();

  delay(10000);

  Serial.println("Weather Station");
   d433c:	f001 bc9d 	b.w	d5c7a <_ZN5Print7printlnEPKc>
   d4340:	000d78de 	.word	0x000d78de

000d4344 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4344:	4613      	mov	r3, r2
   d4346:	460a      	mov	r2, r1
   d4348:	2101      	movs	r1, #1
   d434a:	f001 bdba 	b.w	d5ec2 <_ZN5Print11printf_implEbPKcz>
	...

000d4350 <_Z15printSystemInfov>:
}

void printSystemInfo()
{
   d4350:	b570      	push	{r4, r5, r6, lr}
   d4352:	b096      	sub	sp, #88	; 0x58
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4354:	a807      	add	r0, sp, #28
   d4356:	f001 f98d 	bl	d5674 <spark_deviceID>
#define SYSTEM_VERSION_080RC27
#define SYSTEM_VERSION_090RC1
#define SYSTEM_VERSION_090RC2
#define SYSTEM_VERSION_090RC3

typedef struct __attribute__((packed)) SystemVersionInfo
   d435a:	ac16      	add	r4, sp, #88	; 0x58
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
   d435c:	f002 f84a 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4360:	4a5e      	ldr	r2, [pc, #376]	; (d44dc <_Z15printSystemInfov+0x18c>)
   d4362:	9b07      	ldr	r3, [sp, #28]
   d4364:	2101      	movs	r1, #1
   d4366:	f001 fdac 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("System version: %s", System.version().c_str());
   d436a:	f002 f843 	bl	d63f4 <_Z16_fetch_usbserialv>
   d436e:	231c      	movs	r3, #28
   d4370:	f824 3d1c 	strh.w	r3, [r4, #-28]!
   d4374:	4605      	mov	r5, r0
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   d4376:	2100      	movs	r1, #0
   d4378:	4620      	mov	r0, r4
   d437a:	f001 f90f 	bl	d559c <system_version_info>
        return String(info.versionString);
   d437e:	a911      	add	r1, sp, #68	; 0x44
   d4380:	a80b      	add	r0, sp, #44	; 0x2c
   d4382:	f001 fbcd 	bl	d5b20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4388:	4a55      	ldr	r2, [pc, #340]	; (d44e0 <_Z15printSystemInfov+0x190>)
   d438a:	2101      	movs	r1, #1
   d438c:	4628      	mov	r0, r5

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d438e:	4d55      	ldr	r5, [pc, #340]	; (d44e4 <_Z15printSystemInfov+0x194>)
   d4390:	f001 fd97 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>

void printSystemInfo()
{
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
  Serial.printlnf("System version: %s", System.version().c_str());
   d4394:	a80b      	add	r0, sp, #44	; 0x2c
   d4396:	f001 fb7c 	bl	d5a92 <_ZN6StringD1Ev>

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d439a:	4628      	mov	r0, r5
   d439c:	f001 f9a2 	bl	d56e4 <_ZN4PMIC20getInputVoltageLimitEv>
   d43a0:	4606      	mov	r6, r0
  Serial.printlnf("Input Voltage Limit: %d", inputVoltageLimit);
   d43a2:	f002 f827 	bl	d63f4 <_Z16_fetch_usbserialv>
   d43a6:	4632      	mov	r2, r6
   d43a8:	494f      	ldr	r1, [pc, #316]	; (d44e8 <_Z15printSystemInfov+0x198>)
   d43aa:	f7ff ffcb 	bl	d4344 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  byte inputCurrentLimit = pmic.getInputCurrentLimit();
   d43ae:	4628      	mov	r0, r5
   d43b0:	f001 f9ec 	bl	d578c <_ZN4PMIC20getInputCurrentLimitEv>
   d43b4:	4606      	mov	r6, r0
  Serial.printlnf("Input Current Limit: %d", inputCurrentLimit);
   d43b6:	f002 f81d 	bl	d63f4 <_Z16_fetch_usbserialv>
   d43ba:	b2f2      	uxtb	r2, r6
   d43bc:	494b      	ldr	r1, [pc, #300]	; (d44ec <_Z15printSystemInfov+0x19c>)
   d43be:	f7ff ffc1 	bl	d4344 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  uint16_t minimumSystemVoltage = pmic.getMinimumSystemVoltage();
   d43c2:	4628      	mov	r0, r5
   d43c4:	f001 f9ee 	bl	d57a4 <_ZN4PMIC23getMinimumSystemVoltageEv>
   d43c8:	4606      	mov	r6, r0
  Serial.printlnf("Minimum System Voltage: %d", minimumSystemVoltage);
   d43ca:	f002 f813 	bl	d63f4 <_Z16_fetch_usbserialv>
   d43ce:	4633      	mov	r3, r6
   d43d0:	4a47      	ldr	r2, [pc, #284]	; (d44f0 <_Z15printSystemInfov+0x1a0>)
   d43d2:	2101      	movs	r1, #1
   d43d4:	f001 fd75 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>

  byte chargeCurrent = pmic.getChargeCurrent();
   d43d8:	4628      	mov	r0, r5
   d43da:	f001 f9ef 	bl	d57bc <_ZN4PMIC16getChargeCurrentEv>
   d43de:	4606      	mov	r6, r0
  Serial.printlnf("Charge Current: %d", chargeCurrent);
   d43e0:	f002 f808 	bl	d63f4 <_Z16_fetch_usbserialv>
   d43e4:	4632      	mov	r2, r6
   d43e6:	4943      	ldr	r1, [pc, #268]	; (d44f4 <_Z15printSystemInfov+0x1a4>)
   d43e8:	f7ff ffac 	bl	d4344 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
   d43ec:	4628      	mov	r0, r5
   d43ee:	f001 f9eb 	bl	d57c8 <_ZN4PMIC21getChargeVoltageValueEv>
   d43f2:	4605      	mov	r5, r0
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);
   d43f4:	f001 fffe 	bl	d63f4 <_Z16_fetch_usbserialv>
   d43f8:	462b      	mov	r3, r5
   d43fa:	4a3f      	ldr	r2, [pc, #252]	; (d44f8 <_Z15printSystemInfov+0x1a8>)

  Serial.print("Charge: ");
  Serial.println(fuelGuage.getSoC());
   d43fc:	4d3f      	ldr	r5, [pc, #252]	; (d44fc <_Z15printSystemInfov+0x1ac>)
   d43fe:	2101      	movs	r1, #1
   d4400:	f001 fd5f 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Charge Current: %d", chargeCurrent);

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);

  Serial.print("Charge: ");
   d4404:	f001 fff6 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4408:	493d      	ldr	r1, [pc, #244]	; (d4500 <_Z15printSystemInfov+0x1b0>)
   d440a:	f001 fc23 	bl	d5c54 <_ZN5Print5printEPKc>
  Serial.println(fuelGuage.getSoC());
   d440e:	f001 fff1 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4412:	4606      	mov	r6, r0
   d4414:	4628      	mov	r0, r5
   d4416:	f001 fe5b 	bl	d60d0 <_ZN9FuelGauge6getSoCEv>
   d441a:	ee10 0a10 	vmov	r0, s0
   d441e:	f002 fe37 	bl	d7090 <__aeabi_f2d>
   d4422:	ec41 0b10 	vmov	d0, r0, r1
   d4426:	2102      	movs	r1, #2
   d4428:	4630      	mov	r0, r6
   d442a:	f001 fd3f 	bl	d5eac <_ZN5Print7printlnEdi>

  Serial.print("Voltage: ");
   d442e:	f001 ffe1 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4432:	4934      	ldr	r1, [pc, #208]	; (d4504 <_Z15printSystemInfov+0x1b4>)
   d4434:	f001 fc0e 	bl	d5c54 <_ZN5Print5printEPKc>
  Serial.println(fuelGuage.getVCell());
   d4438:	f001 ffdc 	bl	d63f4 <_Z16_fetch_usbserialv>
   d443c:	4606      	mov	r6, r0
   d443e:	4628      	mov	r0, r5
   d4440:	f001 fe30 	bl	d60a4 <_ZN9FuelGauge8getVCellEv>
   d4444:	ee10 0a10 	vmov	r0, s0
   d4448:	f002 fe22 	bl	d7090 <__aeabi_f2d>
   d444c:	ec41 0b10 	vmov	d0, r0, r1
   d4450:	2102      	movs	r1, #2
   d4452:	4630      	mov	r0, r6
   d4454:	f001 fd2a 	bl	d5eac <_ZN5Print7printlnEdi>

  Serial.println("Compass initializing");
   d4458:	f001 ffcc 	bl	d63f4 <_Z16_fetch_usbserialv>
   d445c:	492a      	ldr	r1, [pc, #168]	; (d4508 <_Z15printSystemInfov+0x1b8>)
  compassSensor = Compass();
   d445e:	4d2b      	ldr	r5, [pc, #172]	; (d450c <_Z15printSystemInfov+0x1bc>)
  Serial.println(fuelGuage.getSoC());

  Serial.print("Voltage: ");
  Serial.println(fuelGuage.getVCell());

  Serial.println("Compass initializing");
   d4460:	f001 fc0b 	bl	d5c7a <_ZN5Print7printlnEPKc>
  compassSensor = Compass();
   d4464:	4620      	mov	r0, r4
   d4466:	f000 f93f 	bl	d46e8 <_ZN7CompassC1Ev>
   d446a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   d446e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Serial.println(compassSensor.begin());
   d4472:	f001 ffbf 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4476:	4604      	mov	r4, r0
   d4478:	4628      	mov	r0, r5
   d447a:	f000 f945 	bl	d4708 <_ZN7Compass5beginEv>
   d447e:	220a      	movs	r2, #10
   d4480:	4601      	mov	r1, r0
   d4482:	4620      	mov	r0, r4
   d4484:	f001 fc56 	bl	d5d34 <_ZN5Print7printlnEii>
  Serial.println("Compass initialed");
   d4488:	f001 ffb4 	bl	d63f4 <_Z16_fetch_usbserialv>
   d448c:	4920      	ldr	r1, [pc, #128]	; (d4510 <_Z15printSystemInfov+0x1c0>)
   d448e:	f001 fbf4 	bl	d5c7a <_ZN5Print7printlnEPKc>

  CompassReading reading = compassSensor.getReading();
   d4492:	4628      	mov	r0, r5
   d4494:	f000 f974 	bl	d4780 <_ZN7Compass10getReadingEv>
   d4498:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
   d449c:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
   d44a0:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
   d44a4:	f001 ffa6 	bl	d63f4 <_Z16_fetch_usbserialv>
   d44a8:	4604      	mov	r4, r0
   d44aa:	9811      	ldr	r0, [sp, #68]	; 0x44
   d44ac:	f002 fdf0 	bl	d7090 <__aeabi_f2d>
   d44b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44b4:	9810      	ldr	r0, [sp, #64]	; 0x40
   d44b6:	f002 fdeb 	bl	d7090 <__aeabi_f2d>
   d44ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44be:	980f      	ldr	r0, [sp, #60]	; 0x3c
   d44c0:	f002 fde6 	bl	d7090 <__aeabi_f2d>
   d44c4:	4a13      	ldr	r2, [pc, #76]	; (d4514 <_Z15printSystemInfov+0x1c4>)
   d44c6:	e9cd 0100 	strd	r0, r1, [sp]
   d44ca:	2101      	movs	r1, #1
   d44cc:	4620      	mov	r0, r4
   d44ce:	f001 fcf8 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>
  Serial.println("Weather Station");
}

void printSystemInfo()
{
  String myID = System.deviceID();
   d44d2:	a807      	add	r0, sp, #28
   d44d4:	f001 fadd 	bl	d5a92 <_ZN6StringD1Ev>
  Serial.println(compassSensor.begin());
  Serial.println("Compass initialed");

  CompassReading reading = compassSensor.getReading();
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
}
   d44d8:	b016      	add	sp, #88	; 0x58
   d44da:	bd70      	pop	{r4, r5, r6, pc}
   d44dc:	000d78ee 	.word	0x000d78ee
   d44e0:	000d78fc 	.word	0x000d78fc
   d44e4:	2003e2a0 	.word	0x2003e2a0
   d44e8:	000d790f 	.word	0x000d790f
   d44ec:	000d7927 	.word	0x000d7927
   d44f0:	000d793f 	.word	0x000d793f
   d44f4:	000d795a 	.word	0x000d795a
   d44f8:	000d796d 	.word	0x000d796d
   d44fc:	2003e344 	.word	0x2003e344
   d4500:	000d7980 	.word	0x000d7980
   d4504:	000d7989 	.word	0x000d7989
   d4508:	000d7993 	.word	0x000d7993
   d450c:	2003e318 	.word	0x2003e318
   d4510:	000d79a8 	.word	0x000d79a8
   d4514:	000d79ba 	.word	0x000d79ba

000d4518 <_Z9deepSleepj>:

#define WAKEUP_BUDDY_ADDRESS 8

void deepSleep(unsigned int milliseconds)
{
   d4518:	b513      	push	{r0, r1, r4, lr}
   d451a:	4604      	mov	r4, r0
  Serial.printlnf("Deep Sleep for %d milliseconds", milliseconds);
   d451c:	f001 ff6a 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4520:	4623      	mov	r3, r4
   d4522:	4a15      	ldr	r2, [pc, #84]	; (d4578 <_Z9deepSleepj+0x60>)
   d4524:	2101      	movs	r1, #1
   d4526:	f001 fccc 	bl	d5ec2 <_ZN5Print11printf_implEbPKcz>
  Wire.beginTransmission(WAKEUP_BUDDY_ADDRESS);
   d452a:	f002 fabd 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d452e:	2108      	movs	r1, #8
   d4530:	f002 f8a2 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(milliseconds);
   d4534:	f002 fab8 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4538:	4621      	mov	r1, r4
   d453a:	f7ff fe27 	bl	d418c <_ZN7TwoWire5writeEj>
  Wire.write(milliseconds >> 8);
   d453e:	f002 fab3 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4542:	0a21      	lsrs	r1, r4, #8
   d4544:	f7ff fe22 	bl	d418c <_ZN7TwoWire5writeEj>
  uint8_t status = Wire.endTransmission();
   d4548:	f002 faae 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d454c:	f002 f89b 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
   d4550:	4604      	mov	r4, r0
  Serial.printlnf("Transmission status %d", status);
   d4552:	f001 ff4f 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4556:	4622      	mov	r2, r4
   d4558:	4908      	ldr	r1, [pc, #32]	; (d457c <_Z9deepSleepj+0x64>)
   d455a:	f7ff fef3 	bl	d4344 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  fuelGuage.sleep();
   d455e:	4808      	ldr	r0, [pc, #32]	; (d4580 <_Z9deepSleepj+0x68>)
   d4560:	f001 fe04 	bl	d616c <_ZN9FuelGauge5sleepEv>
  System.sleep(SLEEP_MODE_DEEP);
   d4564:	4b07      	ldr	r3, [pc, #28]	; (d4584 <_Z9deepSleepj+0x6c>)
   d4566:	2200      	movs	r2, #0
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	2101      	movs	r1, #1
   d456c:	4668      	mov	r0, sp
   d456e:	f001 fa1d 	bl	d59ac <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4572:	b002      	add	sp, #8
   d4574:	bd10      	pop	{r4, pc}
   d4576:	bf00      	nop
   d4578:	000d79ce 	.word	0x000d79ce
   d457c:	000d79ed 	.word	0x000d79ed
   d4580:	2003e344 	.word	0x2003e344
   d4584:	2003e32c 	.word	0x2003e32c

000d4588 <loop>:

void loop()
{
   d4588:	b508      	push	{r3, lr}
  digitalWrite(LED_BUILTIN, HIGH);
   d458a:	2101      	movs	r1, #1
   d458c:	2007      	movs	r0, #7
   d458e:	f002 f9e2 	bl	d6956 <digitalWrite>
  delay(1000);
   d4592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4596:	f001 fce1 	bl	d5f5c <delay>
  digitalWrite(LED_BUILTIN, LOW);
   d459a:	2100      	movs	r1, #0
   d459c:	2007      	movs	r0, #7
   d459e:	f002 f9da 	bl	d6956 <digitalWrite>

  // And repeat!
  printSystemInfo();
   d45a2:	f7ff fed5 	bl	d4350 <_Z15printSystemInfov>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d45a6:	f000 fe59 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d45aa:	4b04      	ldr	r3, [pc, #16]	; (d45bc <loop+0x34>)
   d45ac:	6018      	str	r0, [r3, #0]

  wd.checkin();

  deepSleep(30000);
}
   d45ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // And repeat!
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
   d45b2:	f247 5030 	movw	r0, #30000	; 0x7530
   d45b6:	f7ff bfaf 	b.w	d4518 <_Z9deepSleepj>
   d45ba:	bf00      	nop
   d45bc:	2003e714 	.word	0x2003e714

000d45c0 <_GLOBAL__sub_I_SystemMode>:
}
   d45c0:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d45c2:	4b35      	ldr	r3, [pc, #212]	; (d4698 <_GLOBAL__sub_I_SystemMode+0xd8>)

DHT dht(DHT_IN, DHTTYPE);
Adafruit_BME280 bme280;
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);

FuelGauge fuelGuage;
   d45c4:	4c35      	ldr	r4, [pc, #212]	; (d469c <_GLOBAL__sub_I_SystemMode+0xdc>)
   d45c6:	4e36      	ldr	r6, [pc, #216]	; (d46a0 <_GLOBAL__sub_I_SystemMode+0xe0>)
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
}
   d45c8:	b086      	sub	sp, #24
   d45ca:	2500      	movs	r5, #0
   d45cc:	601d      	str	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45ce:	f000 fdad 	bl	d512c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d45d2:	4b34      	ldr	r3, [pc, #208]	; (d46a4 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d45d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d45d8:	701d      	strb	r5, [r3, #0]
   d45da:	805d      	strh	r5, [r3, #2]
   d45dc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45de:	2002      	movs	r0, #2
   d45e0:	f000 ffc4 	bl	d556c <set_system_mode>
#include <Adafruit_DHT.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <LaCrosse_TX23.h>

DHT dht(DHT_IN, DHTTYPE);
   d45e4:	2306      	movs	r3, #6
   d45e6:	4619      	mov	r1, r3
   d45e8:	2216      	movs	r2, #22
   d45ea:	482f      	ldr	r0, [pc, #188]	; (d46a8 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d45ec:	f000 fd67 	bl	d50be <_ZN3DHTC1Ehhh>
Adafruit_BME280 bme280;
   d45f0:	482e      	ldr	r0, [pc, #184]	; (d46ac <_GLOBAL__sub_I_SystemMode+0xec>)
   d45f2:	f000 f9e3 	bl	d49bc <_ZN15Adafruit_BME280C1Ev>
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);
   d45f6:	2101      	movs	r1, #1
   d45f8:	482d      	ldr	r0, [pc, #180]	; (d46b0 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d45fa:	f000 fc53 	bl	d4ea4 <_ZN13LaCrosse_TX23C1Ei>

FuelGauge fuelGuage;
   d45fe:	4629      	mov	r1, r5
   d4600:	4620      	mov	r0, r4
   d4602:	f001 fd0f 	bl	d6024 <_ZN9FuelGaugeC1Eb>
   d4606:	4620      	mov	r0, r4
PMIC pmic;
   d4608:	4c2a      	ldr	r4, [pc, #168]	; (d46b4 <_GLOBAL__sub_I_SystemMode+0xf4>)

DHT dht(DHT_IN, DHTTYPE);
Adafruit_BME280 bme280;
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);

FuelGauge fuelGuage;
   d460a:	492b      	ldr	r1, [pc, #172]	; (d46b8 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d460c:	4632      	mov	r2, r6
   d460e:	f002 fa8b 	bl	d6b28 <__aeabi_atexit>
PMIC pmic;
   d4612:	4629      	mov	r1, r5
   d4614:	4620      	mov	r0, r4
   d4616:	f001 f86e 	bl	d56f6 <_ZN4PMICC1Eb>
   d461a:	4632      	mov	r2, r6
   d461c:	4927      	ldr	r1, [pc, #156]	; (d46bc <_GLOBAL__sub_I_SystemMode+0xfc>)
   d461e:	4620      	mov	r0, r4
   d4620:	f002 fa82 	bl	d6b28 <__aeabi_atexit>
Compass compassSensor;
   d4624:	4826      	ldr	r0, [pc, #152]	; (d46c0 <_GLOBAL__sub_I_SystemMode+0x100>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d4626:	4c27      	ldr	r4, [pc, #156]	; (d46c4 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4628:	f000 f85e 	bl	d46e8 <_ZN7CompassC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d462c:	4b26      	ldr	r3, [pc, #152]	; (d46c8 <_GLOBAL__sub_I_SystemMode+0x108>)
   d462e:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4630:	4b26      	ldr	r3, [pc, #152]	; (d46cc <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4632:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d4634:	4b26      	ldr	r3, [pc, #152]	; (d46d0 <_GLOBAL__sub_I_SystemMode+0x110>)
   d4636:	9304      	str	r3, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4638:	a902      	add	r1, sp, #8
   d463a:	f644 6320 	movw	r3, #20000	; 0x4e20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d463e:	60e5      	str	r5, [r4, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4640:	2202      	movs	r2, #2
   d4642:	1d20      	adds	r0, r4, #4
   d4644:	6023      	str	r3, [r4, #0]
   d4646:	f7ff fd34 	bl	d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d464a:	9b05      	ldr	r3, [sp, #20]
   d464c:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d464e:	9b04      	ldr	r3, [sp, #16]
   d4650:	60e3      	str	r3, [r4, #12]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4652:	4b20      	ldr	r3, [pc, #128]	; (d46d4 <_GLOBAL__sub_I_SystemMode+0x114>)
   d4654:	61e3      	str	r3, [r4, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d4656:	f104 0014 	add.w	r0, r4, #20
   d465a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d465e:	2209      	movs	r2, #9
   d4660:	491d      	ldr	r1, [pc, #116]	; (d46d8 <_GLOBAL__sub_I_SystemMode+0x118>)

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4662:	6165      	str	r5, [r4, #20]
   d4664:	61a5      	str	r5, [r4, #24]
   d4666:	6224      	str	r4, [r4, #32]
   d4668:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d466c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4670:	4b1a      	ldr	r3, [pc, #104]	; (d46dc <_GLOBAL__sub_I_SystemMode+0x11c>)
   d4672:	f000 fe1b 	bl	d52ac <os_thread_create>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4676:	f000 fdf1 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d467a:	4b19      	ldr	r3, [pc, #100]	; (d46e0 <_GLOBAL__sub_I_SystemMode+0x120>)
   d467c:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d467e:	a802      	add	r0, sp, #8
   d4680:	f7ff fd5b 	bl	d413a <_ZNSt14_Function_baseD1Ev>

ApplicationWatchdog wd(20000, watchDogTimeout);
   d4684:	4632      	mov	r2, r6
   d4686:	4917      	ldr	r1, [pc, #92]	; (d46e4 <_GLOBAL__sub_I_SystemMode+0x124>)
   d4688:	4620      	mov	r0, r4
   d468a:	f002 fa4d 	bl	d6b28 <__aeabi_atexit>
    reading->pressure = bme280.readPressure();
    reading->bmeHumidity = bme280.readHumidity();
    return !isnan(reading->bmeTemperature) && !isnan(reading->pressure) && reading->pressure > 0 && !isnan(reading->bmeHumidity);
}

STARTUP(deviceSetup());
   d468e:	f7ff fde7 	bl	d4260 <_Z11deviceSetupv>
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
}
   d4692:	b006      	add	sp, #24
   d4694:	bd70      	pop	{r4, r5, r6, pc}
   d4696:	bf00      	nop
   d4698:	2003e32c 	.word	0x2003e32c
   d469c:	2003e344 	.word	0x2003e344
   d46a0:	2003e24c 	.word	0x2003e24c
   d46a4:	2003e2a2 	.word	0x2003e2a2
   d46a8:	2003e330 	.word	0x2003e330
   d46ac:	2003e2a8 	.word	0x2003e2a8
   d46b0:	2003e328 	.word	0x2003e328
   d46b4:	2003e2a0 	.word	0x2003e2a0
   d46b8:	000d6043 	.word	0x000d6043
   d46bc:	000d5715 	.word	0x000d5715
   d46c0:	2003e318 	.word	0x2003e318
   d46c4:	2003e2e8 	.word	0x2003e2e8
   d46c8:	000d40f9 	.word	0x000d40f9
   d46cc:	000d40af 	.word	0x000d40af
   d46d0:	000d40b3 	.word	0x000d40b3
   d46d4:	000d6a71 	.word	0x000d6a71
   d46d8:	000d7a04 	.word	0x000d7a04
   d46dc:	000d4111 	.word	0x000d4111
   d46e0:	2003e714 	.word	0x2003e714
   d46e4:	000d414d 	.word	0x000d414d

000d46e8 <_ZN7CompassC1Ev>:
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;

Compass::Compass()
   d46e8:	b530      	push	{r4, r5, lr}
   d46ea:	b085      	sub	sp, #20
   d46ec:	4604      	mov	r4, r0
   d46ee:	f000 f85f 	bl	d47b0 <_ZN8QMC5883LC1Ev>
{
    compass = QMC5883L();
   d46f2:	4668      	mov	r0, sp
   d46f4:	f000 f85c 	bl	d47b0 <_ZN8QMC5883LC1Ev>
   d46f8:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   d46fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   d4700:	4620      	mov	r0, r4
   d4702:	b005      	add	sp, #20
   d4704:	bd30      	pop	{r4, r5, pc}
	...

000d4708 <_ZN7Compass5beginEv>:

bool Compass::begin()
{
   d4708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d470a:	4604      	mov	r4, r0
    //re-initialize the wire library if necessary
    if(!Wire.isEnabled()) Wire.begin();
   d470c:	f002 f9cc 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4710:	f001 ffbc 	bl	d668c <_ZN7TwoWire9isEnabledEv>
   d4714:	b918      	cbnz	r0, d471e <_ZN7Compass5beginEv+0x16>
   d4716:	f002 f9c7 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d471a:	f001 ff8d 	bl	d6638 <_ZN7TwoWire5beginEv>

    // Check that a device responds at the compass address - don't continue if it doesn't -
    Wire.beginTransmission(QMC5883L_Address);
   d471e:	f002 f9c3 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4722:	210d      	movs	r1, #13
   d4724:	f001 ffa8 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
    int error = Wire.endTransmission();
   d4728:	f002 f9be 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d472c:	f001 ffab 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>

    if (!error)
   d4730:	4605      	mov	r5, r0
   d4732:	b9f0      	cbnz	r0, d4772 <_ZN7Compass5beginEv+0x6a>
    {
        // configure the control registers using static settings above
        // compass autoranges, but starts in the mode given
        compass.dataRegister.OSR_RNG_ODR_MODE = (OSR << 6) | (RNG << 4) | (ODR << 2) | MODE;
   d4734:	2301      	movs	r3, #1
   d4736:	7263      	strb	r3, [r4, #9]
        compass.dataRegister.CR2_INT_ENABLE = CR2;
        compass.dataRegister.SET_RESET_PERIOD = RESETPERIOD;
   d4738:	72e3      	strb	r3, [r4, #11]
    if (!error)
    {
        // configure the control registers using static settings above
        // compass autoranges, but starts in the mode given
        compass.dataRegister.OSR_RNG_ODR_MODE = (OSR << 6) | (RNG << 4) | (ODR << 2) | MODE;
        compass.dataRegister.CR2_INT_ENABLE = CR2;
   d473a:	72a0      	strb	r0, [r4, #10]
        compass.dataRegister.SET_RESET_PERIOD = RESETPERIOD;

        Serial.println("Configuring QMC5883L - OSR 512, range +/-2 Gauss, ODR 10, Continuous");
   d473c:	f001 fe5a 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4740:	490e      	ldr	r1, [pc, #56]	; (d477c <_ZN7Compass5beginEv+0x74>)
   d4742:	f001 fa9a 	bl	d5c7a <_ZN5Print7printlnEPKc>
        error = compass.Configure(compass.dataRegister); // use static settings from above - can access register data directly if required..
   d4746:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   d474a:	4620      	mov	r0, r4
   d474c:	f000 f849 	bl	d47e2 <_ZN8QMC5883L9ConfigureE12QMC5883L_ODR>
        if (error != 0) Serial.println(compass.GetErrorText(error));
   d4750:	4605      	mov	r5, r0
   d4752:	b170      	cbz	r0, d4772 <_ZN7Compass5beginEv+0x6a>
   d4754:	f001 fe4e 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4758:	462a      	mov	r2, r5
   d475a:	4606      	mov	r6, r0
   d475c:	4621      	mov	r1, r4
   d475e:	4668      	mov	r0, sp
   d4760:	f000 f8c6 	bl	d48f0 <_ZN8QMC5883L12GetErrorTextEi>
   d4764:	9900      	ldr	r1, [sp, #0]
   d4766:	4630      	mov	r0, r6
   d4768:	f001 fa87 	bl	d5c7a <_ZN5Print7printlnEPKc>
   d476c:	4668      	mov	r0, sp
   d476e:	f001 f990 	bl	d5a92 <_ZN6StringD1Ev>
    }
    return !error;
}
   d4772:	fab5 f085 	clz	r0, r5
   d4776:	0940      	lsrs	r0, r0, #5
   d4778:	b004      	add	sp, #16
   d477a:	bd70      	pop	{r4, r5, r6, pc}
   d477c:	000d7a0b 	.word	0x000d7a0b

000d4780 <_ZN7Compass10getReadingEv>:

CompassReading Compass::getReading()
{
   d4780:	b500      	push	{lr}
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d4782:	4601      	mov	r1, r0
    }
    return !error;
}

CompassReading Compass::getReading()
{
   d4784:	b08b      	sub	sp, #44	; 0x2c
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d4786:	f000 f895 	bl	d48b4 <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d478a:	b00b      	add	sp, #44	; 0x2c
   d478c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4790 <_GLOBAL__sub_I_compass>:
   d4790:	b508      	push	{r3, lr}
   d4792:	f000 fccb 	bl	d512c <HAL_Pin_Map>
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d4796:	4802      	ldr	r0, [pc, #8]	; (d47a0 <_GLOBAL__sub_I_compass+0x10>)
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d4798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d479c:	f000 b808 	b.w	d47b0 <_ZN8QMC5883LC1Ev>
   d47a0:	2003e34c 	.word	0x2003e34c

000d47a4 <_GLOBAL__sub_I__ZN24Adafruit_HMC5883_Unified6write8Ehhh>:
   d47a4:	f000 bcc2 	b.w	d512c <HAL_Pin_Map>

000d47a8 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d47a8:	6803      	ldr	r3, [r0, #0]
   d47aa:	b2c9      	uxtb	r1, r1
   d47ac:	689b      	ldr	r3, [r3, #8]
   d47ae:	4718      	bx	r3

000d47b0 <_ZN8QMC5883LC1Ev>:
#include "QMC5883L.h"

QMC5883L::QMC5883L()
{
  
}
   d47b0:	4770      	bx	lr

000d47b2 <_ZN8QMC5883L5WriteEii>:
     return 0;
}


void QMC5883L::Write(int address, int data)
{
   d47b2:	b538      	push	{r3, r4, r5, lr}
   d47b4:	4614      	mov	r4, r2
   d47b6:	460d      	mov	r5, r1
  Wire.beginTransmission(QMC5883L_Address);
   d47b8:	f002 f976 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d47bc:	210d      	movs	r1, #13
   d47be:	f001 ff5b 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   d47c2:	f002 f971 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d47c6:	4629      	mov	r1, r5
   d47c8:	f7ff ffee 	bl	d47a8 <_ZN7TwoWire5writeEi>
  Wire.write(data);
   d47cc:	f002 f96c 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d47d0:	4621      	mov	r1, r4
   d47d2:	f7ff ffe9 	bl	d47a8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d47d6:	f002 f967 	bl	d6aa8 <_Z19__fetch_global_Wirev>
}
   d47da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void QMC5883L::Write(int address, int data)
{
  Wire.beginTransmission(QMC5883L_Address);
  Wire.write(address);
  Wire.write(data);
  Wire.endTransmission();
   d47de:	f001 bf52 	b.w	d6686 <_ZN7TwoWire15endTransmissionEv>

000d47e2 <_ZN8QMC5883L9ConfigureE12QMC5883L_ODR>:
  scaled.ZAxis = raw.ZAxis * m_Scale;
  return scaled;
}

int QMC5883L::Configure(QMC5883L_ODR dataRegister)
{
   d47e2:	b530      	push	{r4, r5, lr}
   d47e4:	b085      	sub	sp, #20
   d47e6:	ad04      	add	r5, sp, #16
   d47e8:	e905 000e 	stmdb	r5, {r1, r2, r3}
   d47ec:	f89d 500d 	ldrb.w	r5, [sp, #13]
   d47f0:	4604      	mov	r4, r0
	Write(ControlRegister1, dataRegister.OSR_RNG_ODR_MODE);
   d47f2:	462a      	mov	r2, r5
   d47f4:	2109      	movs	r1, #9
   d47f6:	f7ff ffdc 	bl	d47b2 <_ZN8QMC5883L5WriteEii>
	Write(ControlRegister2, dataRegister.CR2_INT_ENABLE);
   d47fa:	f89d 200e 	ldrb.w	r2, [sp, #14]
   d47fe:	4620      	mov	r0, r4
   d4800:	210a      	movs	r1, #10
   d4802:	f7ff ffd6 	bl	d47b2 <_ZN8QMC5883L5WriteEii>
	Write(SetResetPeriodRegister, dataRegister.SET_RESET_PERIOD);
   d4806:	4620      	mov	r0, r4
   d4808:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d480c:	210b      	movs	r1, #11
   d480e:	f7ff ffd0 	bl	d47b2 <_ZN8QMC5883L5WriteEii>

// as its 2's complement, fullsscale range is either 2 or 8 gauss per 15 bits (32768) 
switch (dataRegister.OSR_RNG_ODR_MODE & 0b00010000) {
   d4812:	06eb      	lsls	r3, r5, #27
 case 0b00010000: 
     m_Scale = (float) 8 / (float) 32768;
   d4814:	bf4c      	ite	mi
   d4816:	f04f 5366 	movmi.w	r3, #964689920	; 0x39800000
     break;
  default:
     m_Scale = (float) 2 / (float) 32768;
   d481a:	f04f 5362 	movpl.w	r3, #947912704	; 0x38800000
  break;
}

     return 0;
}
   d481e:	2000      	movs	r0, #0
switch (dataRegister.OSR_RNG_ODR_MODE & 0b00010000) {
 case 0b00010000: 
     m_Scale = (float) 8 / (float) 32768;
     break;
  default:
     m_Scale = (float) 2 / (float) 32768;
   d4820:	60e3      	str	r3, [r4, #12]
  break;
}

     return 0;
}
   d4822:	b005      	add	sp, #20
   d4824:	bd30      	pop	{r4, r5, pc}

000d4826 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>:
  Wire.write(data);
  Wire.endTransmission();
}

void QMC5883L::Read(int address, int length, QMC5883L_ODR* dataRegister)
{
   d4826:	b570      	push	{r4, r5, r6, lr}
   d4828:	461e      	mov	r6, r3
   d482a:	4615      	mov	r5, r2
   d482c:	460c      	mov	r4, r1
  Wire.beginTransmission(QMC5883L_Address);
   d482e:	f002 f93b 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4832:	210d      	movs	r1, #13
   d4834:	f001 ff20 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   d4838:	f002 f936 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d483c:	4621      	mov	r1, r4
   d483e:	f7ff ffb3 	bl	d47a8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4842:	f002 f931 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4846:	f001 ff1e 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
  

  Wire.beginTransmission(QMC5883L_Address);
   d484a:	f002 f92d 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d484e:	210d      	movs	r1, #13
   d4850:	f001 ff12 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(QMC5883L_Address, length);
   d4854:	f002 f928 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4858:	462a      	mov	r2, r5
   d485a:	210d      	movs	r1, #13
   d485c:	f001 fefe 	bl	d665c <_ZN7TwoWire11requestFromEii>

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
   d4860:	f002 f922 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4864:	6803      	ldr	r3, [r0, #0]
   d4866:	691b      	ldr	r3, [r3, #16]
   d4868:	4798      	blx	r3
   d486a:	4285      	cmp	r5, r0
   d486c:	d10b      	bne.n	d4886 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
   d486e:	4634      	mov	r4, r6
  {
 for(int i = 0; i < length; i++)
   d4870:	1ba3      	subs	r3, r4, r6
   d4872:	429d      	cmp	r5, r3
   d4874:	dd07      	ble.n	d4886 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
	  {
		reg[i] = Wire.read();
   d4876:	f002 f917 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d487a:	6803      	ldr	r3, [r0, #0]
   d487c:	695b      	ldr	r3, [r3, #20]
   d487e:	4798      	blx	r3
   d4880:	f804 0b01 	strb.w	r0, [r4], #1

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
  {
 for(int i = 0; i < length; i++)
   d4884:	e7f4      	b.n	d4870 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x4a>
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d4886:	f002 f90f 	bl	d6aa8 <_Z19__fetch_global_Wirev>

  return;
}
   d488a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d488e:	f001 befa 	b.w	d6686 <_ZN7TwoWire15endTransmissionEv>

000d4892 <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>:
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d4892:	b538      	push	{r3, r4, r5, lr}
   d4894:	4615      	mov	r5, r2
   d4896:	4604      	mov	r4, r0
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d4898:	4613      	mov	r3, r2
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d489a:	4608      	mov	r0, r1
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d489c:	2209      	movs	r2, #9
   d489e:	2100      	movs	r1, #0
   d48a0:	f7ff ffc1 	bl	d4826 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>
  MagnetometerRaw raw = MagnetometerRaw();
  // QMC5883L is the other way around and comes X,Y,Z
  // answer is in 2's complement becuase XAxis etc are ints...
  raw.XAxis = (dataRegister->X_MSB << 8) | (dataRegister->X_LSB);
   d48a4:	882b      	ldrh	r3, [r5, #0]
   d48a6:	6023      	str	r3, [r4, #0]
  raw.YAxis = (dataRegister->Y_MSB << 8) | (dataRegister->Y_LSB);
   d48a8:	886b      	ldrh	r3, [r5, #2]
   d48aa:	6063      	str	r3, [r4, #4]
  raw.ZAxis = (dataRegister->Z_MSB << 8) | (dataRegister->Z_LSB);
   d48ac:	88ab      	ldrh	r3, [r5, #4]
   d48ae:	60a3      	str	r3, [r4, #8]
return raw;
}
   d48b0:	4620      	mov	r0, r4
   d48b2:	bd38      	pop	{r3, r4, r5, pc}

000d48b4 <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>:

MagnetometerScaled QMC5883L::ReadScaledAxis(QMC5883L_ODR* dataRegister)
{
   d48b4:	b510      	push	{r4, lr}
   d48b6:	b08a      	sub	sp, #40	; 0x28
   d48b8:	4604      	mov	r4, r0
  MagnetometerRaw raw = ReadRawAxis(dataRegister);
   d48ba:	460a      	mov	r2, r1
   d48bc:	4601      	mov	r1, r0
   d48be:	a804      	add	r0, sp, #16
   d48c0:	f7ff ffe7 	bl	d4892 <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
  scaled.YAxis = raw.YAxis * m_Scale;
   d48c4:	ed9d 7a05 	vldr	s14, [sp, #20]
Serial.print(" raw.Zaxis ");
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
   d48c8:	edd4 7a03 	vldr	s15, [r4, #12]
  scaled.YAxis = raw.YAxis * m_Scale;
   d48cc:	eef8 0ac7 	vcvt.f32.s32	s1, s14
  scaled.ZAxis = raw.ZAxis * m_Scale;
   d48d0:	ed9d 7a06 	vldr	s14, [sp, #24]
   d48d4:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
  return scaled;
   d48d8:	ed9d 7a04 	vldr	s14, [sp, #16]
   d48dc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
   d48e0:	ee60 0aa7 	vmul.f32	s1, s1, s15
   d48e4:	ee20 0a27 	vmul.f32	s0, s0, s15
   d48e8:	ee21 1a27 	vmul.f32	s2, s2, s15
   d48ec:	b00a      	add	sp, #40	; 0x28
   d48ee:	bd10      	pop	{r4, pc}

000d48f0 <_ZN8QMC5883L12GetErrorTextEi>:

  return;
}

String QMC5883L::GetErrorText(int errorCode)
{
   d48f0:	b530      	push	{r4, r5, lr}
   d48f2:	b089      	sub	sp, #36	; 0x24
   d48f4:	4604      	mov	r4, r0
   d48f6:	4615      	mov	r5, r2

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d48f8:	490c      	ldr	r1, [pc, #48]	; (d492c <_ZN8QMC5883L12GetErrorTextEi+0x3c>)
   d48fa:	a804      	add	r0, sp, #16
   d48fc:	f001 f910 	bl	d5b20 <_ZN6StringC1EPK19__FlashStringHelper>
	return String("Error code "+String(errorCode));
   d4900:	220a      	movs	r2, #10
   d4902:	4629      	mov	r1, r5
   d4904:	4668      	mov	r0, sp
   d4906:	f001 f949 	bl	d5b9c <_ZN6StringC1Eih>
   d490a:	4669      	mov	r1, sp
   d490c:	a804      	add	r0, sp, #16
   d490e:	f001 f96f 	bl	d5bf0 <_ZplRK15StringSumHelperRK6String>
   d4912:	4601      	mov	r1, r0
   d4914:	4620      	mov	r0, r4
   d4916:	f001 f925 	bl	d5b64 <_ZN6StringC1ERKS_>
   d491a:	4668      	mov	r0, sp
   d491c:	f001 f8b9 	bl	d5a92 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4920:	a804      	add	r0, sp, #16
   d4922:	f001 f8b6 	bl	d5a92 <_ZN6StringD1Ev>
   d4926:	4620      	mov	r0, r4
   d4928:	b009      	add	sp, #36	; 0x24
   d492a:	bd30      	pop	{r4, r5, pc}
   d492c:	000d7a50 	.word	0x000d7a50

000d4930 <_GLOBAL__sub_I__ZN8QMC5883LC2Ev>:
   d4930:	f000 bbfc 	b.w	d512c <HAL_Pin_Map>

000d4934 <_Z12loadSettingsv>:

    return result;
}

Settings* loadSettings()
{
   d4934:	b570      	push	{r4, r5, r6, lr}
   d4936:	b088      	sub	sp, #32
    Settings eepromSettings;
    EEPROM.get(0,eepromSettings);
   d4938:	f002 f8a2 	bl	d6a80 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d493c:	221c      	movs	r2, #28
   d493e:	a901      	add	r1, sp, #4
   d4940:	2000      	movs	r0, #0
   d4942:	f000 fc9b 	bl	d527c <HAL_EEPROM_Get>
    Settings* result = &DefaultSettings;

    if(eepromSettings.version >= 0)
   d4946:	9b01      	ldr	r3, [sp, #4]
   d4948:	2b00      	cmp	r3, #0
   d494a:	db0c      	blt.n	d4966 <_Z12loadSettingsv+0x32>
    {
        result = (Settings*)malloc(sizeof(Settings));
   d494c:	201c      	movs	r0, #28
   d494e:	f000 fea1 	bl	d5694 <malloc>
        *result = eepromSettings;
   d4952:	ac01      	add	r4, sp, #4
   d4954:	4605      	mov	r5, r0
    EEPROM.get(0,eepromSettings);
    Settings* result = &DefaultSettings;

    if(eepromSettings.version >= 0)
    {
        result = (Settings*)malloc(sizeof(Settings));
   d4956:	4606      	mov	r6, r0
        *result = eepromSettings;
   d4958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d495a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d495c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4960:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   d4964:	e000      	b.n	d4968 <_Z12loadSettingsv+0x34>

Settings* loadSettings()
{
    Settings eepromSettings;
    EEPROM.get(0,eepromSettings);
    Settings* result = &DefaultSettings;
   d4966:	4e02      	ldr	r6, [pc, #8]	; (d4970 <_Z12loadSettingsv+0x3c>)
    {
        result = (Settings*)malloc(sizeof(Settings));
        *result = eepromSettings;
    }
    return result;
}
   d4968:	4630      	mov	r0, r6
   d496a:	b008      	add	sp, #32
   d496c:	bd70      	pop	{r4, r5, r6, pc}
   d496e:	bf00      	nop
   d4970:	2003e1c8 	.word	0x2003e1c8

000d4974 <_Z12saveSettingsP8Settings>:

void saveSettings(Settings* settings)
{
   d4974:	b510      	push	{r4, lr}
   d4976:	4604      	mov	r4, r0
    Settings* existingSettings = loadSettings();
   d4978:	f7ff ffdc 	bl	d4934 <_Z12loadSettingsv>
    
    settings->version = existingSettings->version + 1;
   d497c:	6803      	ldr	r3, [r0, #0]
   d497e:	3301      	adds	r3, #1
   d4980:	6023      	str	r3, [r4, #0]
    Serial.print("SAVING SETTINGS ");
   d4982:	f001 fd37 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4986:	490b      	ldr	r1, [pc, #44]	; (d49b4 <_Z12saveSettingsP8Settings+0x40>)
   d4988:	f001 f964 	bl	d5c54 <_ZN5Print5printEPKc>
    Serial.print(settings->version);
   d498c:	f001 fd32 	bl	d63f4 <_Z16_fetch_usbserialv>
   d4990:	6821      	ldr	r1, [r4, #0]
   d4992:	220a      	movs	r2, #10
   d4994:	f001 f9cc 	bl	d5d30 <_ZN5Print5printEii>
    Serial.println();
   d4998:	f001 fd2c 	bl	d63f4 <_Z16_fetch_usbserialv>
   d499c:	f001 f961 	bl	d5c62 <_ZN5Print7printlnEv>
    
    EEPROM.put(0,*settings);
   d49a0:	f002 f86e 	bl	d6a80 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d49a4:	4621      	mov	r1, r4
   d49a6:	221c      	movs	r2, #28
   d49a8:	2000      	movs	r0, #0
   d49aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d49ae:	f000 bc6d 	b.w	d528c <HAL_EEPROM_Put>
   d49b2:	bf00      	nop
   d49b4:	000d7a61 	.word	0x000d7a61

000d49b8 <_GLOBAL__sub_I_DefaultSettings>:
   d49b8:	f000 bbb8 	b.w	d512c <HAL_Pin_Map>

000d49bc <_ZN15Adafruit_BME280C1Ev>:

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d49bc:	22ff      	movs	r2, #255	; 0xff
   d49be:	7302      	strb	r2, [r0, #12]
   d49c0:	7342      	strb	r2, [r0, #13]
   d49c2:	7382      	strb	r2, [r0, #14]
   d49c4:	73c2      	strb	r2, [r0, #15]
{ }
   d49c6:	4770      	bx	lr

000d49c8 <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d49c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d49cc:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d49d0:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d49d2:	4605      	mov	r5, r0
   d49d4:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d49d6:	d104      	bne.n	d49e2 <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
   d49d8:	4816      	ldr	r0, [pc, #88]	; (d4a34 <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
    }
    return reply;
}
   d49da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d49de:	f000 bfd3 	b.w	d5988 <_ZN8SPIClass8transferEh>
   d49e2:	2607      	movs	r6, #7
   d49e4:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d49e6:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d49ea:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d49ee:	2100      	movs	r1, #0
   d49f0:	b280      	uxth	r0, r0
   d49f2:	f001 ffb0 	bl	d6956 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d49f6:	f995 000d 	ldrsb.w	r0, [r5, #13]
   d49fa:	fa08 f106 	lsl.w	r1, r8, r6
   d49fe:	4039      	ands	r1, r7
   d4a00:	b280      	uxth	r0, r0
   d4a02:	f001 ffa8 	bl	d6956 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4a06:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d4a0a:	2101      	movs	r1, #1
   d4a0c:	b280      	uxth	r0, r0
   d4a0e:	f001 ffa2 	bl	d6956 <digitalWrite>
        if (digitalRead(_miso))
   d4a12:	f995 000e 	ldrsb.w	r0, [r5, #14]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4a16:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4a18:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4a1a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4a1c:	f001 ffb4 	bl	d6988 <digitalRead>
   d4a20:	b108      	cbz	r0, d4a26 <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
   d4a22:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4a26:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4a2a:	d2de      	bcs.n	d49ea <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
    }
    return reply;
}
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a32:	bf00      	nop
   d4a34:	2003e6f4 	.word	0x2003e6f4

000d4a38 <_ZN15Adafruit_BME2806write8Ehh>:



void Adafruit_BME280::write8(byte reg, byte value)
{
   d4a38:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4a3a:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d4a3e:	3301      	adds	r3, #1
}



void Adafruit_BME280::write8(byte reg, byte value)
{
   d4a40:	4604      	mov	r4, r0
   d4a42:	460e      	mov	r6, r1
   d4a44:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4a46:	d116      	bne.n	d4a76 <_ZN15Adafruit_BME2806write8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4a48:	f002 f82e 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4a4c:	7821      	ldrb	r1, [r4, #0]
   d4a4e:	f001 fe0f 	bl	d6670 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4a52:	f002 f829 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4a56:	6803      	ldr	r3, [r0, #0]
   d4a58:	4631      	mov	r1, r6
   d4a5a:	689b      	ldr	r3, [r3, #8]
   d4a5c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4a5e:	f002 f823 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4a62:	6803      	ldr	r3, [r0, #0]
   d4a64:	4629      	mov	r1, r5
   d4a66:	689b      	ldr	r3, [r3, #8]
   d4a68:	4798      	blx	r3
    Wire.endTransmission();
   d4a6a:	f002 f81d 	bl	d6aa8 <_Z19__fetch_global_Wirev>
    if (_sck == -1) {
      SPI.end();
      // SPI.endTransaction();              // release the SPI bus
    }
  }
}
   d4a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
   d4a72:	f001 be08 	b.w	d6686 <_ZN7TwoWire15endTransmissionEv>
  } else {
    if (_sck == -1) {
   d4a76:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d4a7a:	3301      	adds	r3, #1
   d4a7c:	d10e      	bne.n	d4a9c <_ZN15Adafruit_BME2806write8Ehh+0x64>
      SPI.begin();
   d4a7e:	4817      	ldr	r0, [pc, #92]	; (d4adc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d4a80:	f000 ff10 	bl	d58a4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d4a84:	2128      	movs	r1, #40	; 0x28
   d4a86:	4815      	ldr	r0, [pc, #84]	; (d4adc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d4a88:	f000 ff6a 	bl	d5960 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d4a8c:	2101      	movs	r1, #1
   d4a8e:	4813      	ldr	r0, [pc, #76]	; (d4adc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d4a90:	f000 ff1a 	bl	d58c8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d4a94:	2100      	movs	r1, #0
   d4a96:	4811      	ldr	r0, [pc, #68]	; (d4adc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d4a98:	f000 ff19 	bl	d58ce <_ZN8SPIClass11setDataModeEh>
      //SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d4a9c:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d4aa0:	2100      	movs	r1, #0
   d4aa2:	b280      	uxth	r0, r0
   d4aa4:	f001 ff57 	bl	d6956 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d4aa8:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4aac:	4620      	mov	r0, r4
   d4aae:	f7ff ff8b 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
   d4ab2:	4629      	mov	r1, r5
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	f7ff ff87 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
   d4aba:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d4abe:	2101      	movs	r1, #1
   d4ac0:	b280      	uxth	r0, r0
   d4ac2:	f001 ff48 	bl	d6956 <digitalWrite>
    if (_sck == -1) {
   d4ac6:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d4aca:	3301      	adds	r3, #1
   d4acc:	d104      	bne.n	d4ad8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>
      SPI.end();
   d4ace:	4803      	ldr	r0, [pc, #12]	; (d4adc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
      // SPI.endTransaction();              // release the SPI bus
    }
  }
}
   d4ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1) {
      SPI.end();
   d4ad4:	f000 beeb 	b.w	d58ae <_ZN8SPIClass3endEv>
   d4ad8:	bd70      	pop	{r4, r5, r6, pc}
   d4ada:	bf00      	nop
   d4adc:	2003e6f4 	.word	0x2003e6f4

000d4ae0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4ae2:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4ae6:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4aea:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4aee:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4af2:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4af6:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4afa:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4afe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4b02:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
        
    
    _humReg.osrs_h    = humSampling;
   d4b06:	f366 1347 	bfi	r3, r6, #5, #3
   d4b0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _configReg.filter = filter;
   d4b0e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   d4b12:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4b16:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4b18:	f367 0302 	bfi	r3, r7, #0, #3
   d4b1c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4b20:	f006 0207 	and.w	r2, r6, #7
   d4b24:	21f2      	movs	r1, #242	; 0xf2
   d4b26:	f7ff ff87 	bl	d4a38 <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   d4b2a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4b2e:	f002 0107 	and.w	r1, r2, #7
   d4b32:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d4b36:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4b3a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4b3e:	4620      	mov	r0, r4
   d4b40:	21f5      	movs	r1, #245	; 0xf5
   d4b42:	f7ff ff79 	bl	d4a38 <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   d4b46:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4b4a:	f002 0107 	and.w	r1, r2, #7
   d4b4e:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d4b52:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4b56:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	21f4      	movs	r1, #244	; 0xf4
}
   d4b5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4b62:	f7ff bf69 	b.w	d4a38 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4b68 <_ZN15Adafruit_BME2805read8Eh>:
/*!
    @brief  Read an 8 bit value over I2C or SPI
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg)
{
   d4b68:	b538      	push	{r3, r4, r5, lr}
    uint8_t value;


    if (_cs == -1) {
   d4b6a:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d4b6e:	3301      	adds	r3, #1
/*!
    @brief  Read an 8 bit value over I2C or SPI
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg)
{
   d4b70:	4604      	mov	r4, r0
   d4b72:	460d      	mov	r5, r1
    uint8_t value;


    if (_cs == -1) {
   d4b74:	d11f      	bne.n	d4bb6 <_ZN15Adafruit_BME2805read8Eh+0x4e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4b76:	f001 ff97 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4b7a:	7821      	ldrb	r1, [r4, #0]
   d4b7c:	f001 fd78 	bl	d6670 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4b80:	f001 ff92 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4b84:	6803      	ldr	r3, [r0, #0]
   d4b86:	4629      	mov	r1, r5
   d4b88:	689b      	ldr	r3, [r3, #8]
   d4b8a:	4798      	blx	r3
    Wire.endTransmission();
   d4b8c:	f001 ff8c 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4b90:	f001 fd79 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   d4b94:	f001 ff88 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4b98:	2201      	movs	r2, #1
   d4b9a:	7821      	ldrb	r1, [r4, #0]
   d4b9c:	f001 fd5b 	bl	d6656 <_ZN7TwoWire11requestFromEhh>
    value = Wire.read();
   d4ba0:	f001 ff82 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4ba4:	6803      	ldr	r3, [r0, #0]
   d4ba6:	695b      	ldr	r3, [r3, #20]
   d4ba8:	4798      	blx	r3
   d4baa:	b2c5      	uxtb	r5, r0
    Wire.endTransmission();
   d4bac:	f001 ff7c 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4bb0:	f001 fd69 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
   d4bb4:	e02f      	b.n	d4c16 <_ZN15Adafruit_BME2805read8Eh+0xae>
  } else {
    if (_sck == -1) {
   d4bb6:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d4bba:	3301      	adds	r3, #1
   d4bbc:	d10e      	bne.n	d4bdc <_ZN15Adafruit_BME2805read8Eh+0x74>
      SPI.begin();
   d4bbe:	4817      	ldr	r0, [pc, #92]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d4bc0:	f000 fe70 	bl	d58a4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d4bc4:	2128      	movs	r1, #40	; 0x28
   d4bc6:	4815      	ldr	r0, [pc, #84]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d4bc8:	f000 feca 	bl	d5960 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d4bcc:	2101      	movs	r1, #1
   d4bce:	4813      	ldr	r0, [pc, #76]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d4bd0:	f000 fe7a 	bl	d58c8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d4bd4:	2100      	movs	r1, #0
   d4bd6:	4811      	ldr	r0, [pc, #68]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d4bd8:	f000 fe79 	bl	d58ce <_ZN8SPIClass11setDataModeEh>
      // SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d4bdc:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d4be0:	2100      	movs	r1, #0
   d4be2:	b280      	uxth	r0, r0
   d4be4:	f001 feb7 	bl	d6956 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4be8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4bec:	4620      	mov	r0, r4
   d4bee:	f7ff feeb 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
   d4bf2:	2100      	movs	r1, #0
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	f7ff fee7 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
   d4bfa:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4bfc:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d4c00:	2101      	movs	r1, #1
   d4c02:	b280      	uxth	r0, r0
   d4c04:	f001 fea7 	bl	d6956 <digitalWrite>
    if (_sck == -1) {
   d4c08:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d4c0c:	3301      	adds	r3, #1
   d4c0e:	d102      	bne.n	d4c16 <_ZN15Adafruit_BME2805read8Eh+0xae>
      SPI.end();
   d4c10:	4802      	ldr	r0, [pc, #8]	; (d4c1c <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d4c12:	f000 fe4c 	bl	d58ae <_ZN8SPIClass3endEv>
      // SPI.endTransaction();              // release the SPI bus
    }
  }
  return value;
}
   d4c16:	4628      	mov	r0, r5
   d4c18:	bd38      	pop	{r3, r4, r5, pc}
   d4c1a:	bf00      	nop
   d4c1c:	2003e6f4 	.word	0x2003e6f4

000d4c20 <_ZN15Adafruit_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C or SPI
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4c20:	b538      	push	{r3, r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
   d4c22:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d4c26:	3301      	adds	r3, #1
/*!
    @brief  Reads a 16 bit value over I2C or SPI
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4c28:	4605      	mov	r5, r0
   d4c2a:	460c      	mov	r4, r1
  uint16_t value;

  if (_cs == -1) {
   d4c2c:	d127      	bne.n	d4c7e <_ZN15Adafruit_BME2806read16Eh+0x5e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4c2e:	f001 ff3b 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c32:	7829      	ldrb	r1, [r5, #0]
   d4c34:	f001 fd1c 	bl	d6670 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4c38:	f001 ff36 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c3c:	6803      	ldr	r3, [r0, #0]
   d4c3e:	4621      	mov	r1, r4
   d4c40:	689b      	ldr	r3, [r3, #8]
   d4c42:	4798      	blx	r3
    Wire.endTransmission();
   d4c44:	f001 ff30 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c48:	f001 fd1d 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   d4c4c:	f001 ff2c 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c50:	2202      	movs	r2, #2
   d4c52:	7829      	ldrb	r1, [r5, #0]
   d4c54:	f001 fcff 	bl	d6656 <_ZN7TwoWire11requestFromEhh>
    value = (Wire.read() << 8) | Wire.read();
   d4c58:	f001 ff26 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c5c:	6803      	ldr	r3, [r0, #0]
   d4c5e:	695b      	ldr	r3, [r3, #20]
   d4c60:	4798      	blx	r3
   d4c62:	4604      	mov	r4, r0
   d4c64:	f001 ff20 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c68:	6803      	ldr	r3, [r0, #0]
   d4c6a:	695b      	ldr	r3, [r3, #20]
   d4c6c:	4798      	blx	r3
   d4c6e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4c72:	b284      	uxth	r4, r0
    Wire.endTransmission();
   d4c74:	f001 ff18 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4c78:	f001 fd05 	bl	d6686 <_ZN7TwoWire15endTransmissionEv>
   d4c7c:	e036      	b.n	d4cec <_ZN15Adafruit_BME2806read16Eh+0xcc>
  } else {
    if (_sck == -1) {
   d4c7e:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d4c82:	3301      	adds	r3, #1
   d4c84:	d10e      	bne.n	d4ca4 <_ZN15Adafruit_BME2806read16Eh+0x84>
      SPI.begin();
   d4c86:	481a      	ldr	r0, [pc, #104]	; (d4cf0 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d4c88:	f000 fe0c 	bl	d58a4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d4c8c:	2128      	movs	r1, #40	; 0x28
   d4c8e:	4818      	ldr	r0, [pc, #96]	; (d4cf0 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d4c90:	f000 fe66 	bl	d5960 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d4c94:	2101      	movs	r1, #1
   d4c96:	4816      	ldr	r0, [pc, #88]	; (d4cf0 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d4c98:	f000 fe16 	bl	d58c8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d4c9c:	2100      	movs	r1, #0
   d4c9e:	4814      	ldr	r0, [pc, #80]	; (d4cf0 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d4ca0:	f000 fe15 	bl	d58ce <_ZN8SPIClass11setDataModeEh>
      // SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d4ca4:	f995 000c 	ldrsb.w	r0, [r5, #12]
   d4ca8:	2100      	movs	r1, #0
   d4caa:	b280      	uxth	r0, r0
   d4cac:	f001 fe53 	bl	d6956 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4cb0:	f044 0180 	orr.w	r1, r4, #128	; 0x80
   d4cb4:	4628      	mov	r0, r5
   d4cb6:	f7ff fe87 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   d4cba:	2100      	movs	r1, #0
   d4cbc:	4628      	mov	r0, r5
   d4cbe:	f7ff fe83 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
   d4cc2:	2100      	movs	r1, #0
   d4cc4:	4604      	mov	r4, r0
   d4cc6:	4628      	mov	r0, r5
   d4cc8:	f7ff fe7e 	bl	d49c8 <_ZN15Adafruit_BME2807spixferEh>
   d4ccc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4cd0:	b284      	uxth	r4, r0
    digitalWrite(_cs, HIGH);
   d4cd2:	f995 000c 	ldrsb.w	r0, [r5, #12]
   d4cd6:	2101      	movs	r1, #1
   d4cd8:	b280      	uxth	r0, r0
   d4cda:	f001 fe3c 	bl	d6956 <digitalWrite>
    if (_sck == -1) {
   d4cde:	f995 300f 	ldrsb.w	r3, [r5, #15]
   d4ce2:	3301      	adds	r3, #1
   d4ce4:	d102      	bne.n	d4cec <_ZN15Adafruit_BME2806read16Eh+0xcc>
      SPI.end();
   d4ce6:	4802      	ldr	r0, [pc, #8]	; (d4cf0 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d4ce8:	f000 fde1 	bl	d58ae <_ZN8SPIClass3endEv>
      // SPI.endTransaction();              // release the SPI bus
    }
  }
  return value;
}
   d4cec:	4620      	mov	r0, r4
   d4cee:	bd38      	pop	{r3, r4, r5, pc}
   d4cf0:	2003e6f4 	.word	0x2003e6f4

000d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>:
/**************************************************************************/
/*!
    
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4cf4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4cf6:	f7ff ff93 	bl	d4c20 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4cfa:	ba40      	rev16	r0, r0
}
   d4cfc:	b280      	uxth	r0, r0
   d4cfe:	bd08      	pop	{r3, pc}

000d4d00 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4d00:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4d02:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4d04:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4d06:	f7ff fff5 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d0a:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4d0c:	8220      	strh	r0, [r4, #16]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f7ff fff0 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d14:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4d16:	8260      	strh	r0, [r4, #18]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f7ff ffeb 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4d1e:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4d20:	82a0      	strh	r0, [r4, #20]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4d22:	4620      	mov	r0, r4
   d4d24:	f7ff ffe6 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d28:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4d2a:	82e0      	strh	r0, [r4, #22]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f7ff ffe1 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d32:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4d34:	8320      	strh	r0, [r4, #24]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d36:	4620      	mov	r0, r4
   d4d38:	f7ff ffdc 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d3c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4d3e:	8360      	strh	r0, [r4, #26]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d40:	4620      	mov	r0, r4
   d4d42:	f7ff ffd7 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d46:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4d48:	83a0      	strh	r0, [r4, #28]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ffd2 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d50:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4d52:	83e0      	strh	r0, [r4, #30]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d54:	4620      	mov	r0, r4
   d4d56:	f7ff ffcd 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d5a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4d5c:	8420      	strh	r0, [r4, #32]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d5e:	4620      	mov	r0, r4
   d4d60:	f7ff ffc8 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d64:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4d66:	8460      	strh	r0, [r4, #34]	; 0x22
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d68:	4620      	mov	r0, r4
   d4d6a:	f7ff ffc3 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d6e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4d70:	84a0      	strh	r0, [r4, #36]	; 0x24
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d72:	4620      	mov	r0, r4
   d4d74:	f7ff ffbe 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d78:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4d7a:	84e0      	strh	r0, [r4, #38]	; 0x26

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff fef3 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d82:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d84:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d88:	4620      	mov	r0, r4
   d4d8a:	f7ff ffb3 	bl	d4cf4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d8e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4d90:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff fee8 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d98:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d9a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d9e:	4620      	mov	r0, r4
   d4da0:	f7ff fee2 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4da4:	21e5      	movs	r1, #229	; 0xe5
   d4da6:	4605      	mov	r5, r0
   d4da8:	4620      	mov	r0, r4
   d4daa:	f7ff fedd 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4dae:	f000 000f 	and.w	r0, r0, #15
   d4db2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4db6:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4db8:	21e6      	movs	r1, #230	; 0xe6
   d4dba:	4620      	mov	r0, r4
   d4dbc:	f7ff fed4 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4dc0:	21e5      	movs	r1, #229	; 0xe5
   d4dc2:	4605      	mov	r5, r0
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	f7ff fecf 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4dca:	1100      	asrs	r0, r0, #4
   d4dcc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4dd0:	8620      	strh	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4dd2:	21e7      	movs	r1, #231	; 0xe7
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	f7ff fec7 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4dda:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
   d4dde:	bd38      	pop	{r3, r4, r5, pc}

000d4de0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
    @brief return true if chip is busy reading cal data
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4de0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4de2:	21f3      	movs	r1, #243	; 0xf3
   d4de4:	f7ff fec0 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4de8:	f000 0001 	and.w	r0, r0, #1
   d4dec:	bd08      	pop	{r3, pc}
	...

000d4df0 <_ZN15Adafruit_BME2805beginEh>:
/*!
    @brief  Initialise sensor with given parameters / settings
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t           addr)
{
   d4df0:	b530      	push	{r4, r5, lr}
   d4df2:	4604      	mov	r4, r0
    _i2caddr = addr;
   d4df4:	7001      	strb	r1, [r0, #0]

    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4df6:	f990 000c 	ldrsb.w	r0, [r0, #12]
   d4dfa:	1c42      	adds	r2, r0, #1
/*!
    @brief  Initialise sensor with given parameters / settings
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t           addr)
{
   d4dfc:	b085      	sub	sp, #20
    _i2caddr = addr;

    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4dfe:	d104      	bne.n	d4e0a <_ZN15Adafruit_BME2805beginEh+0x1a>
        // I2C
        Wire.begin();
   d4e00:	f001 fe52 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d4e04:	f001 fc18 	bl	d6638 <_ZN7TwoWire5beginEv>
   d4e08:	e021      	b.n	d4e4e <_ZN15Adafruit_BME2805beginEh+0x5e>
    } else {
        digitalWrite(_cs, HIGH);
   d4e0a:	2101      	movs	r1, #1
   d4e0c:	b280      	uxth	r0, r0
   d4e0e:	f001 fda2 	bl	d6956 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4e12:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d4e16:	2101      	movs	r1, #1
   d4e18:	b280      	uxth	r0, r0
   d4e1a:	f001 fd8b 	bl	d6934 <pinMode>
        if (_sck == -1) {
   d4e1e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d4e22:	1c43      	adds	r3, r0, #1
   d4e24:	d103      	bne.n	d4e2e <_ZN15Adafruit_BME2805beginEh+0x3e>
            // hardware SPI
            SPI.begin();
   d4e26:	481d      	ldr	r0, [pc, #116]	; (d4e9c <_ZN15Adafruit_BME2805beginEh+0xac>)
   d4e28:	f000 fd3c 	bl	d58a4 <_ZN8SPIClass5beginEv>
   d4e2c:	e00f      	b.n	d4e4e <_ZN15Adafruit_BME2805beginEh+0x5e>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4e2e:	2101      	movs	r1, #1
   d4e30:	b280      	uxth	r0, r0
   d4e32:	f001 fd7f 	bl	d6934 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4e36:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d4e3a:	2101      	movs	r1, #1
   d4e3c:	b280      	uxth	r0, r0
   d4e3e:	f001 fd79 	bl	d6934 <pinMode>
            pinMode(_miso, INPUT);
   d4e42:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d4e46:	2100      	movs	r1, #0
   d4e48:	b280      	uxth	r0, r0
   d4e4a:	f001 fd73 	bl	d6934 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   d4e4e:	21d0      	movs	r1, #208	; 0xd0
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff fe89 	bl	d4b68 <_ZN15Adafruit_BME2805read8Eh>
   d4e56:	2860      	cmp	r0, #96	; 0x60
   d4e58:	d11d      	bne.n	d4e96 <_ZN15Adafruit_BME2805beginEh+0xa6>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	22b6      	movs	r2, #182	; 0xb6
   d4e5e:	21e0      	movs	r1, #224	; 0xe0
   d4e60:	f7ff fdea 	bl	d4a38 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4e64:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4e68:	f001 f878 	bl	d5f5c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	f7ff ffb7 	bl	d4de0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4e72:	4605      	mov	r5, r0
   d4e74:	b108      	cbz	r0, d4e7a <_ZN15Adafruit_BME2805beginEh+0x8a>
          delay(100);
   d4e76:	2064      	movs	r0, #100	; 0x64
   d4e78:	e7f6      	b.n	d4e68 <_ZN15Adafruit_BME2805beginEh+0x78>


    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff ff40 	bl	d4d00 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4e80:	2305      	movs	r3, #5
   d4e82:	4620      	mov	r0, r4
   d4e84:	9502      	str	r5, [sp, #8]
   d4e86:	9501      	str	r5, [sp, #4]
   d4e88:	9300      	str	r3, [sp, #0]
   d4e8a:	461a      	mov	r2, r3
   d4e8c:	2103      	movs	r1, #3
   d4e8e:	f7ff fe27 	bl	d4ae0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    return true;
   d4e92:	2001      	movs	r0, #1
   d4e94:	e000      	b.n	d4e98 <_ZN15Adafruit_BME2805beginEh+0xa8>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
        return false;
   d4e96:	2000      	movs	r0, #0
    readCoefficients(); // read trimming parameters, see DS 4.2.2

    setSampling(); // use defaults

    return true;
}
   d4e98:	b005      	add	sp, #20
   d4e9a:	bd30      	pop	{r4, r5, pc}
   d4e9c:	2003e6f4 	.word	0x2003e6f4

000d4ea0 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4ea0:	f000 b944 	b.w	d512c <HAL_Pin_Map>

000d4ea4 <_ZN13LaCrosse_TX23C1Ei>:
  BSD license, all text above must be included in any redistribution
*************************************************************************************************/

#include <LaCrosse_TX23.h>

LaCrosse_TX23::LaCrosse_TX23(int pin)
   d4ea4:	b538      	push	{r3, r4, r5, lr}
   d4ea6:	4604      	mov	r4, r0
   d4ea8:	460d      	mov	r5, r1
{
pinMode(pin, INPUT);
   d4eaa:	b2a8      	uxth	r0, r5
   d4eac:	2100      	movs	r1, #0
   d4eae:	f001 fd41 	bl	d6934 <pinMode>
_pin = pin;
   d4eb2:	6025      	str	r5, [r4, #0]
}
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bd38      	pop	{r3, r4, r5, pc}

000d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>:

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
   d4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d4eba:	2400      	movs	r4, #0
	{
		d[i/8] |= src[i]<<(i%8);
   d4ebc:	2708      	movs	r7, #8
}

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d4ebe:	4294      	cmp	r4, r2
   d4ec0:	da12      	bge.n	d4ee8 <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x30>
	{
		d[i/8] |= src[i]<<(i%8);
   d4ec2:	fb94 f6f7 	sdiv	r6, r4, r7
   d4ec6:	4b09      	ldr	r3, [pc, #36]	; (d4eec <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x34>)
   d4ec8:	5d0d      	ldrb	r5, [r1, r4]
   d4eca:	4023      	ands	r3, r4
   d4ecc:	2b00      	cmp	r3, #0
   d4ece:	bfbe      	ittt	lt
   d4ed0:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4ed4:	f063 0307 	ornlt	r3, r3, #7
   d4ed8:	3301      	addlt	r3, #1
   d4eda:	fa05 f303 	lsl.w	r3, r5, r3
   d4ede:	5d85      	ldrb	r5, [r0, r6]
   d4ee0:	432b      	orrs	r3, r5
   d4ee2:	5583      	strb	r3, [r0, r6]
}

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d4ee4:	3401      	adds	r4, #1
   d4ee6:	e7ea      	b.n	d4ebe <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x6>
   d4ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4eea:	bf00      	nop
   d4eec:	80000007 	.word	0x80000007

000d4ef0 <_ZN13LaCrosse_TX234readERfRi>:
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d4ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	speed = 0;
   d4ef4:	2300      	movs	r3, #0
	direction = 0;
   d4ef6:	2400      	movs	r4, #0
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
	speed = 0;
   d4ef8:	600b      	str	r3, [r1, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d4efa:	4680      	mov	r8, r0
	speed = 0;
	direction = 0;
   d4efc:	6014      	str	r4, [r2, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d4efe:	b093      	sub	sp, #76	; 0x4c
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d4f00:	8800      	ldrh	r0, [r0, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d4f02:	460e      	mov	r6, r1
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d4f04:	4621      	mov	r1, r4
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d4f06:	4615      	mov	r5, r2
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d4f08:	f001 fd25 	bl	d6956 <digitalWrite>
	pinMode(_pin,OUTPUT);
   d4f0c:	2101      	movs	r1, #1
   d4f0e:	f8b8 0000 	ldrh.w	r0, [r8]
   d4f12:	f001 fd0f 	bl	d6934 <pinMode>
	delay(500);
   d4f16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4f1a:	f001 f81f 	bl	d5f5c <delay>
	pinMode(_pin,INPUT);
   d4f1e:	4621      	mov	r1, r4
   d4f20:	f8b8 0000 	ldrh.w	r0, [r8]
   d4f24:	f001 fd06 	bl	d6934 <pinMode>
	pulseIn(_pin,LOW);
   d4f28:	4621      	mov	r1, r4
   d4f2a:	f8b8 0000 	ldrh.w	r0, [r8]
   d4f2e:	f001 fd3e 	bl	d69ae <pulseIn>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4f32:	f000 f98b 	bl	d524c <HAL_Timer_Get_Micro_Seconds>
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d4f36:	f44f 6996 	mov.w	r9, #1200	; 0x4b0
   d4f3a:	4607      	mov	r7, r0
	pulseIn(_pin,LOW);

	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
   d4f3c:	2201      	movs	r2, #1
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d4f3e:	f24c 3a4f 	movw	sl, #49999	; 0xc34f
	{
		bool state = digitalRead(_pin);
   d4f42:	f8b8 0000 	ldrh.w	r0, [r8]
   d4f46:	9201      	str	r2, [sp, #4]
   d4f48:	f001 fd1e 	bl	d6988 <digitalRead>
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d4f4c:	fbb4 f3f9 	udiv	r3, r4, r9
	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
   d4f50:	f110 0b00 	adds.w	fp, r0, #0
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d4f54:	fb09 4413 	mls	r4, r9, r3, r4
	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
   d4f58:	bf18      	it	ne
   d4f5a:	f04f 0b01 	movne.w	fp, #1
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d4f5e:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
   d4f62:	bf84      	itt	hi
   d4f64:	a912      	addhi	r1, sp, #72	; 0x48
   d4f66:	185b      	addhi	r3, r3, r1
   d4f68:	9a01      	ldr	r2, [sp, #4]
   d4f6a:	bf88      	it	hi
   d4f6c:	f803 bc34 	strbhi.w	fp, [r3, #-52]
		if(state!=lastState)
   d4f70:	4593      	cmp	fp, r2
   d4f72:	d007      	beq.n	d4f84 <_ZN13LaCrosse_TX234readERfRi+0x94>
		{
			unsigned delta = t%bitLen;
			if(delta<100)
   d4f74:	2c63      	cmp	r4, #99	; 0x63
   d4f76:	d801      	bhi.n	d4f7c <_ZN13LaCrosse_TX234readERfRi+0x8c>
				start -= delta;
   d4f78:	1b3f      	subs	r7, r7, r4
   d4f7a:	e003      	b.n	d4f84 <_ZN13LaCrosse_TX234readERfRi+0x94>
			else if(delta>900)
   d4f7c:	f5b4 7f61 	cmp.w	r4, #900	; 0x384
				start += delta;
   d4f80:	bf88      	it	hi
   d4f82:	193f      	addhi	r7, r7, r4
   d4f84:	f000 f962 	bl	d524c <HAL_Timer_Get_Micro_Seconds>
	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d4f88:	1bc4      	subs	r4, r0, r7
   d4f8a:	4554      	cmp	r4, sl
	{
		bool state = digitalRead(_pin);
   d4f8c:	465a      	mov	r2, fp
	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d4f8e:	d9d8      	bls.n	d4f42 <_ZN13LaCrosse_TX234readERfRi+0x52>
				start += delta;
			lastState = state;
		}
	}

	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
   d4f90:	2400      	movs	r4, #0
   d4f92:	2205      	movs	r2, #5
   d4f94:	a905      	add	r1, sp, #20
   d4f96:	a803      	add	r0, sp, #12
   d4f98:	f88d 400c 	strb.w	r4, [sp, #12]
   d4f9c:	f7ff ff8c 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t dir = 0; pullBits(&dir,data+5,4);
   d4fa0:	2204      	movs	r2, #4
   d4fa2:	f10d 0119 	add.w	r1, sp, #25
   d4fa6:	f10d 000d 	add.w	r0, sp, #13
   d4faa:	f88d 400d 	strb.w	r4, [sp, #13]
   d4fae:	f7ff ff83 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint16_t spd = 0; pullBits(&spd,data+9,12);
   d4fb2:	220c      	movs	r2, #12
   d4fb4:	f10d 011d 	add.w	r1, sp, #29
   d4fb8:	a804      	add	r0, sp, #16
   d4fba:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4fbe:	f7ff ff7b 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t sum = 0; pullBits(&sum,data+21,4);
   d4fc2:	2204      	movs	r2, #4
   d4fc4:	f10d 0129 	add.w	r1, sp, #41	; 0x29
   d4fc8:	f10d 000e 	add.w	r0, sp, #14
   d4fcc:	f88d 400e 	strb.w	r4, [sp, #14]
   d4fd0:	f7ff ff72 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
   d4fd4:	2204      	movs	r2, #4
   d4fd6:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   d4fda:	f10d 000f 	add.w	r0, sp, #15
   d4fde:	f88d 400f 	strb.w	r4, [sp, #15]
   d4fe2:	f7ff ff69 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	ndir ^= 0x0f;
   d4fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d4fea:	f8ad 4012 	strh.w	r4, [sp, #18]
	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
	uint8_t dir = 0; pullBits(&dir,data+5,4);
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
   d4fee:	f083 030f 	eor.w	r3, r3, #15
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d4ff2:	f10d 0012 	add.w	r0, sp, #18
   d4ff6:	220c      	movs	r2, #12
   d4ff8:	f10d 0131 	add.w	r1, sp, #49	; 0x31
	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
	uint8_t dir = 0; pullBits(&dir,data+5,4);
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
   d4ffc:	f88d 300f 	strb.w	r3, [sp, #15]
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d5000:	f7ff ff5a 	bl	d4eb8 <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	nspd ^= 0x0fff;
   d5004:	f8bd 0012 	ldrh.w	r0, [sp, #18]

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5008:	f89d 300c 	ldrb.w	r3, [sp, #12]
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;
   d500c:	f480 607f 	eor.w	r0, r0, #4080	; 0xff0

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5010:	2b1b      	cmp	r3, #27
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;
   d5012:	f080 000f 	eor.w	r0, r0, #15

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5016:	d122      	bne.n	d505e <_ZN13LaCrosse_TX234readERfRi+0x16e>
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));
   d5018:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   d501c:	f89d 100d 	ldrb.w	r1, [sp, #13]

	if(ctr!=27) return false;
	if(csum!=sum) return false;
   d5020:	f89d 700e 	ldrb.w	r7, [sp, #14]
   d5024:	f002 030f 	and.w	r3, r2, #15
   d5028:	440b      	add	r3, r1
   d502a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
   d502e:	eb03 1312 	add.w	r3, r3, r2, lsr #4
   d5032:	f003 030f 	and.w	r3, r3, #15
   d5036:	429f      	cmp	r7, r3
   d5038:	d111      	bne.n	d505e <_ZN13LaCrosse_TX234readERfRi+0x16e>
	if(spd!=nspd || dir!=ndir) return false;
   d503a:	4290      	cmp	r0, r2
   d503c:	d10f      	bne.n	d505e <_ZN13LaCrosse_TX234readERfRi+0x16e>
   d503e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   d5042:	428f      	cmp	r7, r1
   d5044:	d10b      	bne.n	d505e <_ZN13LaCrosse_TX234readERfRi+0x16e>

	speed = spd/10.0;
   d5046:	f002 f811 	bl	d706c <__aeabi_i2d>
   d504a:	2200      	movs	r2, #0
   d504c:	4b06      	ldr	r3, [pc, #24]	; (d5068 <_ZN13LaCrosse_TX234readERfRi+0x178>)
   d504e:	f002 f99d 	bl	d738c <__aeabi_ddiv>
   d5052:	f002 fb69 	bl	d7728 <__aeabi_d2f>
   d5056:	6030      	str	r0, [r6, #0]
	direction = dir;
   d5058:	602f      	str	r7, [r5, #0]

	return true;
   d505a:	2001      	movs	r0, #1
   d505c:	e000      	b.n	d5060 <_ZN13LaCrosse_TX234readERfRi+0x170>
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d505e:	4620      	mov	r0, r4

	speed = spd/10.0;
	direction = dir;

	return true;
   d5060:	b013      	add	sp, #76	; 0x4c
   d5062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5066:	bf00      	nop
   d5068:	40240000 	.word	0x40240000

000d506c <_GLOBAL__sub_I__ZN13LaCrosse_TX23C2Ei>:
   d506c:	f000 b85e 	b.w	d512c <HAL_Pin_Map>

000d5070 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d5070:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5072:	6803      	ldr	r3, [r0, #0]
   d5074:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d5076:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5078:	d904      	bls.n	d5084 <nrf_gpio_pin_port_decode+0x14>
   d507a:	4a07      	ldr	r2, [pc, #28]	; (d5098 <nrf_gpio_pin_port_decode+0x28>)
   d507c:	2100      	movs	r1, #0
   d507e:	200a      	movs	r0, #10
   d5080:	f000 fa6c 	bl	d555c <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d5084:	6823      	ldr	r3, [r4, #0]
   d5086:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5088:	bf83      	ittte	hi
   d508a:	f003 031f 	andhi.w	r3, r3, #31
   d508e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d5090:	4802      	ldrhi	r0, [pc, #8]	; (d509c <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5092:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d5096:	bd10      	pop	{r4, pc}
   d5098:	000d523d 	.word	0x000d523d
   d509c:	50000300 	.word	0x50000300

000d50a0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d50a0:	b507      	push	{r0, r1, r2, lr}
   d50a2:	ab02      	add	r3, sp, #8
   d50a4:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d50a8:	4618      	mov	r0, r3
   d50aa:	f7ff ffe1 	bl	d5070 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d50ae:	9a01      	ldr	r2, [sp, #4]
   d50b0:	2301      	movs	r3, #1
   d50b2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d50b4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d50b8:	b003      	add	sp, #12
   d50ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d50be <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d50be:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d50c0:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d50c2:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
   d50c4:	7181      	strb	r1, [r0, #6]
	_type = type;
   d50c6:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
   d50c8:	7403      	strb	r3, [r0, #16]
}
   d50ca:	bd10      	pop	{r4, pc}

000d50cc <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d50cc:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d50ce:	2100      	movs	r1, #0
	_type = type;
	_count = count;
	firstreading = true;
}

void DHT::begin(void) {
   d50d0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d50d2:	7980      	ldrb	r0, [r0, #6]
   d50d4:	f001 fc2e 	bl	d6934 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d50d8:	4a07      	ldr	r2, [pc, #28]	; (d50f8 <_ZN3DHT5beginEv+0x2c>)
   d50da:	79a3      	ldrb	r3, [r4, #6]
   d50dc:	6812      	ldr	r2, [r2, #0]
   d50de:	011b      	lsls	r3, r3, #4
   d50e0:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d50e2:	5cd0      	ldrb	r0, [r2, r3]
   d50e4:	784b      	ldrb	r3, [r1, #1]
   d50e6:	f003 031f 	and.w	r3, r3, #31
   d50ea:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d50ee:	f7ff ffd7 	bl	d50a0 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d50f2:	2300      	movs	r3, #0
   d50f4:	60e3      	str	r3, [r4, #12]
   d50f6:	bd10      	pop	{r4, pc}
   d50f8:	2003e35c 	.word	0x2003e35c

000d50fc <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
		return true;
	}
 
	return false;

}
   d50fc:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d50fe:	f000 f815 	bl	d512c <HAL_Pin_Map>
   d5102:	4b01      	ldr	r3, [pc, #4]	; (d5108 <_GLOBAL__sub_I__ZN3DHTC2Ehhh+0xc>)
   d5104:	6018      	str	r0, [r3, #0]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	2003e35c 	.word	0x2003e35c

000d510c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <netdb_freeaddrinfo+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	689b      	ldr	r3, [r3, #8]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030268 	.word	0x00030268

000d511c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <netdb_getaddrinfo+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	68db      	ldr	r3, [r3, #12]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030268 	.word	0x00030268

000d512c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <HAL_Pin_Map+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	681b      	ldr	r3, [r3, #0]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003022c 	.word	0x0003022c

000d513c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <HAL_Pin_Mode+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	689b      	ldr	r3, [r3, #8]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003022c 	.word	0x0003022c

000d514c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <HAL_Get_Pin_Mode+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	68db      	ldr	r3, [r3, #12]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003022c 	.word	0x0003022c

000d515c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <HAL_GPIO_Write+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	691b      	ldr	r3, [r3, #16]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003022c 	.word	0x0003022c

000d516c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <HAL_GPIO_Read+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	695b      	ldr	r3, [r3, #20]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003022c 	.word	0x0003022c

000d517c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <HAL_Pulse_In+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003022c 	.word	0x0003022c

000d518c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <HAL_SPI_Begin+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	681b      	ldr	r3, [r3, #0]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030230 	.word	0x00030230

000d519c <HAL_SPI_End>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <HAL_SPI_End+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	685b      	ldr	r3, [r3, #4]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030230 	.word	0x00030230

000d51ac <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <HAL_SPI_Set_Bit_Order+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	689b      	ldr	r3, [r3, #8]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030230 	.word	0x00030230

000d51bc <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <HAL_SPI_Set_Data_Mode+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	68db      	ldr	r3, [r3, #12]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030230 	.word	0x00030230

000d51cc <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <HAL_SPI_Set_Clock_Divider+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	691b      	ldr	r3, [r3, #16]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030230 	.word	0x00030230

000d51dc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <HAL_SPI_Send_Receive_Data+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	695b      	ldr	r3, [r3, #20]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030230 	.word	0x00030230

000d51ec <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <HAL_SPI_Init+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	69db      	ldr	r3, [r3, #28]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030230 	.word	0x00030230

000d51fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_SPI_Is_Enabled+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	6a1b      	ldr	r3, [r3, #32]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030230 	.word	0x00030230

000d520c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_SPI_Info+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030230 	.word	0x00030230

000d521c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_RNG_GetRandomNumber+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	685b      	ldr	r3, [r3, #4]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030218 	.word	0x00030218

000d522c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_Delay_Milliseconds+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	689b      	ldr	r3, [r3, #8]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030218 	.word	0x00030218

000d523c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_Delay_Microseconds+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	68db      	ldr	r3, [r3, #12]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030218 	.word	0x00030218

000d524c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	691b      	ldr	r3, [r3, #16]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030218 	.word	0x00030218

000d525c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	695b      	ldr	r3, [r3, #20]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030218 	.word	0x00030218

000d526c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <HAL_EEPROM_Init+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030218 	.word	0x00030218

000d527c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <HAL_EEPROM_Get+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030218 	.word	0x00030218

000d528c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <HAL_EEPROM_Put+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030218 	.word	0x00030218

000d529c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_Core_System_Reset_Ex+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030234 	.word	0x00030234

000d52ac <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <os_thread_create+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	685b      	ldr	r3, [r3, #4]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030248 	.word	0x00030248

000d52bc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <os_thread_is_current+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	689b      	ldr	r3, [r3, #8]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030248 	.word	0x00030248

000d52cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <os_thread_join+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	691b      	ldr	r3, [r3, #16]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030248 	.word	0x00030248

000d52dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <os_thread_cleanup+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	695b      	ldr	r3, [r3, #20]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030248 	.word	0x00030248

000d52ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <os_mutex_create+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030248 	.word	0x00030248

000d52fc <os_mutex_trylock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <os_mutex_trylock+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030248 	.word	0x00030248

000d530c <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <os_mutex_unlock+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030248 	.word	0x00030248

000d531c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <os_mutex_recursive_create+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030248 	.word	0x00030248

000d532c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <os_thread_exit+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030248 	.word	0x00030248

000d533c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <inet_inet_ntop+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	695b      	ldr	r3, [r3, #20]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030264 	.word	0x00030264

000d534c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_USART_Init+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	681b      	ldr	r3, [r3, #0]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003023c 	.word	0x0003023c

000d535c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_USART_Write_Data+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	68db      	ldr	r3, [r3, #12]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003023c 	.word	0x0003023c

000d536c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_USART_Available_Data+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	691b      	ldr	r3, [r3, #16]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003023c 	.word	0x0003023c

000d537c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_USART_Read_Data+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	695b      	ldr	r3, [r3, #20]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003023c 	.word	0x0003023c

000d538c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_USART_Peek_Data+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	699b      	ldr	r3, [r3, #24]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003023c 	.word	0x0003023c

000d539c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <HAL_USART_Flush_Data+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	69db      	ldr	r3, [r3, #28]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003023c 	.word	0x0003023c

000d53ac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <HAL_USART_Is_Enabled+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6a1b      	ldr	r3, [r3, #32]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003023c 	.word	0x0003023c

000d53bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <HAL_USART_Available_Data_For_Write+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	0003023c 	.word	0x0003023c

000d53cc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <HAL_I2C_Begin+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	68db      	ldr	r3, [r3, #12]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030228 	.word	0x00030228

000d53dc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <HAL_I2C_Request_Data+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	695b      	ldr	r3, [r3, #20]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030228 	.word	0x00030228

000d53ec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <HAL_I2C_Begin_Transmission+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	699b      	ldr	r3, [r3, #24]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030228 	.word	0x00030228

000d53fc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <HAL_I2C_End_Transmission+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	69db      	ldr	r3, [r3, #28]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030228 	.word	0x00030228

000d540c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <HAL_I2C_Write_Data+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6a1b      	ldr	r3, [r3, #32]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030228 	.word	0x00030228

000d541c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <HAL_I2C_Available_Data+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030228 	.word	0x00030228

000d542c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <HAL_I2C_Read_Data+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030228 	.word	0x00030228

000d543c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <HAL_I2C_Peek_Data+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030228 	.word	0x00030228

000d544c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <HAL_I2C_Flush_Data+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030228 	.word	0x00030228

000d545c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_I2C_Is_Enabled+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030228 	.word	0x00030228

000d546c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_I2C_Init+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030228 	.word	0x00030228

000d547c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_I2C_Acquire+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030228 	.word	0x00030228

000d548c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_I2C_Release+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030228 	.word	0x00030228

000d549c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_USB_USART_Init+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	681b      	ldr	r3, [r3, #0]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003024c 	.word	0x0003024c

000d54ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_USB_USART_Begin+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	685b      	ldr	r3, [r3, #4]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003024c 	.word	0x0003024c

000d54bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_USB_USART_Available_Data+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	691b      	ldr	r3, [r3, #16]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003024c 	.word	0x0003024c

000d54cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	695b      	ldr	r3, [r3, #20]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003024c 	.word	0x0003024c

000d54dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_USB_USART_Receive_Data+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	699b      	ldr	r3, [r3, #24]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003024c 	.word	0x0003024c

000d54ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_USB_USART_Send_Data+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	69db      	ldr	r3, [r3, #28]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003024c 	.word	0x0003024c

000d54fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_USB_USART_Flush_Data+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6a1b      	ldr	r3, [r3, #32]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003024c 	.word	0x0003024c

000d550c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <LED_SetSignalingColor+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	685b      	ldr	r3, [r3, #4]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030260 	.word	0x00030260

000d551c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <LED_Signaling_Start+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	689b      	ldr	r3, [r3, #8]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030260 	.word	0x00030260

000d552c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <LED_Signaling_Stop+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	68db      	ldr	r3, [r3, #12]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030260 	.word	0x00030260

000d553c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <LED_RGB_IsOverRidden+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	699b      	ldr	r3, [r3, #24]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030260 	.word	0x00030260

000d554c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <LED_On+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	69db      	ldr	r3, [r3, #28]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030260 	.word	0x00030260

000d555c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <panic_+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030260 	.word	0x00030260

000d556c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <set_system_mode+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	685b      	ldr	r3, [r3, #4]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030220 	.word	0x00030220

000d557c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <system_delay_ms+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	695b      	ldr	r3, [r3, #20]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030220 	.word	0x00030220

000d558c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <system_sleep+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	699b      	ldr	r3, [r3, #24]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030220 	.word	0x00030220

000d559c <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <system_version_info+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030220 	.word	0x00030220

000d55ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b03      	ldr	r3, [pc, #12]	; (d55bc <system_ctrl_set_app_request_handler+0x10>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55b6:	9301      	str	r3, [sp, #4]
   d55b8:	bd08      	pop	{r3, pc}
   d55ba:	0000      	.short	0x0000
   d55bc:	00030220 	.word	0x00030220

000d55c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b03      	ldr	r3, [pc, #12]	; (d55d0 <system_ctrl_set_result+0x10>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55ca:	9301      	str	r3, [sp, #4]
   d55cc:	bd08      	pop	{r3, pc}
   d55ce:	0000      	.short	0x0000
   d55d0:	00030220 	.word	0x00030220

000d55d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <network_connect+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	685b      	ldr	r3, [r3, #4]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030240 	.word	0x00030240

000d55e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <network_connecting+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	689b      	ldr	r3, [r3, #8]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030240 	.word	0x00030240

000d55f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <network_disconnect+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	68db      	ldr	r3, [r3, #12]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030240 	.word	0x00030240

000d5604 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <network_ready+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	691b      	ldr	r3, [r3, #16]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030240 	.word	0x00030240

000d5614 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <network_on+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	695b      	ldr	r3, [r3, #20]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030240 	.word	0x00030240

000d5624 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <network_off+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	699b      	ldr	r3, [r3, #24]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030240 	.word	0x00030240

000d5634 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <network_listen+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	69db      	ldr	r3, [r3, #28]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030240 	.word	0x00030240

000d5644 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <network_listening+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6a1b      	ldr	r3, [r3, #32]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030240 	.word	0x00030240

000d5654 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_set_listen_timeout+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_get_listen_timeout+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <spark_deviceID+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	69db      	ldr	r3, [r3, #28]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030244 	.word	0x00030244

000d5684 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030244 	.word	0x00030244

000d5694 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <malloc+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	681b      	ldr	r3, [r3, #0]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003021c 	.word	0x0003021c

000d56a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <free+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	685b      	ldr	r3, [r3, #4]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003021c 	.word	0x0003021c

000d56b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <realloc+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	689b      	ldr	r3, [r3, #8]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003021c 	.word	0x0003021c

000d56c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <vsnprintf+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003021c 	.word	0x0003021c

000d56d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <abort+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003021c 	.word	0x0003021c

000d56e4 <_ZN4PMIC20getInputVoltageLimitEv>:
byte PMIC::getInputVoltageLimit(void) {

    //TODO
    return 1;

}
   d56e4:	2001      	movs	r0, #1
   d56e6:	4770      	bx	lr

000d56e8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d56e8:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d56ea:	f001 f9fd 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d56ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d56f2:	f000 bfcf 	b.w	d6694 <_ZN7TwoWire4lockEv>

000d56f6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d56f6:	b510      	push	{r4, lr}
   d56f8:	4604      	mov	r4, r0
    lock_(_lock)
   d56fa:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d56fc:	b109      	cbz	r1, d5702 <_ZN4PMICC1Eb+0xc>
        lock();
   d56fe:	f7ff fff3 	bl	d56e8 <_ZN4PMIC4lockEv>
    }
}
   d5702:	4620      	mov	r0, r4
   d5704:	bd10      	pop	{r4, pc}

000d5706 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d5706:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5708:	f001 f9ee 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d570c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d5710:	f000 bfc9 	b.w	d66a6 <_ZN7TwoWire6unlockEv>

000d5714 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d5714:	b510      	push	{r4, lr}
{
    if (lock_) {
   d5716:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d5718:	4604      	mov	r4, r0
{
    if (lock_) {
   d571a:	b10b      	cbz	r3, d5720 <_ZN4PMICD1Ev+0xc>
        unlock();
   d571c:	f7ff fff3 	bl	d5706 <_ZN4PMIC6unlockEv>
    }
}
   d5720:	4620      	mov	r0, r4
   d5722:	bd10      	pop	{r4, pc}

000d5724 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5724:	b510      	push	{r4, lr}
   d5726:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5728:	6800      	ldr	r0, [r0, #0]
   d572a:	f7ff ffec 	bl	d5706 <_ZN4PMIC6unlockEv>
   d572e:	4620      	mov	r0, r4
   d5730:	bd10      	pop	{r4, pc}

000d5732 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d5732:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5734:	ac02      	add	r4, sp, #8
   d5736:	460d      	mov	r5, r1
   d5738:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d573c:	f7ff ffd4 	bl	d56e8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5740:	f001 f9d2 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d5744:	216b      	movs	r1, #107	; 0x6b
   d5746:	f000 ff97 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d574a:	f001 f9cd 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d574e:	6803      	ldr	r3, [r0, #0]
   d5750:	4629      	mov	r1, r5
   d5752:	689b      	ldr	r3, [r3, #8]
   d5754:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5756:	f001 f9c7 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d575a:	2101      	movs	r1, #1
   d575c:	f000 ff8f 	bl	d667e <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5760:	f001 f9c2 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d5764:	2301      	movs	r3, #1
   d5766:	461a      	mov	r2, r3
   d5768:	216b      	movs	r1, #107	; 0x6b
   d576a:	f000 ff7c 	bl	d6666 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d576e:	f001 f9bb 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d5772:	6803      	ldr	r3, [r0, #0]
   d5774:	695b      	ldr	r3, [r3, #20]
   d5776:	4798      	blx	r3
   d5778:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d577a:	4620      	mov	r0, r4
   d577c:	f7ff ffd2 	bl	d5724 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d5780:	b2e8      	uxtb	r0, r5
   d5782:	b003      	add	sp, #12
   d5784:	bd30      	pop	{r4, r5, pc}

000d5786 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
   d5786:	2100      	movs	r1, #0
   d5788:	f7ff bfd3 	b.w	d5732 <_ZN4PMIC12readRegisterEh>

000d578c <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
   d578c:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
   d578e:	f7ff fffa 	bl	d5786 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x03;
    return mapping[raw];
}
   d5792:	4b03      	ldr	r3, [pc, #12]	; (d57a0 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x03;
    return mapping[raw];
   d5794:	f000 0003 	and.w	r0, r0, #3
}
   d5798:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d579c:	bd08      	pop	{r3, pc}
   d579e:	bf00      	nop
   d57a0:	000d7adc 	.word	0x000d7adc

000d57a4 <_ZN4PMIC23getMinimumSystemVoltageEv>:
 * Function Name  : getMinimumSystemVoltage
 * Description    : Returns the set minimum system voltage
 * Input          : NONE
 * Return         : The set system voltage in millivolts or 0 if ERROR
*******************************************************************************/
uint16_t PMIC::getMinimumSystemVoltage() {
   d57a4:	b508      	push	{r3, lr}

    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d57a6:	2101      	movs	r1, #1
   d57a8:	f7ff ffc3 	bl	d5732 <_ZN4PMIC12readRegisterEh>

        default:
        return 0; // return error since the value didn't match
    }

}
   d57ac:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <_ZN4PMIC23getMinimumSystemVoltageEv+0x14>)
   d57ae:	f000 000e 	and.w	r0, r0, #14
   d57b2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	000d7aec 	.word	0x000d7aec

000d57bc <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d57bc:	2102      	movs	r1, #2
   d57be:	f7ff bfb8 	b.w	d5732 <_ZN4PMIC12readRegisterEh>

000d57c2 <_ZN4PMIC16getChargeVoltageEv>:
 * Return         :
 *******************************************************************************/

byte PMIC::getChargeVoltage(void) {

    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d57c2:	2104      	movs	r1, #4
   d57c4:	f7ff bfb5 	b.w	d5732 <_ZN4PMIC12readRegisterEh>

000d57c8 <_ZN4PMIC21getChargeVoltageValueEv>:
}

uint16_t PMIC::getChargeVoltageValue() {
   d57c8:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d57ca:	f7ff fffa 	bl	d57c2 <_ZN4PMIC16getChargeVoltageEv>
   d57ce:	2302      	movs	r3, #2
    unsigned baseVoltage = 16;
    unsigned v = 3504;
   d57d0:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
}

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
   d57d4:	2110      	movs	r1, #16
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d57d6:	fa40 f403 	asr.w	r4, r0, r3
   d57da:	3301      	adds	r3, #1
   d57dc:	f004 0401 	and.w	r4, r4, #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d57e0:	2b08      	cmp	r3, #8
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d57e2:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d57e6:	ea4f 0141 	mov.w	r1, r1, lsl #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d57ea:	d1f4      	bne.n	d57d6 <_ZN4PMIC21getChargeVoltageValueEv+0xe>
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
        baseVoltage *= 2;
    }
    return v;
}
   d57ec:	b290      	uxth	r0, r2
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57f0:	2200      	movs	r2, #0
   d57f2:	4611      	mov	r1, r2
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	f7ff bf25 	b.w	d5644 <network_listening>

000d57fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57fa:	2200      	movs	r2, #0
   d57fc:	4611      	mov	r1, r2
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	f7ff bf30 	b.w	d5664 <network_get_listen_timeout>

000d5804 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5804:	2200      	movs	r2, #0
   d5806:	6840      	ldr	r0, [r0, #4]
   d5808:	f7ff bf24 	b.w	d5654 <network_set_listen_timeout>

000d580c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d580c:	2200      	movs	r2, #0
   d580e:	f081 0101 	eor.w	r1, r1, #1
   d5812:	6840      	ldr	r0, [r0, #4]
   d5814:	f7ff bf0e 	b.w	d5634 <network_listen>

000d5818 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5818:	2300      	movs	r3, #0
   d581a:	461a      	mov	r2, r3
   d581c:	4619      	mov	r1, r3
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7ff bf00 	b.w	d5624 <network_off>

000d5824 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5824:	2300      	movs	r3, #0
   d5826:	461a      	mov	r2, r3
   d5828:	4619      	mov	r1, r3
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff bef2 	b.w	d5614 <network_on>

000d5830 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	4611      	mov	r1, r2
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	f7ff bee5 	b.w	d5604 <network_ready>

000d583a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d583a:	2200      	movs	r2, #0
   d583c:	4611      	mov	r1, r2
   d583e:	6840      	ldr	r0, [r0, #4]
   d5840:	f7ff bed0 	b.w	d55e4 <network_connecting>

000d5844 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5844:	2200      	movs	r2, #0
   d5846:	2102      	movs	r1, #2
   d5848:	6840      	ldr	r0, [r0, #4]
   d584a:	f7ff bed3 	b.w	d55f4 <network_disconnect>

000d584e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d584e:	2300      	movs	r3, #0
   d5850:	461a      	mov	r2, r3
   d5852:	6840      	ldr	r0, [r0, #4]
   d5854:	f7ff bebe 	b.w	d55d4 <network_connect>

000d5858 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5858:	4b02      	ldr	r3, [pc, #8]	; (d5864 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d585a:	2203      	movs	r2, #3
   d585c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d585e:	4a02      	ldr	r2, [pc, #8]	; (d5868 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5860:	601a      	str	r2, [r3, #0]
   d5862:	4770      	bx	lr
   d5864:	2003e360 	.word	0x2003e360
   d5868:	000d7b14 	.word	0x000d7b14

000d586c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d586c:	4770      	bx	lr

000d586e <_ZN8SPIClassD0Ev>:
   d586e:	b510      	push	{r4, lr}
   d5870:	4604      	mov	r4, r0
   d5872:	f7fe fc10 	bl	d4096 <_ZdlPv>
   d5876:	4620      	mov	r0, r4
   d5878:	bd10      	pop	{r4, pc}
	...

000d587c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d587c:	b570      	push	{r4, r5, r6, lr}
   d587e:	4b08      	ldr	r3, [pc, #32]	; (d58a0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5880:	6003      	str	r3, [r0, #0]
   d5882:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5884:	2500      	movs	r5, #0
   d5886:	460e      	mov	r6, r1
   d5888:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d588c:	f7ff fd2e 	bl	d52ec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5890:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5892:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5894:	f7ff fcaa 	bl	d51ec <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5898:	60a5      	str	r5, [r4, #8]
}
   d589a:	4620      	mov	r0, r4
   d589c:	bd70      	pop	{r4, r5, r6, pc}
   d589e:	bf00      	nop
   d58a0:	000d7b48 	.word	0x000d7b48

000d58a4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d58a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d58a8:	7900      	ldrb	r0, [r0, #4]
   d58aa:	f7ff bc6f 	b.w	d518c <HAL_SPI_Begin>

000d58ae <_ZN8SPIClass3endEv>:

  HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
}

void SPIClass::end()
{
   d58ae:	b510      	push	{r4, lr}
   d58b0:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
   d58b2:	68c0      	ldr	r0, [r0, #12]
   d58b4:	f7ff fd22 	bl	d52fc <os_mutex_trylock>
    void unlock() { os_mutex_unlock(handle_); }
   d58b8:	68e0      	ldr	r0, [r4, #12]
   d58ba:	f7ff fd27 	bl	d530c <os_mutex_unlock>
  trylock();
  unlock();
  HAL_SPI_End(_spi);
   d58be:	7920      	ldrb	r0, [r4, #4]
}
   d58c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SPIClass::end()
{
  trylock();
  unlock();
  HAL_SPI_End(_spi);
   d58c4:	f7ff bc6a 	b.w	d519c <HAL_SPI_End>

000d58c8 <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d58c8:	7900      	ldrb	r0, [r0, #4]
   d58ca:	f7ff bc6f 	b.w	d51ac <HAL_SPI_Set_Bit_Order>

000d58ce <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d58ce:	7900      	ldrb	r0, [r0, #4]
   d58d0:	f7ff bc74 	b.w	d51bc <HAL_SPI_Set_Data_Mode>

000d58d4 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d58d4:	4a05      	ldr	r2, [pc, #20]	; (d58ec <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d58d6:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d58d8:	5c99      	ldrb	r1, [r3, r2]
   d58da:	4281      	cmp	r1, r0
   d58dc:	d002      	beq.n	d58e4 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d58de:	3301      	adds	r3, #1
   d58e0:	2b08      	cmp	r3, #8
   d58e2:	d1f9      	bne.n	d58d8 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d58e4:	1c58      	adds	r0, r3, #1
}
   d58e6:	b2c0      	uxtb	r0, r0
   d58e8:	4770      	bx	lr
   d58ea:	bf00      	nop
   d58ec:	000d7b50 	.word	0x000d7b50

000d58f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d58f0:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d58f2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d58f4:	6018      	str	r0, [r3, #0]
   d58f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d58f8:	6818      	ldr	r0, [r3, #0]
   d58fa:	4288      	cmp	r0, r1
   d58fc:	b2e5      	uxtb	r5, r4
   d58fe:	d906      	bls.n	d590e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5900:	3401      	adds	r4, #1
   d5902:	2c08      	cmp	r4, #8
   d5904:	d002      	beq.n	d590c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d5906:	0840      	lsrs	r0, r0, #1
   d5908:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d590a:	e7f5      	b.n	d58f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d590c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5910:	5d5b      	ldrb	r3, [r3, r5]
   d5912:	7013      	strb	r3, [r2, #0]
   d5914:	bd30      	pop	{r4, r5, pc}
   d5916:	bf00      	nop
   d5918:	000d7b50 	.word	0x000d7b50

000d591c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d591c:	b570      	push	{r4, r5, r6, lr}
   d591e:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d5920:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d5922:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5926:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d5928:	2214      	movs	r2, #20
   d592a:	2100      	movs	r1, #0
   d592c:	a803      	add	r0, sp, #12
   d592e:	f001 ff64 	bl	d77fa <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d5932:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d5934:	a903      	add	r1, sp, #12
   d5936:	4630      	mov	r0, r6
   d5938:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d593a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d593e:	f7ff fc65 	bl	d520c <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d5942:	ab02      	add	r3, sp, #8
   d5944:	f10d 0207 	add.w	r2, sp, #7
   d5948:	4629      	mov	r1, r5
   d594a:	9804      	ldr	r0, [sp, #16]
   d594c:	f7ff ffd0 	bl	d58f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5950:	7920      	ldrb	r0, [r4, #4]
   d5952:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5956:	f7ff fc39 	bl	d51cc <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d595a:	9802      	ldr	r0, [sp, #8]
   d595c:	b008      	add	sp, #32
   d595e:	bd70      	pop	{r4, r5, r6, pc}

000d5960 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5960:	b538      	push	{r3, r4, r5, lr}
   d5962:	4604      	mov	r4, r0
   d5964:	4608      	mov	r0, r1
    if (dividerReference)
   d5966:	68a5      	ldr	r5, [r4, #8]
   d5968:	b14d      	cbz	r5, d597e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d596a:	f7ff ffb3 	bl	d58d4 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d596e:	2201      	movs	r2, #1
   d5970:	fa25 f100 	lsr.w	r1, r5, r0
   d5974:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d5976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d597a:	f7ff bfcf 	b.w	d591c <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d597e:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5984:	f7ff bc22 	b.w	d51cc <HAL_SPI_Set_Clock_Divider>

000d5988 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5988:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d598a:	7900      	ldrb	r0, [r0, #4]
   d598c:	f7ff fc26 	bl	d51dc <HAL_SPI_Send_Receive_Data>
}
   d5990:	b2c0      	uxtb	r0, r0
   d5992:	bd08      	pop	{r3, pc}

000d5994 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5994:	7900      	ldrb	r0, [r0, #4]
   d5996:	f7ff bc31 	b.w	d51fc <HAL_SPI_Is_Enabled>

000d599a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d599a:	4601      	mov	r1, r0
   d599c:	2200      	movs	r2, #0
   d599e:	208c      	movs	r0, #140	; 0x8c
   d59a0:	f7ff bc7c 	b.w	d529c <HAL_Core_System_Reset_Ex>

000d59a4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d59a4:	2000      	movs	r0, #0
   d59a6:	f7ff bff8 	b.w	d599a <_ZN11SystemClass5resetEm>
	...

000d59ac <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d59ac:	b510      	push	{r4, lr}
   d59ae:	4604      	mov	r4, r0
   d59b0:	4608      	mov	r0, r1
   d59b2:	4611      	mov	r1, r2
   d59b4:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d59b6:	2300      	movs	r3, #0
   d59b8:	f7ff fde8 	bl	d558c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d59bc:	4b06      	ldr	r3, [pc, #24]	; (d59d8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d59be:	2200      	movs	r2, #0
   d59c0:	701a      	strb	r2, [r3, #0]
   d59c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d59c6:	8058      	strh	r0, [r3, #2]
   d59c8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	889b      	ldrh	r3, [r3, #4]
   d59ce:	6022      	str	r2, [r4, #0]
   d59d0:	80a3      	strh	r3, [r4, #4]
}
   d59d2:	4620      	mov	r0, r4
   d59d4:	bd10      	pop	{r4, pc}
   d59d6:	bf00      	nop
   d59d8:	2003e368 	.word	0x2003e368

000d59dc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d59dc:	4b04      	ldr	r3, [pc, #16]	; (d59f0 <_GLOBAL__sub_I_System+0x14>)
   d59de:	2000      	movs	r0, #0
   d59e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d59e4:	7018      	strb	r0, [r3, #0]
   d59e6:	8058      	strh	r0, [r3, #2]
   d59e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d59ea:	f7ff bdbf 	b.w	d556c <set_system_mode>
   d59ee:	bf00      	nop
   d59f0:	2003e368 	.word	0x2003e368

000d59f4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d59f4:	b510      	push	{r4, lr}
   d59f6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d59f8:	f001 ff38 	bl	d786c <strlen>
   d59fc:	3801      	subs	r0, #1
   d59fe:	1823      	adds	r3, r4, r0
   d5a00:	4620      	mov	r0, r4
	while(i<j){
   d5a02:	4298      	cmp	r0, r3
   d5a04:	d206      	bcs.n	d5a14 <_Z11str_reversePc+0x20>
		c = *i;
   d5a06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5a08:	7819      	ldrb	r1, [r3, #0]
   d5a0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5a0e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5a12:	e7f6      	b.n	d5a02 <_Z11str_reversePc+0xe>
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5a16:	b570      	push	{r4, r5, r6, lr}
   d5a18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5a1a:	1e91      	subs	r1, r2, #2
   d5a1c:	2922      	cmp	r1, #34	; 0x22
   d5a1e:	d820      	bhi.n	d5a62 <ultoa+0x4c>
   d5a20:	4625      	mov	r5, r4
   d5a22:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5a24:	b910      	cbnz	r0, d5a2c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5a26:	4423      	add	r3, r4
            *ptr++ = '0';
   d5a28:	2230      	movs	r2, #48	; 0x30
   d5a2a:	e00e      	b.n	d5a4a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5a2c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5a30:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5a34:	b2c1      	uxtb	r1, r0
   d5a36:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5a3a:	2809      	cmp	r0, #9
                *ptr += '0';
   d5a3c:	bf94      	ite	ls
   d5a3e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5a40:	3157      	addhi	r1, #87	; 0x57
   d5a42:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5a46:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5a48:	e7eb      	b.n	d5a22 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5a4a:	4299      	cmp	r1, r3
   d5a4c:	d202      	bcs.n	d5a54 <ultoa+0x3e>
            *ptr++ = '0';
   d5a4e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5a52:	e7fa      	b.n	d5a4a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5a54:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5a56:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5a58:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5a5a:	f7ff ffcb 	bl	d59f4 <_Z11str_reversePc>
	return buffer;
   d5a5e:	4620      	mov	r0, r4
   d5a60:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5a62:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5a64:	bd70      	pop	{r4, r5, r6, pc}

000d5a66 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5a66:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5a68:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5a6a:	460c      	mov	r4, r1
   d5a6c:	4615      	mov	r5, r2
	if(a<0){
   d5a6e:	da0b      	bge.n	d5a88 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5a74:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5a78:	bf14      	ite	ne
   d5a7a:	4258      	negne	r0, r3
   d5a7c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5a7e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5a80:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5a82:	462a      	mov	r2, r5
   d5a84:	4419      	add	r1, r3
   d5a86:	e000      	b.n	d5a8a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5a88:	2301      	movs	r3, #1
   d5a8a:	f7ff ffc4 	bl	d5a16 <ultoa>
	}
	return buffer;
}
   d5a8e:	4620      	mov	r0, r4
   d5a90:	bd38      	pop	{r3, r4, r5, pc}

000d5a92 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5a92:	b510      	push	{r4, lr}
   d5a94:	4604      	mov	r4, r0
{
	free(buffer);
   d5a96:	6800      	ldr	r0, [r0, #0]
   d5a98:	f7ff fe04 	bl	d56a4 <free>
}
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bd10      	pop	{r4, pc}

000d5aa0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5aa4:	6800      	ldr	r0, [r0, #0]
   d5aa6:	b108      	cbz	r0, d5aac <_ZN6String10invalidateEv+0xc>
   d5aa8:	f7ff fdfc 	bl	d56a4 <free>
	buffer = NULL;
   d5aac:	2300      	movs	r3, #0
   d5aae:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5ab0:	60a3      	str	r3, [r4, #8]
   d5ab2:	6063      	str	r3, [r4, #4]
   d5ab4:	bd10      	pop	{r4, pc}

000d5ab6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ab6:	b538      	push	{r3, r4, r5, lr}
   d5ab8:	4604      	mov	r4, r0
   d5aba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5abc:	6800      	ldr	r0, [r0, #0]
   d5abe:	3101      	adds	r1, #1
   d5ac0:	f7ff fdf8 	bl	d56b4 <realloc>
	if (newbuffer) {
   d5ac4:	b110      	cbz	r0, d5acc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ac6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5aca:	2001      	movs	r0, #1
	}
	return 0;
}
   d5acc:	bd38      	pop	{r3, r4, r5, pc}

000d5ace <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5ace:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ad0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5ad2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5ad4:	b113      	cbz	r3, d5adc <_ZN6String7reserveEj+0xe>
   d5ad6:	6843      	ldr	r3, [r0, #4]
   d5ad8:	428b      	cmp	r3, r1
   d5ada:	d207      	bcs.n	d5aec <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5adc:	4620      	mov	r0, r4
   d5ade:	f7ff ffea 	bl	d5ab6 <_ZN6String12changeBufferEj>
   d5ae2:	b120      	cbz	r0, d5aee <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5ae4:	68a3      	ldr	r3, [r4, #8]
   d5ae6:	b90b      	cbnz	r3, d5aec <_ZN6String7reserveEj+0x1e>
   d5ae8:	6822      	ldr	r2, [r4, #0]
   d5aea:	7013      	strb	r3, [r2, #0]
   d5aec:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5aee:	bd10      	pop	{r4, pc}

000d5af0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5af0:	b570      	push	{r4, r5, r6, lr}
   d5af2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5af4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5af6:	4604      	mov	r4, r0
   d5af8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5afa:	f7ff ffe8 	bl	d5ace <_ZN6String7reserveEj>
   d5afe:	b918      	cbnz	r0, d5b08 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5b00:	4620      	mov	r0, r4
   d5b02:	f7ff ffcd 	bl	d5aa0 <_ZN6String10invalidateEv>
		return *this;
   d5b06:	e009      	b.n	d5b1c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5b08:	462a      	mov	r2, r5
   d5b0a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5b0c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5b0e:	6820      	ldr	r0, [r4, #0]
   d5b10:	f001 fe68 	bl	d77e4 <memcpy>
	buffer[len] = 0;
   d5b14:	6822      	ldr	r2, [r4, #0]
   d5b16:	68a3      	ldr	r3, [r4, #8]
   d5b18:	2100      	movs	r1, #0
   d5b1a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	bd70      	pop	{r4, r5, r6, pc}

000d5b20 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5b20:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b22:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5b24:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b26:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5b28:	6043      	str	r3, [r0, #4]
	len = 0;
   d5b2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b2c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5b2e:	460d      	mov	r5, r1
   d5b30:	b139      	cbz	r1, d5b42 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5b32:	4608      	mov	r0, r1
   d5b34:	f001 fe9a 	bl	d786c <strlen>
   d5b38:	4629      	mov	r1, r5
   d5b3a:	4602      	mov	r2, r0
   d5b3c:	4620      	mov	r0, r4
   d5b3e:	f7ff ffd7 	bl	d5af0 <_ZN6String4copyEPKcj>
}
   d5b42:	4620      	mov	r0, r4
   d5b44:	bd38      	pop	{r3, r4, r5, pc}

000d5b46 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5b46:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5b48:	b510      	push	{r4, lr}
   d5b4a:	460b      	mov	r3, r1
   d5b4c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5b4e:	d007      	beq.n	d5b60 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5b50:	6809      	ldr	r1, [r1, #0]
   d5b52:	b119      	cbz	r1, d5b5c <_ZN6StringaSERKS_+0x16>
   d5b54:	689a      	ldr	r2, [r3, #8]
   d5b56:	f7ff ffcb 	bl	d5af0 <_ZN6String4copyEPKcj>
   d5b5a:	e001      	b.n	d5b60 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5b5c:	f7ff ffa0 	bl	d5aa0 <_ZN6String10invalidateEv>

	return *this;
}
   d5b60:	4620      	mov	r0, r4
   d5b62:	bd10      	pop	{r4, pc}

000d5b64 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b64:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b66:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5b6c:	6043      	str	r3, [r0, #4]
	len = 0;
   d5b6e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b70:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5b72:	f7ff ffe8 	bl	d5b46 <_ZN6StringaSERKS_>
}
   d5b76:	4620      	mov	r0, r4
   d5b78:	bd10      	pop	{r4, pc}

000d5b7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5b7a:	b538      	push	{r3, r4, r5, lr}
   d5b7c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5b7e:	460c      	mov	r4, r1
   d5b80:	b141      	cbz	r1, d5b94 <_ZN6StringaSEPKc+0x1a>
   d5b82:	4608      	mov	r0, r1
   d5b84:	f001 fe72 	bl	d786c <strlen>
   d5b88:	4621      	mov	r1, r4
   d5b8a:	4602      	mov	r2, r0
   d5b8c:	4628      	mov	r0, r5
   d5b8e:	f7ff ffaf 	bl	d5af0 <_ZN6String4copyEPKcj>
   d5b92:	e001      	b.n	d5b98 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5b94:	f7ff ff84 	bl	d5aa0 <_ZN6String10invalidateEv>

	return *this;
}
   d5b98:	4628      	mov	r0, r5
   d5b9a:	bd38      	pop	{r3, r4, r5, pc}

000d5b9c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ba0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5ba2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ba4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5ba6:	6063      	str	r3, [r4, #4]
	len = 0;
   d5ba8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5baa:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5bac:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5bae:	a901      	add	r1, sp, #4
   d5bb0:	f7ff ff59 	bl	d5a66 <itoa>
	*this = buf;
   d5bb4:	a901      	add	r1, sp, #4
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	f7ff ffdf 	bl	d5b7a <_ZN6StringaSEPKc>
}
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	b00a      	add	sp, #40	; 0x28
   d5bc0:	bd10      	pop	{r4, pc}

000d5bc2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5bc2:	b570      	push	{r4, r5, r6, lr}
   d5bc4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5bc6:	460e      	mov	r6, r1
   d5bc8:	b909      	cbnz	r1, d5bce <_ZN6String6concatEPKcj+0xc>
   d5bca:	2000      	movs	r0, #0
   d5bcc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5bce:	b16a      	cbz	r2, d5bec <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5bd0:	6883      	ldr	r3, [r0, #8]
   d5bd2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5bd4:	4629      	mov	r1, r5
   d5bd6:	f7ff ff7a 	bl	d5ace <_ZN6String7reserveEj>
   d5bda:	2800      	cmp	r0, #0
   d5bdc:	d0f5      	beq.n	d5bca <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5bde:	6820      	ldr	r0, [r4, #0]
   d5be0:	68a3      	ldr	r3, [r4, #8]
   d5be2:	4631      	mov	r1, r6
   d5be4:	4418      	add	r0, r3
   d5be6:	f001 fe39 	bl	d785c <strcpy>
	len = newlen;
   d5bea:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5bec:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5bee:	bd70      	pop	{r4, r5, r6, pc}

000d5bf0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5bf0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5bf2:	688a      	ldr	r2, [r1, #8]
   d5bf4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5bf6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5bf8:	f7ff ffe3 	bl	d5bc2 <_ZN6String6concatEPKcj>
   d5bfc:	b910      	cbnz	r0, d5c04 <_ZplRK15StringSumHelperRK6String+0x14>
   d5bfe:	4620      	mov	r0, r4
   d5c00:	f7ff ff4e 	bl	d5aa0 <_ZN6String10invalidateEv>
	return a;
}
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd10      	pop	{r4, pc}

000d5c08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c0a:	4606      	mov	r6, r0
   d5c0c:	460d      	mov	r5, r1
   d5c0e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c10:	2400      	movs	r4, #0
  while (size--) {
   d5c12:	42bd      	cmp	r5, r7
   d5c14:	d00c      	beq.n	d5c30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c16:	6833      	ldr	r3, [r6, #0]
   d5c18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c1c:	689b      	ldr	r3, [r3, #8]
   d5c1e:	4630      	mov	r0, r6
   d5c20:	4798      	blx	r3
     if (chunk>=0)
   d5c22:	2800      	cmp	r0, #0
   d5c24:	db01      	blt.n	d5c2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c26:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c28:	e7f3      	b.n	d5c12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c2a:	2c00      	cmp	r4, #0
   d5c2c:	bf08      	it	eq
   d5c2e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c30:	4620      	mov	r0, r4
   d5c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c34:	b570      	push	{r4, r5, r6, lr}
   d5c36:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c38:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c3a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c3c:	b149      	cbz	r1, d5c52 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c3e:	f001 fe15 	bl	d786c <strlen>
   d5c42:	682b      	ldr	r3, [r5, #0]
   d5c44:	4602      	mov	r2, r0
   d5c46:	4621      	mov	r1, r4
   d5c48:	4628      	mov	r0, r5
   d5c4a:	68db      	ldr	r3, [r3, #12]
    }
   d5c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c50:	4718      	bx	r3
    }
   d5c52:	bd70      	pop	{r4, r5, r6, pc}

000d5c54 <_ZN5Print5printEPKc>:
   d5c54:	b508      	push	{r3, lr}
   d5c56:	f7ff ffed 	bl	d5c34 <_ZN5Print5writeEPKc>
   d5c5a:	bd08      	pop	{r3, pc}

000d5c5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c5c:	6803      	ldr	r3, [r0, #0]
   d5c5e:	689b      	ldr	r3, [r3, #8]
   d5c60:	4718      	bx	r3

000d5c62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c64:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c66:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c68:	f7ff fff8 	bl	d5c5c <_ZN5Print5printEc>
  n += print('\n');
   d5c6c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5c6e:	4604      	mov	r4, r0
  n += print('\n');
   d5c70:	4628      	mov	r0, r5
   d5c72:	f7ff fff3 	bl	d5c5c <_ZN5Print5printEc>
  return n;
}
   d5c76:	4420      	add	r0, r4
   d5c78:	bd38      	pop	{r3, r4, r5, pc}

000d5c7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5c7a:	b538      	push	{r3, r4, r5, lr}
   d5c7c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5c7e:	f7ff ffd9 	bl	d5c34 <_ZN5Print5writeEPKc>
   d5c82:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5c84:	4628      	mov	r0, r5
   d5c86:	f7ff ffec 	bl	d5c62 <_ZN5Print7printlnEv>
  return n;
}
   d5c8a:	4420      	add	r0, r4
   d5c8c:	bd38      	pop	{r3, r4, r5, pc}

000d5c8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c8e:	b530      	push	{r4, r5, lr}
   d5c90:	b08b      	sub	sp, #44	; 0x2c
   d5c92:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c94:	2100      	movs	r1, #0
   d5c96:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c9a:	2a01      	cmp	r2, #1
   d5c9c:	bf98      	it	ls
   d5c9e:	220a      	movls	r2, #10
   d5ca0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5ca4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5ca8:	fb05 3312 	mls	r3, r5, r2, r3
   d5cac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cb0:	2b09      	cmp	r3, #9
   d5cb2:	bf94      	ite	ls
   d5cb4:	3330      	addls	r3, #48	; 0x30
   d5cb6:	3337      	addhi	r3, #55	; 0x37
   d5cb8:	b2db      	uxtb	r3, r3
   d5cba:	4621      	mov	r1, r4
   d5cbc:	f804 3901 	strb.w	r3, [r4], #-1
   d5cc0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cc2:	2d00      	cmp	r5, #0
   d5cc4:	d1ee      	bne.n	d5ca4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cc6:	f7ff ffb5 	bl	d5c34 <_ZN5Print5writeEPKc>
}
   d5cca:	b00b      	add	sp, #44	; 0x2c
   d5ccc:	bd30      	pop	{r4, r5, pc}

000d5cce <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5cce:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5cd0:	b92a      	cbnz	r2, d5cde <_ZN5Print5printEmi+0x10>
   d5cd2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5cd8:	689b      	ldr	r3, [r3, #8]
   d5cda:	b2c9      	uxtb	r1, r1
   d5cdc:	4718      	bx	r3
  else return printNumber(n, base);
   d5cde:	b2d2      	uxtb	r2, r2
}
   d5ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5ce4:	f7ff bfd3 	b.w	d5c8e <_ZN5Print11printNumberEmh>

000d5ce8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5ce8:	f7ff bff1 	b.w	d5cce <_ZN5Print5printEmi>

000d5cec <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cf0:	4607      	mov	r7, r0
   d5cf2:	460e      	mov	r6, r1
  if (base == 0) {
   d5cf4:	4615      	mov	r5, r2
   d5cf6:	b92a      	cbnz	r2, d5d04 <_ZN5Print5printEli+0x18>
    return write(n);
   d5cf8:	6803      	ldr	r3, [r0, #0]
   d5cfa:	b2c9      	uxtb	r1, r1
   d5cfc:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5d02:	4718      	bx	r3
  } else if (base == 10) {
   d5d04:	2a0a      	cmp	r2, #10
   d5d06:	d102      	bne.n	d5d0e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5d08:	2900      	cmp	r1, #0
   d5d0a:	da01      	bge.n	d5d10 <_ZN5Print5printEli+0x24>
   d5d0c:	e004      	b.n	d5d18 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5d0e:	b2d2      	uxtb	r2, r2
  }
}
   d5d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5d14:	f7ff bfbb 	b.w	d5c8e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5d18:	212d      	movs	r1, #45	; 0x2d
   d5d1a:	f7ff ff9f 	bl	d5c5c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5d1e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5d20:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5d22:	4271      	negs	r1, r6
   d5d24:	4638      	mov	r0, r7
   d5d26:	f7ff ffb2 	bl	d5c8e <_ZN5Print11printNumberEmh>
   d5d2a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d30 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5d30:	f7ff bfdc 	b.w	d5cec <_ZN5Print5printEli>

000d5d34 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d5d34:	b538      	push	{r3, r4, r5, lr}
   d5d36:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5d38:	f7ff ffd8 	bl	d5cec <_ZN5Print5printEli>
   d5d3c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5d3e:	4628      	mov	r0, r5
   d5d40:	f7ff ff8f 	bl	d5c62 <_ZN5Print7printlnEv>
  return n;
}
   d5d44:	4420      	add	r0, r4
   d5d46:	bd38      	pop	{r3, r4, r5, pc}

000d5d48 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d4c:	ec57 6b10 	vmov	r6, r7, d0
   d5d50:	4682      	mov	sl, r0
   d5d52:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5d54:	ee10 2a10 	vmov	r2, s0
   d5d58:	463b      	mov	r3, r7
   d5d5a:	ee10 0a10 	vmov	r0, s0
   d5d5e:	4639      	mov	r1, r7
   d5d60:	f001 fc84 	bl	d766c <__aeabi_dcmpun>
   d5d64:	b108      	cbz	r0, d5d6a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d66:	4948      	ldr	r1, [pc, #288]	; (d5e88 <_ZN5Print10printFloatEdh+0x140>)
   d5d68:	e012      	b.n	d5d90 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5d6a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5d6e:	f04f 32ff 	mov.w	r2, #4294967295
   d5d72:	4b46      	ldr	r3, [pc, #280]	; (d5e8c <_ZN5Print10printFloatEdh+0x144>)
   d5d74:	4630      	mov	r0, r6
   d5d76:	4649      	mov	r1, r9
   d5d78:	f001 fc78 	bl	d766c <__aeabi_dcmpun>
   d5d7c:	b968      	cbnz	r0, d5d9a <_ZN5Print10printFloatEdh+0x52>
   d5d7e:	f04f 32ff 	mov.w	r2, #4294967295
   d5d82:	4b42      	ldr	r3, [pc, #264]	; (d5e8c <_ZN5Print10printFloatEdh+0x144>)
   d5d84:	4630      	mov	r0, r6
   d5d86:	4649      	mov	r1, r9
   d5d88:	f001 fc52 	bl	d7630 <__aeabi_dcmple>
   d5d8c:	b928      	cbnz	r0, d5d9a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d8e:	4940      	ldr	r1, [pc, #256]	; (d5e90 <_ZN5Print10printFloatEdh+0x148>)
   d5d90:	4650      	mov	r0, sl
   d5d92:	f7ff ff4f 	bl	d5c34 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5d9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d9e:	4b3d      	ldr	r3, [pc, #244]	; (d5e94 <_ZN5Print10printFloatEdh+0x14c>)
   d5da0:	4630      	mov	r0, r6
   d5da2:	4639      	mov	r1, r7
   d5da4:	f001 fc58 	bl	d7658 <__aeabi_dcmpgt>
   d5da8:	b108      	cbz	r0, d5dae <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5daa:	493b      	ldr	r1, [pc, #236]	; (d5e98 <_ZN5Print10printFloatEdh+0x150>)
   d5dac:	e7f0      	b.n	d5d90 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5dae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5db2:	4b3a      	ldr	r3, [pc, #232]	; (d5e9c <_ZN5Print10printFloatEdh+0x154>)
   d5db4:	4630      	mov	r0, r6
   d5db6:	4639      	mov	r1, r7
   d5db8:	f001 fc30 	bl	d761c <__aeabi_dcmplt>
   d5dbc:	2800      	cmp	r0, #0
   d5dbe:	d1f4      	bne.n	d5daa <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5dc0:	2200      	movs	r2, #0
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	4630      	mov	r0, r6
   d5dc6:	4639      	mov	r1, r7
   d5dc8:	f001 fc28 	bl	d761c <__aeabi_dcmplt>
   d5dcc:	b140      	cbz	r0, d5de0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5dce:	212d      	movs	r1, #45	; 0x2d
   d5dd0:	4650      	mov	r0, sl
   d5dd2:	f7ff ff43 	bl	d5c5c <_ZN5Print5printEc>
     number = -number;
   d5dd6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5dda:	4604      	mov	r4, r0
     number = -number;
   d5ddc:	461f      	mov	r7, r3
   d5dde:	e000      	b.n	d5de2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5de0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5de2:	492f      	ldr	r1, [pc, #188]	; (d5ea0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5de4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5de8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5dea:	fa5f f388 	uxtb.w	r3, r8
   d5dee:	429d      	cmp	r5, r3
   d5df0:	d906      	bls.n	d5e00 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5df2:	2200      	movs	r2, #0
   d5df4:	4b2b      	ldr	r3, [pc, #172]	; (d5ea4 <_ZN5Print10printFloatEdh+0x15c>)
   d5df6:	f001 fac9 	bl	d738c <__aeabi_ddiv>
   d5dfa:	f108 0801 	add.w	r8, r8, #1
   d5dfe:	e7f4      	b.n	d5dea <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5e00:	4632      	mov	r2, r6
   d5e02:	463b      	mov	r3, r7
   d5e04:	f000 ffe6 	bl	d6dd4 <__adddf3>
   d5e08:	460f      	mov	r7, r1
   d5e0a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5e0c:	f001 fc6c 	bl	d76e8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5e10:	220a      	movs	r2, #10
   d5e12:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5e14:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5e16:	4650      	mov	r0, sl
   d5e18:	f7ff ff39 	bl	d5c8e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5e1c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5e1e:	b37d      	cbz	r5, d5e80 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5e20:	4640      	mov	r0, r8
   d5e22:	f001 f913 	bl	d704c <__aeabi_ui2d>
   d5e26:	4602      	mov	r2, r0
   d5e28:	460b      	mov	r3, r1
   d5e2a:	4630      	mov	r0, r6
   d5e2c:	4639      	mov	r1, r7
   d5e2e:	f000 ffcf 	bl	d6dd0 <__aeabi_dsub>
   d5e32:	4606      	mov	r6, r0
   d5e34:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5e36:	4650      	mov	r0, sl
   d5e38:	491b      	ldr	r1, [pc, #108]	; (d5ea8 <_ZN5Print10printFloatEdh+0x160>)
   d5e3a:	f7ff fefb 	bl	d5c34 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5e3e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5e40:	4b18      	ldr	r3, [pc, #96]	; (d5ea4 <_ZN5Print10printFloatEdh+0x15c>)
   d5e42:	2200      	movs	r2, #0
   d5e44:	4630      	mov	r0, r6
   d5e46:	4639      	mov	r1, r7
   d5e48:	f001 f976 	bl	d7138 <__aeabi_dmul>
   d5e4c:	460f      	mov	r7, r1
   d5e4e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5e50:	f001 fc22 	bl	d7698 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5e54:	220a      	movs	r2, #10
   d5e56:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5e58:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5e5a:	4650      	mov	r0, sl
   d5e5c:	f7ff ff46 	bl	d5cec <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5e60:	4404      	add	r4, r0
    remainder -= toPrint;
   d5e62:	4640      	mov	r0, r8
   d5e64:	f001 f902 	bl	d706c <__aeabi_i2d>
   d5e68:	4602      	mov	r2, r0
   d5e6a:	460b      	mov	r3, r1
   d5e6c:	4630      	mov	r0, r6
   d5e6e:	4639      	mov	r1, r7
   d5e70:	f000 ffae 	bl	d6dd0 <__aeabi_dsub>
   d5e74:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5e76:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5e7a:	4606      	mov	r6, r0
   d5e7c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5e7e:	d1df      	bne.n	d5e40 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5e80:	4620      	mov	r0, r4
   d5e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5e86:	bf00      	nop
   d5e88:	000d7b58 	.word	0x000d7b58
   d5e8c:	7fefffff 	.word	0x7fefffff
   d5e90:	000d7b60 	.word	0x000d7b60
   d5e94:	41efffff 	.word	0x41efffff
   d5e98:	000d7b5c 	.word	0x000d7b5c
   d5e9c:	c1efffff 	.word	0xc1efffff
   d5ea0:	3fe00000 	.word	0x3fe00000
   d5ea4:	40240000 	.word	0x40240000
   d5ea8:	000d78a1 	.word	0x000d78a1

000d5eac <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d5eac:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5eae:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d5eb0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5eb2:	f7ff ff49 	bl	d5d48 <_ZN5Print10printFloatEdh>
   d5eb6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5eb8:	4628      	mov	r0, r5
   d5eba:	f7ff fed2 	bl	d5c62 <_ZN5Print7printlnEv>
  return n;
}
   d5ebe:	4420      	add	r0, r4
   d5ec0:	bd38      	pop	{r3, r4, r5, pc}

000d5ec2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5ec2:	b40c      	push	{r2, r3}
   d5ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ec8:	b087      	sub	sp, #28
   d5eca:	af00      	add	r7, sp, #0
   d5ecc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5ed0:	4605      	mov	r5, r0
   d5ed2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5ed6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5ed8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5eda:	4623      	mov	r3, r4
   d5edc:	464a      	mov	r2, r9
   d5ede:	2114      	movs	r1, #20
   d5ee0:	1d38      	adds	r0, r7, #4
   d5ee2:	f7ff fbef 	bl	d56c4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5ee6:	2813      	cmp	r0, #19
   d5ee8:	d805      	bhi.n	d5ef6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5eea:	1d39      	adds	r1, r7, #4
   d5eec:	4628      	mov	r0, r5
   d5eee:	f7ff fea1 	bl	d5c34 <_ZN5Print5writeEPKc>
   d5ef2:	4604      	mov	r4, r0
   d5ef4:	e013      	b.n	d5f1e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5ef6:	f100 0308 	add.w	r3, r0, #8
   d5efa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5efe:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5f00:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5f04:	1c41      	adds	r1, r0, #1
   d5f06:	4623      	mov	r3, r4
   d5f08:	464a      	mov	r2, r9
   d5f0a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5f0c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5f0e:	f7ff fbd9 	bl	d56c4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f12:	4669      	mov	r1, sp
   d5f14:	4628      	mov	r0, r5
   d5f16:	f7ff fe8d 	bl	d5c34 <_ZN5Print5writeEPKc>
   d5f1a:	4604      	mov	r4, r0
   d5f1c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5f1e:	b11e      	cbz	r6, d5f28 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5f20:	4628      	mov	r0, r5
   d5f22:	f7ff fe9e 	bl	d5c62 <_ZN5Print7printlnEv>
   d5f26:	4404      	add	r4, r0
    return n;
}
   d5f28:	4620      	mov	r0, r4
   d5f2a:	371c      	adds	r7, #28
   d5f2c:	46bd      	mov	sp, r7
   d5f2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f32:	b002      	add	sp, #8
   d5f34:	4770      	bx	lr
	...

000d5f38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5f38:	4b01      	ldr	r3, [pc, #4]	; (d5f40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f3a:	4a02      	ldr	r2, [pc, #8]	; (d5f44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f3c:	601a      	str	r2, [r3, #0]
   d5f3e:	4770      	bx	lr
   d5f40:	2003e370 	.word	0x2003e370
   d5f44:	000d7c17 	.word	0x000d7c17

000d5f48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f48:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f4a:	681a      	ldr	r2, [r3, #0]
   d5f4c:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f4e:	601a      	str	r2, [r3, #0]
   d5f50:	4770      	bx	lr
   d5f52:	bf00      	nop
   d5f54:	2003e1e4 	.word	0x2003e1e4
   d5f58:	2003e374 	.word	0x2003e374

000d5f5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	f7ff bb0d 	b.w	d557c <system_delay_ms>

000d5f62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f62:	b510      	push	{r4, lr}
   d5f64:	4604      	mov	r4, r0
   d5f66:	f7fe f8e8 	bl	d413a <_ZNSt14_Function_baseD1Ev>
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	bd10      	pop	{r4, pc}

000d5f6e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5f6e:	b510      	push	{r4, lr}
   d5f70:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5f72:	f7ff fae3 	bl	d553c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d5f76:	4284      	cmp	r4, r0
   d5f78:	d008      	beq.n	d5f8c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5f7a:	b11c      	cbz	r4, d5f84 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d5f80:	f7ff bacc 	b.w	d551c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d5f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d5f88:	f7ff bad0 	b.w	d552c <LED_Signaling_Stop>
   d5f8c:	bd10      	pop	{r4, pc}

000d5f8e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5f8e:	b570      	push	{r4, r5, r6, lr}
   d5f90:	4605      	mov	r5, r0
   d5f92:	460e      	mov	r6, r1
   d5f94:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d5f96:	f7ff fad1 	bl	d553c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d5f9a:	b150      	cbz	r0, d5fb2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5f9c:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5fa0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5fa4:	f7ff fab2 	bl	d550c <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d5fa8:	20e7      	movs	r0, #231	; 0xe7
}
   d5faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d5fae:	f7ff bacd 	b.w	d554c <LED_On>
   d5fb2:	bd70      	pop	{r4, r5, r6, pc}

000d5fb4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5fb4:	b513      	push	{r0, r1, r4, lr}
   d5fb6:	460b      	mov	r3, r1
   d5fb8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fba:	c803      	ldmia	r0, {r0, r1}
   d5fbc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5fc0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5fc4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5fc8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5fcc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5fd0:	b002      	add	sp, #8
   d5fd2:	bd10      	pop	{r4, pc}

000d5fd4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5fd4:	4803      	ldr	r0, [pc, #12]	; (d5fe4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5fd6:	4a04      	ldr	r2, [pc, #16]	; (d5fe8 <_GLOBAL__sub_I_RGB+0x14>)
   d5fd8:	4904      	ldr	r1, [pc, #16]	; (d5fec <_GLOBAL__sub_I_RGB+0x18>)
   d5fda:	2300      	movs	r3, #0
   d5fdc:	6083      	str	r3, [r0, #8]
   d5fde:	f000 bda3 	b.w	d6b28 <__aeabi_atexit>
   d5fe2:	bf00      	nop
   d5fe4:	2003e378 	.word	0x2003e378
   d5fe8:	2003e24c 	.word	0x2003e24c
   d5fec:	000d5f63 	.word	0x000d5f63

000d5ff0 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d5ff0:	0909      	lsrs	r1, r1, #4
   d5ff2:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d5ff6:	ee07 0a90 	vmov	s15, r0
   d5ffa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d5ffe:	eddf 7a02 	vldr	s15, [pc, #8]	; d6008 <_ZN6detail9_getVCellEhh+0x18>
   d6002:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6006:	4770      	bx	lr
   d6008:	44480000 	.word	0x44480000

000d600c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d600c:	6800      	ldr	r0, [r0, #0]
   d600e:	f000 bb41 	b.w	d6694 <_ZN7TwoWire4lockEv>

000d6012 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6012:	b510      	push	{r4, lr}
   d6014:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6016:	6001      	str	r1, [r0, #0]
   d6018:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d601a:	b10a      	cbz	r2, d6020 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d601c:	f7ff fff6 	bl	d600c <_ZN9FuelGauge4lockEv>
    }
}
   d6020:	4620      	mov	r0, r4
   d6022:	bd10      	pop	{r4, pc}

000d6024 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6024:	b538      	push	{r3, r4, r5, lr}
   d6026:	4604      	mov	r4, r0
   d6028:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d602a:	f000 fd5d 	bl	d6ae8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d602e:	462a      	mov	r2, r5
   d6030:	4601      	mov	r1, r0
   d6032:	4620      	mov	r0, r4
   d6034:	f7ff ffed 	bl	d6012 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6038:	4620      	mov	r0, r4
   d603a:	bd38      	pop	{r3, r4, r5, pc}

000d603c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d603c:	6800      	ldr	r0, [r0, #0]
   d603e:	f000 bb32 	b.w	d66a6 <_ZN7TwoWire6unlockEv>

000d6042 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6042:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6044:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6046:	4604      	mov	r4, r0
{
    if (lock_) {
   d6048:	b10b      	cbz	r3, d604e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d604a:	f7ff fff7 	bl	d603c <_ZN9FuelGauge6unlockEv>
    }
}
   d604e:	4620      	mov	r0, r4
   d6050:	bd10      	pop	{r4, pc}

000d6052 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6054:	4604      	mov	r4, r0
   d6056:	4616      	mov	r6, r2
   d6058:	461d      	mov	r5, r3
   d605a:	460f      	mov	r7, r1
   d605c:	f7ff ffd6 	bl	d600c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d6060:	6820      	ldr	r0, [r4, #0]
   d6062:	2136      	movs	r1, #54	; 0x36
   d6064:	f000 fb08 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d6068:	6820      	ldr	r0, [r4, #0]
   d606a:	6803      	ldr	r3, [r0, #0]
   d606c:	4639      	mov	r1, r7
   d606e:	689b      	ldr	r3, [r3, #8]
   d6070:	4798      	blx	r3
    i2c_.endTransmission(true);
   d6072:	2101      	movs	r1, #1
   d6074:	6820      	ldr	r0, [r4, #0]
   d6076:	f000 fb02 	bl	d667e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d607a:	2202      	movs	r2, #2
   d607c:	2136      	movs	r1, #54	; 0x36
   d607e:	2301      	movs	r3, #1
   d6080:	6820      	ldr	r0, [r4, #0]
   d6082:	f000 faf0 	bl	d6666 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d6086:	6820      	ldr	r0, [r4, #0]
   d6088:	6803      	ldr	r3, [r0, #0]
   d608a:	695b      	ldr	r3, [r3, #20]
   d608c:	4798      	blx	r3
   d608e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d6090:	6820      	ldr	r0, [r4, #0]
   d6092:	6803      	ldr	r3, [r0, #0]
   d6094:	695b      	ldr	r3, [r3, #20]
   d6096:	4798      	blx	r3
   d6098:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d609a:	4620      	mov	r0, r4
}
   d609c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d60a0:	f7ff bfcc 	b.w	d603c <_ZN9FuelGauge6unlockEv>

000d60a4 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d60a4:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d60a6:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d60a8:	2200      	movs	r2, #0
   d60aa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d60ae:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d60b2:	2102      	movs	r1, #2
   d60b4:	f10d 0206 	add.w	r2, sp, #6
   d60b8:	f7ff ffcb 	bl	d6052 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d60bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d60c0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d60c4:	b003      	add	sp, #12
   d60c6:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d60ca:	f7ff bf91 	b.w	d5ff0 <_ZN6detail9_getVCellEhh>
	...

000d60d0 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d60d0:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d60d2:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d60d4:	2200      	movs	r2, #0
	byte LSB = 0;
   d60d6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d60da:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d60de:	2104      	movs	r1, #4
   d60e0:	f10d 0206 	add.w	r2, sp, #6
   d60e4:	f7ff ffb5 	bl	d6052 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d60e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d60ec:	f000 ffbe 	bl	d706c <__aeabi_i2d>
   d60f0:	2200      	movs	r2, #0
   d60f2:	4b09      	ldr	r3, [pc, #36]	; (d6118 <_ZN9FuelGauge6getSoCEv+0x48>)
   d60f4:	f001 f820 	bl	d7138 <__aeabi_dmul>
   d60f8:	f001 fb16 	bl	d7728 <__aeabi_d2f>
   d60fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6100:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6104:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6108:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d610c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6110:	b003      	add	sp, #12
   d6112:	f85d fb04 	ldr.w	pc, [sp], #4
   d6116:	bf00      	nop
   d6118:	3f700000 	.word	0x3f700000

000d611c <_ZN9FuelGauge18readConfigRegisterERhS0_>:

}


void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
   d611c:	4613      	mov	r3, r2
   d611e:	460a      	mov	r2, r1
   d6120:	210c      	movs	r1, #12
   d6122:	f7ff bf96 	b.w	d6052 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d6126 <_ZN9FuelGauge13writeRegisterEhhh>:
    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
    MSB = i2c_.read();
    LSB = i2c_.read();
}

void FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d6126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6128:	4604      	mov	r4, r0
   d612a:	4616      	mov	r6, r2
   d612c:	461d      	mov	r5, r3
   d612e:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6130:	f7ff ff6c 	bl	d600c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d6134:	6820      	ldr	r0, [r4, #0]
   d6136:	2136      	movs	r1, #54	; 0x36
   d6138:	f000 fa9e 	bl	d6678 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(address);
   d613c:	6820      	ldr	r0, [r4, #0]
   d613e:	6803      	ldr	r3, [r0, #0]
   d6140:	4639      	mov	r1, r7
   d6142:	689b      	ldr	r3, [r3, #8]
   d6144:	4798      	blx	r3
    i2c_.write(MSB);
   d6146:	6820      	ldr	r0, [r4, #0]
   d6148:	6803      	ldr	r3, [r0, #0]
   d614a:	4631      	mov	r1, r6
   d614c:	689b      	ldr	r3, [r3, #8]
   d614e:	4798      	blx	r3
    i2c_.write(LSB);
   d6150:	6820      	ldr	r0, [r4, #0]
   d6152:	6803      	ldr	r3, [r0, #0]
   d6154:	4629      	mov	r1, r5
   d6156:	689a      	ldr	r2, [r3, #8]
   d6158:	4790      	blx	r2
    i2c_.endTransmission(true);
   d615a:	6820      	ldr	r0, [r4, #0]
   d615c:	2101      	movs	r1, #1
   d615e:	f000 fa8e 	bl	d667e <_ZN7TwoWire15endTransmissionEh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6162:	4620      	mov	r0, r4
}
   d6164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6168:	f7ff bf68 	b.w	d603c <_ZN9FuelGauge6unlockEv>

000d616c <_ZN9FuelGauge5sleepEv>:
void FuelGauge::quickStart() {

	writeRegister(MODE_REGISTER, 0x40, 0x00);
}

void FuelGauge::sleep() {
   d616c:	b513      	push	{r0, r1, r4, lr}
   d616e:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6170:	f7ff ff4c 	bl	d600c <_ZN9FuelGauge4lockEv>

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
	byte LSB = 0;
   d6174:	aa02      	add	r2, sp, #8
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d6176:	2300      	movs	r3, #0
	byte LSB = 0;
   d6178:	f802 3d01 	strb.w	r3, [r2, #-1]!

	readConfigRegister(MSB, LSB);
   d617c:	f10d 0106 	add.w	r1, sp, #6
   d6180:	4620      	mov	r0, r4
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d6182:	f88d 3006 	strb.w	r3, [sp, #6]
	byte LSB = 0;

	readConfigRegister(MSB, LSB);
   d6186:	f7ff ffc9 	bl	d611c <_ZN9FuelGauge18readConfigRegisterERhS0_>

	writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000));
   d618a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d618e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d6192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d6196:	210c      	movs	r1, #12
   d6198:	4620      	mov	r0, r4
   d619a:	f7ff ffc4 	bl	d6126 <_ZN9FuelGauge13writeRegisterEhhh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d619e:	4620      	mov	r0, r4
   d61a0:	f7ff ff4c 	bl	d603c <_ZN9FuelGauge6unlockEv>

}
   d61a4:	b002      	add	sp, #8
   d61a6:	bd10      	pop	{r4, pc}

000d61a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d61a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d61aa:	4b0c      	ldr	r3, [pc, #48]	; (d61dc <serialEventRun+0x34>)
   d61ac:	b133      	cbz	r3, d61bc <serialEventRun+0x14>
   d61ae:	f000 f921 	bl	d63f4 <_Z16_fetch_usbserialv>
   d61b2:	6803      	ldr	r3, [r0, #0]
   d61b4:	691b      	ldr	r3, [r3, #16]
   d61b6:	4798      	blx	r3
   d61b8:	2800      	cmp	r0, #0
   d61ba:	dc09      	bgt.n	d61d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d61bc:	4b08      	ldr	r3, [pc, #32]	; (d61e0 <serialEventRun+0x38>)
   d61be:	b163      	cbz	r3, d61da <serialEventRun+0x32>
   d61c0:	f000 f9d6 	bl	d6570 <_Z22__fetch_global_Serial1v>
   d61c4:	6803      	ldr	r3, [r0, #0]
   d61c6:	691b      	ldr	r3, [r3, #16]
   d61c8:	4798      	blx	r3
   d61ca:	2800      	cmp	r0, #0
   d61cc:	dc03      	bgt.n	d61d6 <serialEventRun+0x2e>
   d61ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d61d0:	f3af 8000 	nop.w
   d61d4:	e7f2      	b.n	d61bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d61d6:	f3af 8000 	nop.w
   d61da:	bd08      	pop	{r3, pc}
	...

000d61e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d61e4:	b508      	push	{r3, lr}
	serialEventRun();
   d61e6:	f7ff ffdf 	bl	d61a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d61ea:	f7ff f837 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d61ee:	4b01      	ldr	r3, [pc, #4]	; (d61f4 <_post_loop+0x10>)
   d61f0:	6018      	str	r0, [r3, #0]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	2003e714 	.word	0x2003e714

000d61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d61f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d61fa:	2300      	movs	r3, #0
   d61fc:	9300      	str	r3, [sp, #0]
   d61fe:	461a      	mov	r2, r3
   d6200:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6204:	f7ff f9dc 	bl	d55c0 <system_ctrl_set_result>
}
   d6208:	b003      	add	sp, #12
   d620a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6210 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6210:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6212:	8843      	ldrh	r3, [r0, #2]
   d6214:	2b0a      	cmp	r3, #10
   d6216:	d008      	beq.n	d622a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6218:	2b50      	cmp	r3, #80	; 0x50
   d621a:	d109      	bne.n	d6230 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d621c:	4b09      	ldr	r3, [pc, #36]	; (d6244 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d621e:	681b      	ldr	r3, [r3, #0]
   d6220:	b13b      	cbz	r3, d6232 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6222:	b003      	add	sp, #12
   d6224:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6228:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d622a:	f7ff ffe5 	bl	d61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d622e:	e006      	b.n	d623e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6230:	2300      	movs	r3, #0
   d6232:	9300      	str	r3, [sp, #0]
   d6234:	461a      	mov	r2, r3
   d6236:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d623a:	f7ff f9c1 	bl	d55c0 <system_ctrl_set_result>
        break;
    }
}
   d623e:	b003      	add	sp, #12
   d6240:	f85d fb04 	ldr.w	pc, [sp], #4
   d6244:	2003e388 	.word	0x2003e388

000d6248 <module_user_init_hook>:

void module_user_init_hook()
{
   d6248:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d624a:	f7fe ffe7 	bl	d521c <HAL_RNG_GetRandomNumber>
   d624e:	4604      	mov	r4, r0
    srand(seed);
   d6250:	f001 fadc 	bl	d780c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6254:	4b07      	ldr	r3, [pc, #28]	; (d6274 <module_user_init_hook+0x2c>)
   d6256:	b113      	cbz	r3, d625e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6258:	4620      	mov	r0, r4
   d625a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d625e:	2100      	movs	r1, #0
   d6260:	4804      	ldr	r0, [pc, #16]	; (d6274 <module_user_init_hook+0x2c>)
   d6262:	f7ff fa0f 	bl	d5684 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6266:	2100      	movs	r1, #0
   d6268:	4803      	ldr	r0, [pc, #12]	; (d6278 <module_user_init_hook+0x30>)
}
   d626a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d626e:	f7ff b99d 	b.w	d55ac <system_ctrl_set_app_request_handler>
   d6272:	bf00      	nop
   d6274:	00000000 	.word	0x00000000
   d6278:	000d6211 	.word	0x000d6211

000d627c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d627c:	4770      	bx	lr

000d627e <_ZN9IPAddressD0Ev>:
   d627e:	b510      	push	{r4, lr}
   d6280:	4604      	mov	r4, r0
   d6282:	f7fd ff08 	bl	d4096 <_ZdlPv>
   d6286:	4620      	mov	r0, r4
   d6288:	bd10      	pop	{r4, pc}

000d628a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d628a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d628c:	7d03      	ldrb	r3, [r0, #20]
   d628e:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6290:	b08d      	sub	sp, #52	; 0x34
   d6292:	460e      	mov	r6, r1
   d6294:	f100 0704 	add.w	r7, r0, #4
   d6298:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d629c:	d002      	beq.n	d62a4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d629e:	f100 0508 	add.w	r5, r0, #8
   d62a2:	e018      	b.n	d62d6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d62a4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62a6:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d62a8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62ac:	232f      	movs	r3, #47	; 0x2f
   d62ae:	462a      	mov	r2, r5
   d62b0:	200a      	movs	r0, #10
   d62b2:	f7ff f843 	bl	d533c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d62b6:	4628      	mov	r0, r5
   d62b8:	f001 fad8 	bl	d786c <strlen>
   d62bc:	6833      	ldr	r3, [r6, #0]
   d62be:	4602      	mov	r2, r0
   d62c0:	68db      	ldr	r3, [r3, #12]
   d62c2:	4629      	mov	r1, r5
   d62c4:	4630      	mov	r0, r6
   d62c6:	4798      	blx	r3
   d62c8:	e00f      	b.n	d62ea <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d62ca:	b124      	cbz	r4, d62d6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d62cc:	212e      	movs	r1, #46	; 0x2e
   d62ce:	4630      	mov	r0, r6
   d62d0:	f7ff fcc4 	bl	d5c5c <_ZN5Print5printEc>
   d62d4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d62d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d62da:	220a      	movs	r2, #10
   d62dc:	4630      	mov	r0, r6
   d62de:	f7ff fd03 	bl	d5ce8 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d62e2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d62e4:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d62e6:	d1f0      	bne.n	d62ca <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d62e8:	4620      	mov	r0, r4
    }
    return n;
}
   d62ea:	b00d      	add	sp, #52	; 0x34
   d62ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d62f0 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d62f0:	b510      	push	{r4, lr}
   d62f2:	4b05      	ldr	r3, [pc, #20]	; (d6308 <_ZN9IPAddressC1Ev+0x18>)
   d62f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d62f6:	2211      	movs	r2, #17
   d62f8:	f840 3b04 	str.w	r3, [r0], #4
   d62fc:	2100      	movs	r1, #0
   d62fe:	f001 fa7c 	bl	d77fa <memset>
{
    clear();
}
   d6302:	4620      	mov	r0, r4
   d6304:	bd10      	pop	{r4, pc}
   d6306:	bf00      	nop
   d6308:	000d7c74 	.word	0x000d7c74

000d630c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d630c:	4603      	mov	r3, r0
   d630e:	4a07      	ldr	r2, [pc, #28]	; (d632c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6310:	b510      	push	{r4, lr}
   d6312:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6316:	f101 0210 	add.w	r2, r1, #16
   d631a:	f851 4b04 	ldr.w	r4, [r1], #4
   d631e:	f843 4b04 	str.w	r4, [r3], #4
   d6322:	4291      	cmp	r1, r2
   d6324:	d1f9      	bne.n	d631a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6326:	780a      	ldrb	r2, [r1, #0]
   d6328:	701a      	strb	r2, [r3, #0]
}
   d632a:	bd10      	pop	{r4, pc}
   d632c:	000d7c74 	.word	0x000d7c74

000d6330 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6330:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6332:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6336:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d633a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d633e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6342:	2304      	movs	r3, #4
   d6344:	6041      	str	r1, [r0, #4]
   d6346:	7503      	strb	r3, [r0, #20]
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d634a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d634c:	780d      	ldrb	r5, [r1, #0]
   d634e:	788b      	ldrb	r3, [r1, #2]
   d6350:	784a      	ldrb	r2, [r1, #1]
   d6352:	78c9      	ldrb	r1, [r1, #3]
   d6354:	9100      	str	r1, [sp, #0]
   d6356:	4629      	mov	r1, r5
   d6358:	f7ff ffea 	bl	d6330 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d635c:	b003      	add	sp, #12
   d635e:	bd30      	pop	{r4, r5, pc}

000d6360 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6360:	7441      	strb	r1, [r0, #17]
   d6362:	4770      	bx	lr

000d6364 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6364:	4770      	bx	lr

000d6366 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6366:	2100      	movs	r1, #0
   d6368:	7c00      	ldrb	r0, [r0, #16]
   d636a:	f7ff b8b7 	b.w	d54dc <HAL_USB_USART_Receive_Data>

000d636e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d636e:	2101      	movs	r1, #1
   d6370:	7c00      	ldrb	r0, [r0, #16]
   d6372:	f7ff b8b3 	b.w	d54dc <HAL_USB_USART_Receive_Data>

000d6376 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d6376:	7c00      	ldrb	r0, [r0, #16]
   d6378:	f7ff b8a8 	b.w	d54cc <HAL_USB_USART_Available_Data_For_Write>

000d637c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d637c:	7c00      	ldrb	r0, [r0, #16]
   d637e:	f7ff b89d 	b.w	d54bc <HAL_USB_USART_Available_Data>

000d6382 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d6382:	b538      	push	{r3, r4, r5, lr}
   d6384:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6386:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6388:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d638a:	f7ff f89f 	bl	d54cc <HAL_USB_USART_Available_Data_For_Write>
   d638e:	2800      	cmp	r0, #0
   d6390:	dc01      	bgt.n	d6396 <_ZN9USBSerial5writeEh+0x14>
   d6392:	7c60      	ldrb	r0, [r4, #17]
   d6394:	b120      	cbz	r0, d63a0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6396:	4629      	mov	r1, r5
   d6398:	7c20      	ldrb	r0, [r4, #16]
   d639a:	f7ff f8a7 	bl	d54ec <HAL_USB_USART_Send_Data>
    return 1;
   d639e:	2001      	movs	r0, #1
  }
  return 0;
}
   d63a0:	bd38      	pop	{r3, r4, r5, pc}

000d63a2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d63a2:	7c00      	ldrb	r0, [r0, #16]
   d63a4:	f7ff b8aa 	b.w	d54fc <HAL_USB_USART_Flush_Data>

000d63a8 <_ZN9USBSerialD0Ev>:
   d63a8:	b510      	push	{r4, lr}
   d63aa:	4604      	mov	r4, r0
   d63ac:	f7fd fe73 	bl	d4096 <_ZdlPv>
   d63b0:	4620      	mov	r0, r4
   d63b2:	bd10      	pop	{r4, pc}

000d63b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63b4:	b510      	push	{r4, lr}
   d63b6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d63b8:	2300      	movs	r3, #0
   d63ba:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63c0:	60a3      	str	r3, [r4, #8]
   d63c2:	4b05      	ldr	r3, [pc, #20]	; (d63d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d63c4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d63c6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63c8:	4608      	mov	r0, r1
{
  _serial = serial;
   d63ca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d63cc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d63ce:	4611      	mov	r1, r2
   d63d0:	f7ff f864 	bl	d549c <HAL_USB_USART_Init>
}
   d63d4:	4620      	mov	r0, r4
   d63d6:	bd10      	pop	{r4, pc}
   d63d8:	000d7c88 	.word	0x000d7c88

000d63dc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d63dc:	2200      	movs	r2, #0
   d63de:	7c00      	ldrb	r0, [r0, #16]
   d63e0:	f7ff b864 	b.w	d54ac <HAL_USB_USART_Begin>

000d63e4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d63e6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d63ea:	2100      	movs	r1, #0
   d63ec:	f001 fa05 	bl	d77fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d63f0:	4620      	mov	r0, r4
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d63f4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63f6:	4d0e      	ldr	r5, [pc, #56]	; (d6430 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d63f8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d63fa:	a801      	add	r0, sp, #4
   d63fc:	f7ff fff2 	bl	d63e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6400:	6829      	ldr	r1, [r5, #0]
   d6402:	f011 0401 	ands.w	r4, r1, #1
   d6406:	d110      	bne.n	d642a <_Z16_fetch_usbserialv+0x36>
   d6408:	4628      	mov	r0, r5
   d640a:	f7fd fe48 	bl	d409e <__cxa_guard_acquire>
   d640e:	b160      	cbz	r0, d642a <_Z16_fetch_usbserialv+0x36>
   d6410:	aa01      	add	r2, sp, #4
   d6412:	4621      	mov	r1, r4
   d6414:	4807      	ldr	r0, [pc, #28]	; (d6434 <_Z16_fetch_usbserialv+0x40>)
   d6416:	f7ff ffcd 	bl	d63b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d641a:	4628      	mov	r0, r5
   d641c:	f7fd fe44 	bl	d40a8 <__cxa_guard_release>
   d6420:	4a05      	ldr	r2, [pc, #20]	; (d6438 <_Z16_fetch_usbserialv+0x44>)
   d6422:	4906      	ldr	r1, [pc, #24]	; (d643c <_Z16_fetch_usbserialv+0x48>)
   d6424:	4803      	ldr	r0, [pc, #12]	; (d6434 <_Z16_fetch_usbserialv+0x40>)
   d6426:	f000 fb7f 	bl	d6b28 <__aeabi_atexit>
	return _usbserial;
}
   d642a:	4802      	ldr	r0, [pc, #8]	; (d6434 <_Z16_fetch_usbserialv+0x40>)
   d642c:	b007      	add	sp, #28
   d642e:	bd30      	pop	{r4, r5, pc}
   d6430:	2003e38c 	.word	0x2003e38c
   d6434:	2003e390 	.word	0x2003e390
   d6438:	2003e24c 	.word	0x2003e24c
   d643c:	000d6365 	.word	0x000d6365

000d6440 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6440:	2200      	movs	r2, #0
   d6442:	4611      	mov	r1, r2
   d6444:	6840      	ldr	r0, [r0, #4]
   d6446:	f7ff b8dd 	b.w	d5604 <network_ready>

000d644a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d644a:	2200      	movs	r2, #0
   d644c:	4611      	mov	r1, r2
   d644e:	6840      	ldr	r0, [r0, #4]
   d6450:	f7ff b8f8 	b.w	d5644 <network_listening>

000d6454 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6454:	2200      	movs	r2, #0
   d6456:	4611      	mov	r1, r2
   d6458:	6840      	ldr	r0, [r0, #4]
   d645a:	f7ff b903 	b.w	d5664 <network_get_listen_timeout>

000d645e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d645e:	2200      	movs	r2, #0
   d6460:	6840      	ldr	r0, [r0, #4]
   d6462:	f7ff b8f7 	b.w	d5654 <network_set_listen_timeout>

000d6466 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6466:	2200      	movs	r2, #0
   d6468:	f081 0101 	eor.w	r1, r1, #1
   d646c:	6840      	ldr	r0, [r0, #4]
   d646e:	f7ff b8e1 	b.w	d5634 <network_listen>

000d6472 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6472:	2300      	movs	r3, #0
   d6474:	461a      	mov	r2, r3
   d6476:	4619      	mov	r1, r3
   d6478:	6840      	ldr	r0, [r0, #4]
   d647a:	f7ff b8d3 	b.w	d5624 <network_off>

000d647e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d647e:	2300      	movs	r3, #0
   d6480:	461a      	mov	r2, r3
   d6482:	4619      	mov	r1, r3
   d6484:	6840      	ldr	r0, [r0, #4]
   d6486:	f7ff b8c5 	b.w	d5614 <network_on>

000d648a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d648a:	2200      	movs	r2, #0
   d648c:	4611      	mov	r1, r2
   d648e:	6840      	ldr	r0, [r0, #4]
   d6490:	f7ff b8a8 	b.w	d55e4 <network_connecting>

000d6494 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6494:	2200      	movs	r2, #0
   d6496:	2102      	movs	r1, #2
   d6498:	6840      	ldr	r0, [r0, #4]
   d649a:	f7ff b8ab 	b.w	d55f4 <network_disconnect>

000d649e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d649e:	2300      	movs	r3, #0
   d64a0:	461a      	mov	r2, r3
   d64a2:	6840      	ldr	r0, [r0, #4]
   d64a4:	f7ff b896 	b.w	d55d4 <network_connect>

000d64a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d64a8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d64aa:	4d0c      	ldr	r5, [pc, #48]	; (d64dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d64ac:	2428      	movs	r4, #40	; 0x28
   d64ae:	4622      	mov	r2, r4
   d64b0:	2100      	movs	r1, #0
   d64b2:	4628      	mov	r0, r5
   d64b4:	f001 f9a1 	bl	d77fa <memset>
        cid = -1;
   d64b8:	f04f 33ff 	mov.w	r3, #4294967295
   d64bc:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d64be:	802c      	strh	r4, [r5, #0]
   d64c0:	4d07      	ldr	r5, [pc, #28]	; (d64e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d64c2:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d64c4:	4628      	mov	r0, r5
   d64c6:	606b      	str	r3, [r5, #4]
   d64c8:	4b06      	ldr	r3, [pc, #24]	; (d64e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d64ca:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d64ce:	4622      	mov	r2, r4
   d64d0:	2100      	movs	r1, #0
   d64d2:	f001 f992 	bl	d77fa <memset>
        size = sizeof(*this);
   d64d6:	812c      	strh	r4, [r5, #8]
   d64d8:	bd38      	pop	{r3, r4, r5, pc}
   d64da:	bf00      	nop
   d64dc:	2003e3d4 	.word	0x2003e3d4
   d64e0:	2003e3a4 	.word	0x2003e3a4
   d64e4:	000d7cb8 	.word	0x000d7cb8

000d64e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d64e8:	4770      	bx	lr

000d64ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64ea:	7441      	strb	r1, [r0, #17]
   d64ec:	4770      	bx	lr

000d64ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d64ee:	7c00      	ldrb	r0, [r0, #16]
   d64f0:	f7fe bf64 	b.w	d53bc <HAL_USART_Available_Data_For_Write>

000d64f4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d64f4:	7c00      	ldrb	r0, [r0, #16]
   d64f6:	f7fe bf39 	b.w	d536c <HAL_USART_Available_Data>

000d64fa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d64fa:	7c00      	ldrb	r0, [r0, #16]
   d64fc:	f7fe bf46 	b.w	d538c <HAL_USART_Peek_Data>

000d6500 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6500:	7c00      	ldrb	r0, [r0, #16]
   d6502:	f7fe bf3b 	b.w	d537c <HAL_USART_Read_Data>

000d6506 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6506:	7c00      	ldrb	r0, [r0, #16]
   d6508:	f7fe bf48 	b.w	d539c <HAL_USART_Flush_Data>

000d650c <_ZN11USARTSerialD0Ev>:
   d650c:	b510      	push	{r4, lr}
   d650e:	4604      	mov	r4, r0
   d6510:	f7fd fdc1 	bl	d4096 <_ZdlPv>
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}

000d6518 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6518:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d651a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d651c:	4604      	mov	r4, r0
   d651e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6520:	b925      	cbnz	r5, d652c <_ZN11USARTSerial5writeEh+0x14>
   d6522:	7c00      	ldrb	r0, [r0, #16]
   d6524:	f7fe ff4a 	bl	d53bc <HAL_USART_Available_Data_For_Write>
   d6528:	2800      	cmp	r0, #0
   d652a:	dd05      	ble.n	d6538 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d652c:	4631      	mov	r1, r6
   d652e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6534:	f7fe bf12 	b.w	d535c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6538:	4628      	mov	r0, r5
   d653a:	bd70      	pop	{r4, r5, r6, pc}

000d653c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d653c:	b510      	push	{r4, lr}
   d653e:	4604      	mov	r4, r0
   d6540:	4608      	mov	r0, r1
   d6542:	4611      	mov	r1, r2
   d6544:	2200      	movs	r2, #0
   d6546:	6062      	str	r2, [r4, #4]
   d6548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d654c:	60a2      	str	r2, [r4, #8]
   d654e:	4a05      	ldr	r2, [pc, #20]	; (d6564 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6550:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6552:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6554:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6556:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6558:	461a      	mov	r2, r3
   d655a:	f7fe fef7 	bl	d534c <HAL_USART_Init>
}
   d655e:	4620      	mov	r0, r4
   d6560:	bd10      	pop	{r4, pc}
   d6562:	bf00      	nop
   d6564:	000d7cec 	.word	0x000d7cec

000d6568 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6568:	7c00      	ldrb	r0, [r0, #16]
   d656a:	f7fe bf1f 	b.w	d53ac <HAL_USART_Is_Enabled>
	...

000d6570 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6570:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6572:	4d0c      	ldr	r5, [pc, #48]	; (d65a4 <_Z22__fetch_global_Serial1v+0x34>)
   d6574:	6829      	ldr	r1, [r5, #0]
   d6576:	f011 0401 	ands.w	r4, r1, #1
   d657a:	d111      	bne.n	d65a0 <_Z22__fetch_global_Serial1v+0x30>
   d657c:	4628      	mov	r0, r5
   d657e:	f7fd fd8e 	bl	d409e <__cxa_guard_acquire>
   d6582:	b168      	cbz	r0, d65a0 <_Z22__fetch_global_Serial1v+0x30>
   d6584:	4a08      	ldr	r2, [pc, #32]	; (d65a8 <_Z22__fetch_global_Serial1v+0x38>)
   d6586:	4b09      	ldr	r3, [pc, #36]	; (d65ac <_Z22__fetch_global_Serial1v+0x3c>)
   d6588:	4809      	ldr	r0, [pc, #36]	; (d65b0 <_Z22__fetch_global_Serial1v+0x40>)
   d658a:	4621      	mov	r1, r4
   d658c:	f7ff ffd6 	bl	d653c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6590:	4628      	mov	r0, r5
   d6592:	f7fd fd89 	bl	d40a8 <__cxa_guard_release>
   d6596:	4a07      	ldr	r2, [pc, #28]	; (d65b4 <_Z22__fetch_global_Serial1v+0x44>)
   d6598:	4907      	ldr	r1, [pc, #28]	; (d65b8 <_Z22__fetch_global_Serial1v+0x48>)
   d659a:	4805      	ldr	r0, [pc, #20]	; (d65b0 <_Z22__fetch_global_Serial1v+0x40>)
   d659c:	f000 fac4 	bl	d6b28 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65a0:	4803      	ldr	r0, [pc, #12]	; (d65b0 <_Z22__fetch_global_Serial1v+0x40>)
   d65a2:	bd38      	pop	{r3, r4, r5, pc}
   d65a4:	2003e494 	.word	0x2003e494
   d65a8:	2003e498 	.word	0x2003e498
   d65ac:	2003e410 	.word	0x2003e410
   d65b0:	2003e3fc 	.word	0x2003e3fc
   d65b4:	2003e24c 	.word	0x2003e24c
   d65b8:	000d64e9 	.word	0x000d64e9

000d65bc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d65bc:	4770      	bx	lr

000d65be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d65be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65c0:	4606      	mov	r6, r0
   d65c2:	4615      	mov	r5, r2
   d65c4:	460c      	mov	r4, r1
   d65c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d65c8:	42bc      	cmp	r4, r7
   d65ca:	d006      	beq.n	d65da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d65cc:	6833      	ldr	r3, [r6, #0]
   d65ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d65d2:	689b      	ldr	r3, [r3, #8]
   d65d4:	4630      	mov	r0, r6
   d65d6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d65d8:	e7f6      	b.n	d65c8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d65da:	4628      	mov	r0, r5
   d65dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65de <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d65de:	2200      	movs	r2, #0
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	f7fe bf13 	b.w	d540c <HAL_I2C_Write_Data>

000d65e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d65e6:	2100      	movs	r1, #0
   d65e8:	7c00      	ldrb	r0, [r0, #16]
   d65ea:	f7fe bf17 	b.w	d541c <HAL_I2C_Available_Data>

000d65ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d65ee:	2100      	movs	r1, #0
   d65f0:	7c00      	ldrb	r0, [r0, #16]
   d65f2:	f7fe bf1b 	b.w	d542c <HAL_I2C_Read_Data>

000d65f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d65f6:	2100      	movs	r1, #0
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	f7fe bf1f 	b.w	d543c <HAL_I2C_Peek_Data>

000d65fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d65fe:	2100      	movs	r1, #0
   d6600:	7c00      	ldrb	r0, [r0, #16]
   d6602:	f7fe bf23 	b.w	d544c <HAL_I2C_Flush_Data>

000d6606 <_ZN7TwoWireD0Ev>:
   d6606:	b510      	push	{r4, lr}
   d6608:	4604      	mov	r4, r0
   d660a:	f7fd fd44 	bl	d4096 <_ZdlPv>
   d660e:	4620      	mov	r0, r4
   d6610:	bd10      	pop	{r4, pc}
	...

000d6614 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6614:	b510      	push	{r4, lr}
   d6616:	4604      	mov	r4, r0
   d6618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d661c:	4608      	mov	r0, r1
   d661e:	60a3      	str	r3, [r4, #8]
   d6620:	2100      	movs	r1, #0
   d6622:	4b04      	ldr	r3, [pc, #16]	; (d6634 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6624:	7420      	strb	r0, [r4, #16]
   d6626:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6628:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d662a:	f7fe ff1f 	bl	d546c <HAL_I2C_Init>

}
   d662e:	4620      	mov	r0, r4
   d6630:	bd10      	pop	{r4, pc}
   d6632:	bf00      	nop
   d6634:	000d7d1c 	.word	0x000d7d1c

000d6638 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6638:	2300      	movs	r3, #0
   d663a:	461a      	mov	r2, r3
   d663c:	4619      	mov	r1, r3
   d663e:	7c00      	ldrb	r0, [r0, #16]
   d6640:	f7fe bec4 	b.w	d53cc <HAL_I2C_Begin>

000d6644 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6644:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6646:	2400      	movs	r4, #0
   d6648:	7c00      	ldrb	r0, [r0, #16]
   d664a:	9400      	str	r4, [sp, #0]
   d664c:	f7fe fec6 	bl	d53dc <HAL_I2C_Request_Data>
  return result;
}
   d6650:	b2c0      	uxtb	r0, r0
   d6652:	b002      	add	sp, #8
   d6654:	bd10      	pop	{r4, pc}

000d6656 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d6656:	2301      	movs	r3, #1
   d6658:	f7ff bff4 	b.w	d6644 <_ZN7TwoWire11requestFromEhhh>

000d665c <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d665c:	2301      	movs	r3, #1
   d665e:	b2d2      	uxtb	r2, r2
   d6660:	b2c9      	uxtb	r1, r1
   d6662:	f7ff bfef 	b.w	d6644 <_ZN7TwoWire11requestFromEhhh>

000d6666 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d6666:	b2db      	uxtb	r3, r3
   d6668:	b2d2      	uxtb	r2, r2
   d666a:	b2c9      	uxtb	r1, r1
   d666c:	f7ff bfea 	b.w	d6644 <_ZN7TwoWire11requestFromEhhh>

000d6670 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6670:	2200      	movs	r2, #0
   d6672:	7c00      	ldrb	r0, [r0, #16]
   d6674:	f7fe beba 	b.w	d53ec <HAL_I2C_Begin_Transmission>

000d6678 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6678:	b2c9      	uxtb	r1, r1
   d667a:	f7ff bff9 	b.w	d6670 <_ZN7TwoWire17beginTransmissionEh>

000d667e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d667e:	2200      	movs	r2, #0
   d6680:	7c00      	ldrb	r0, [r0, #16]
   d6682:	f7fe bebb 	b.w	d53fc <HAL_I2C_End_Transmission>

000d6686 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6686:	2101      	movs	r1, #1
   d6688:	f7ff bff9 	b.w	d667e <_ZN7TwoWire15endTransmissionEh>

000d668c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d668c:	2100      	movs	r1, #0
   d668e:	7c00      	ldrb	r0, [r0, #16]
   d6690:	f7fe bee4 	b.w	d545c <HAL_I2C_Is_Enabled>

000d6694 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6694:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6696:	2100      	movs	r1, #0
   d6698:	7c00      	ldrb	r0, [r0, #16]
   d669a:	f7fe feef 	bl	d547c <HAL_I2C_Acquire>
}
   d669e:	fab0 f080 	clz	r0, r0
   d66a2:	0940      	lsrs	r0, r0, #5
   d66a4:	bd08      	pop	{r3, pc}

000d66a6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d66a6:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d66a8:	2100      	movs	r1, #0
   d66aa:	7c00      	ldrb	r0, [r0, #16]
   d66ac:	f7fe feee 	bl	d548c <HAL_I2C_Release>
}
   d66b0:	fab0 f080 	clz	r0, r0
   d66b4:	0940      	lsrs	r0, r0, #5
   d66b6:	bd08      	pop	{r3, pc}

000d66b8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d66b8:	2200      	movs	r2, #0
   d66ba:	4611      	mov	r1, r2
   d66bc:	6840      	ldr	r0, [r0, #4]
   d66be:	f7fe bfc1 	b.w	d5644 <network_listening>

000d66c2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d66c2:	2200      	movs	r2, #0
   d66c4:	4611      	mov	r1, r2
   d66c6:	6840      	ldr	r0, [r0, #4]
   d66c8:	f7fe bfcc 	b.w	d5664 <network_get_listen_timeout>

000d66cc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d66cc:	2200      	movs	r2, #0
   d66ce:	6840      	ldr	r0, [r0, #4]
   d66d0:	f7fe bfc0 	b.w	d5654 <network_set_listen_timeout>

000d66d4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d66d4:	2200      	movs	r2, #0
   d66d6:	f081 0101 	eor.w	r1, r1, #1
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	f7fe bfaa 	b.w	d5634 <network_listen>

000d66e0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d66e0:	2300      	movs	r3, #0
   d66e2:	461a      	mov	r2, r3
   d66e4:	4619      	mov	r1, r3
   d66e6:	6840      	ldr	r0, [r0, #4]
   d66e8:	f7fe bf9c 	b.w	d5624 <network_off>

000d66ec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d66ec:	2300      	movs	r3, #0
   d66ee:	461a      	mov	r2, r3
   d66f0:	4619      	mov	r1, r3
   d66f2:	6840      	ldr	r0, [r0, #4]
   d66f4:	f7fe bf8e 	b.w	d5614 <network_on>

000d66f8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d66f8:	2200      	movs	r2, #0
   d66fa:	4611      	mov	r1, r2
   d66fc:	6840      	ldr	r0, [r0, #4]
   d66fe:	f7fe bf81 	b.w	d5604 <network_ready>

000d6702 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6702:	2200      	movs	r2, #0
   d6704:	4611      	mov	r1, r2
   d6706:	6840      	ldr	r0, [r0, #4]
   d6708:	f7fe bf6c 	b.w	d55e4 <network_connecting>

000d670c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d670c:	2200      	movs	r2, #0
   d670e:	2102      	movs	r1, #2
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f7fe bf6f 	b.w	d55f4 <network_disconnect>

000d6716 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6716:	2300      	movs	r3, #0
   d6718:	461a      	mov	r2, r3
   d671a:	6840      	ldr	r0, [r0, #4]
   d671c:	f7fe bf5a 	b.w	d55d4 <network_connect>

000d6720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6720:	b110      	cbz	r0, d6728 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6722:	6803      	ldr	r3, [r0, #0]
   d6724:	685b      	ldr	r3, [r3, #4]
   d6726:	4718      	bx	r3
   d6728:	4770      	bx	lr

000d672a <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d672a:	b538      	push	{r3, r4, r5, lr}
   d672c:	4604      	mov	r4, r0
   d672e:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d6730:	b1d0      	cbz	r0, d6768 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d6732:	f7fe fdc3 	bl	d52bc <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d6736:	b9b8      	cbnz	r0, d6768 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d6738:	7c23      	ldrb	r3, [r4, #16]
   d673a:	b91b      	cbnz	r3, d6744 <_ZN6Thread7disposeEv+0x1a>
   d673c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d673e:	b108      	cbz	r0, d6744 <_ZN6Thread7disposeEv+0x1a>
   d6740:	f7fe fdc4 	bl	d52cc <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d6744:	6865      	ldr	r5, [r4, #4]
   d6746:	b155      	cbz	r5, d675e <_ZN6Thread7disposeEv+0x34>

    ~_Function_base()
    {
      if (_M_manager)
   d6748:	68ab      	ldr	r3, [r5, #8]
   d674a:	b11b      	cbz	r3, d6754 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d674c:	2203      	movs	r2, #3
   d674e:	4629      	mov	r1, r5
   d6750:	4628      	mov	r0, r5
   d6752:	4798      	blx	r3
            delete wrapper;
   d6754:	4628      	mov	r0, r5
   d6756:	f7fd fc9e 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d675a:	2300      	movs	r3, #0
   d675c:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d675e:	6820      	ldr	r0, [r4, #0]
   d6760:	f7fe fdbc 	bl	d52dc <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d6764:	2300      	movs	r3, #0
   d6766:	6023      	str	r3, [r4, #0]
   d6768:	bd38      	pop	{r3, r4, r5, pc}
	...

000d676c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d676c:	b538      	push	{r3, r4, r5, lr}
   d676e:	4b0b      	ldr	r3, [pc, #44]	; (d679c <_ZN5spark9MeshClassD1Ev+0x30>)
   d6770:	6003      	str	r3, [r0, #0]
   d6772:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6774:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6778:	b108      	cbz	r0, d677e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d677a:	f7fd fc8e 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d677e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6782:	b12d      	cbz	r5, d6790 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d6784:	4628      	mov	r0, r5
   d6786:	f7ff ffd0 	bl	d672a <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d678a:	4628      	mov	r0, r5
   d678c:	f7fd fc83 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6790:	68a0      	ldr	r0, [r4, #8]
   d6792:	b108      	cbz	r0, d6798 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d6794:	f7ff ffc4 	bl	d6720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d6798:	4620      	mov	r0, r4
   d679a:	bd38      	pop	{r3, r4, r5, pc}
   d679c:	000d7d44 	.word	0x000d7d44

000d67a0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d67a0:	b538      	push	{r3, r4, r5, lr}
   d67a2:	4c0d      	ldr	r4, [pc, #52]	; (d67d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d67a4:	4b0d      	ldr	r3, [pc, #52]	; (d67dc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d67a6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d67a8:	2500      	movs	r5, #0
   d67aa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d67ac:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d67b0:	6063      	str	r3, [r4, #4]
   d67b2:	60a5      	str	r5, [r4, #8]
   d67b4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67b8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d67bc:	f7fe fdae 	bl	d531c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d67c0:	4b07      	ldr	r3, [pc, #28]	; (d67e0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d67c2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d67c6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d67c8:	4620      	mov	r0, r4
   d67ca:	4a06      	ldr	r2, [pc, #24]	; (d67e4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d67cc:	4906      	ldr	r1, [pc, #24]	; (d67e8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d67ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d67d2:	f000 b9a9 	b.w	d6b28 <__aeabi_atexit>
   d67d6:	bf00      	nop
   d67d8:	2003e51c 	.word	0x2003e51c
   d67dc:	000d7d78 	.word	0x000d7d78
   d67e0:	000d7d44 	.word	0x000d7d44
   d67e4:	2003e24c 	.word	0x2003e24c
   d67e8:	000d676d 	.word	0x000d676d

000d67ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d67ec:	2300      	movs	r3, #0
   d67ee:	461a      	mov	r2, r3
   d67f0:	6840      	ldr	r0, [r0, #4]
   d67f2:	f7fe beef 	b.w	d55d4 <network_connect>

000d67f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d67f6:	2200      	movs	r2, #0
   d67f8:	2102      	movs	r1, #2
   d67fa:	6840      	ldr	r0, [r0, #4]
   d67fc:	f7fe befa 	b.w	d55f4 <network_disconnect>

000d6800 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6800:	2200      	movs	r2, #0
   d6802:	4611      	mov	r1, r2
   d6804:	6840      	ldr	r0, [r0, #4]
   d6806:	f7fe beed 	b.w	d55e4 <network_connecting>

000d680a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d680a:	2200      	movs	r2, #0
   d680c:	4611      	mov	r1, r2
   d680e:	6840      	ldr	r0, [r0, #4]
   d6810:	f7fe bef8 	b.w	d5604 <network_ready>

000d6814 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6814:	2300      	movs	r3, #0
   d6816:	461a      	mov	r2, r3
   d6818:	4619      	mov	r1, r3
   d681a:	6840      	ldr	r0, [r0, #4]
   d681c:	f7fe befa 	b.w	d5614 <network_on>

000d6820 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6820:	2300      	movs	r3, #0
   d6822:	461a      	mov	r2, r3
   d6824:	4619      	mov	r1, r3
   d6826:	6840      	ldr	r0, [r0, #4]
   d6828:	f7fe befc 	b.w	d5624 <network_off>

000d682c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d682c:	2200      	movs	r2, #0
   d682e:	f081 0101 	eor.w	r1, r1, #1
   d6832:	6840      	ldr	r0, [r0, #4]
   d6834:	f7fe befe 	b.w	d5634 <network_listen>

000d6838 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6838:	2200      	movs	r2, #0
   d683a:	6840      	ldr	r0, [r0, #4]
   d683c:	f7fe bf0a 	b.w	d5654 <network_set_listen_timeout>

000d6840 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6840:	2200      	movs	r2, #0
   d6842:	4611      	mov	r1, r2
   d6844:	6840      	ldr	r0, [r0, #4]
   d6846:	f7fe bf0d 	b.w	d5664 <network_get_listen_timeout>

000d684a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d684a:	2200      	movs	r2, #0
   d684c:	4611      	mov	r1, r2
   d684e:	6840      	ldr	r0, [r0, #4]
   d6850:	f7fe bef8 	b.w	d5644 <network_listening>

000d6854 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6854:	b570      	push	{r4, r5, r6, lr}
   d6856:	b08c      	sub	sp, #48	; 0x30
   d6858:	4614      	mov	r4, r2
   d685a:	4606      	mov	r6, r0
    IPAddress addr;
   d685c:	f7ff fd48 	bl	d62f0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6860:	ab0c      	add	r3, sp, #48	; 0x30
   d6862:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6864:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6866:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d686a:	4620      	mov	r0, r4
   d686c:	f7fe fc56 	bl	d511c <netdb_getaddrinfo>
    if (!r && ai) {
   d6870:	4601      	mov	r1, r0
   d6872:	bb58      	cbnz	r0, d68cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d6874:	9b00      	ldr	r3, [sp, #0]
   d6876:	b34b      	cbz	r3, d68cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d6878:	685a      	ldr	r2, [r3, #4]
   d687a:	2a02      	cmp	r2, #2
   d687c:	d00e      	beq.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d687e:	2a0a      	cmp	r2, #10
   d6880:	d124      	bne.n	d68cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d6882:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d6884:	2211      	movs	r2, #17
   d6886:	a801      	add	r0, sp, #4
   d6888:	f000 ffb7 	bl	d77fa <memset>
                a.v = 6;
   d688c:	2306      	movs	r3, #6
   d688e:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6892:	ad01      	add	r5, sp, #4
   d6894:	f104 0308 	add.w	r3, r4, #8
   d6898:	3418      	adds	r4, #24
   d689a:	e005      	b.n	d68a8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d689c:	6959      	ldr	r1, [r3, #20]
   d689e:	4630      	mov	r0, r6
   d68a0:	3104      	adds	r1, #4
   d68a2:	f7ff fd52 	bl	d634a <_ZN9IPAddressaSEPKh>
                break;
   d68a6:	e011      	b.n	d68cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d68a8:	6818      	ldr	r0, [r3, #0]
   d68aa:	6859      	ldr	r1, [r3, #4]
   d68ac:	462a      	mov	r2, r5
   d68ae:	c203      	stmia	r2!, {r0, r1}
   d68b0:	3308      	adds	r3, #8
   d68b2:	42a3      	cmp	r3, r4
   d68b4:	4615      	mov	r5, r2
   d68b6:	d1f7      	bne.n	d68a8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d68b8:	a901      	add	r1, sp, #4
   d68ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d68bc:	ad07      	add	r5, sp, #28
   d68be:	f7ff fd25 	bl	d630c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d68c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68c4:	1d34      	adds	r4, r6, #4
   d68c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68c8:	682b      	ldr	r3, [r5, #0]
   d68ca:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d68cc:	9800      	ldr	r0, [sp, #0]
   d68ce:	f7fe fc1d 	bl	d510c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d68d2:	4630      	mov	r0, r6
   d68d4:	b00c      	add	sp, #48	; 0x30
   d68d6:	bd70      	pop	{r4, r5, r6, pc}

000d68d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d68d8:	4b02      	ldr	r3, [pc, #8]	; (d68e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d68da:	4a03      	ldr	r2, [pc, #12]	; (d68e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d68dc:	601a      	str	r2, [r3, #0]
   d68de:	2200      	movs	r2, #0
   d68e0:	605a      	str	r2, [r3, #4]
   d68e2:	4770      	bx	lr
   d68e4:	2003e6ec 	.word	0x2003e6ec
   d68e8:	000d7d78 	.word	0x000d7d78

000d68ec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d68ec:	b510      	push	{r4, lr}
   d68ee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d68f0:	480f      	ldr	r0, [pc, #60]	; (d6930 <pinAvailable+0x44>)
   d68f2:	f7ff f84f 	bl	d5994 <_ZN8SPIClass9isEnabledEv>
   d68f6:	b128      	cbz	r0, d6904 <pinAvailable+0x18>
   d68f8:	f1a4 030b 	sub.w	r3, r4, #11
   d68fc:	2b02      	cmp	r3, #2
   d68fe:	d801      	bhi.n	d6904 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6900:	2000      	movs	r0, #0
   d6902:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6904:	f000 f8d0 	bl	d6aa8 <_Z19__fetch_global_Wirev>
   d6908:	f7ff fec0 	bl	d668c <_ZN7TwoWire9isEnabledEv>
   d690c:	b108      	cbz	r0, d6912 <pinAvailable+0x26>
   d690e:	2c01      	cmp	r4, #1
   d6910:	d9f6      	bls.n	d6900 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6912:	f7ff fe2d 	bl	d6570 <_Z22__fetch_global_Serial1v>
   d6916:	f7ff fe27 	bl	d6568 <_ZN11USARTSerial9isEnabledEv>
   d691a:	b118      	cbz	r0, d6924 <pinAvailable+0x38>
   d691c:	f1a4 0309 	sub.w	r3, r4, #9
   d6920:	2b01      	cmp	r3, #1
   d6922:	d9ed      	bls.n	d6900 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6924:	2c23      	cmp	r4, #35	; 0x23
   d6926:	bf8c      	ite	hi
   d6928:	2000      	movhi	r0, #0
   d692a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d692c:	bd10      	pop	{r4, pc}
   d692e:	bf00      	nop
   d6930:	2003e6f4 	.word	0x2003e6f4

000d6934 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6934:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6936:	b538      	push	{r3, r4, r5, lr}
   d6938:	4604      	mov	r4, r0
   d693a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d693c:	d80a      	bhi.n	d6954 <pinMode+0x20>
   d693e:	29ff      	cmp	r1, #255	; 0xff
   d6940:	d008      	beq.n	d6954 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6942:	f7ff ffd3 	bl	d68ec <pinAvailable>
   d6946:	b128      	cbz	r0, d6954 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6948:	4629      	mov	r1, r5
   d694a:	4620      	mov	r0, r4
}
   d694c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6950:	f7fe bbf4 	b.w	d513c <HAL_Pin_Mode>
   d6954:	bd38      	pop	{r3, r4, r5, pc}

000d6956 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6956:	b538      	push	{r3, r4, r5, lr}
   d6958:	4604      	mov	r4, r0
   d695a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d695c:	f7fe fbf6 	bl	d514c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6960:	28ff      	cmp	r0, #255	; 0xff
   d6962:	d010      	beq.n	d6986 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6964:	2806      	cmp	r0, #6
   d6966:	d804      	bhi.n	d6972 <digitalWrite+0x1c>
   d6968:	234d      	movs	r3, #77	; 0x4d
   d696a:	fa23 f000 	lsr.w	r0, r3, r0
   d696e:	07c3      	lsls	r3, r0, #31
   d6970:	d409      	bmi.n	d6986 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6972:	4620      	mov	r0, r4
   d6974:	f7ff ffba 	bl	d68ec <pinAvailable>
   d6978:	b128      	cbz	r0, d6986 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d697a:	4629      	mov	r1, r5
   d697c:	4620      	mov	r0, r4
}
   d697e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6982:	f7fe bbeb 	b.w	d515c <HAL_GPIO_Write>
   d6986:	bd38      	pop	{r3, r4, r5, pc}

000d6988 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6988:	b510      	push	{r4, lr}
   d698a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d698c:	f7fe fbde 	bl	d514c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6990:	3804      	subs	r0, #4
   d6992:	b2c0      	uxtb	r0, r0
   d6994:	2801      	cmp	r0, #1
   d6996:	d908      	bls.n	d69aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6998:	4620      	mov	r0, r4
   d699a:	f7ff ffa7 	bl	d68ec <pinAvailable>
   d699e:	b120      	cbz	r0, d69aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d69a0:	4620      	mov	r0, r4
}
   d69a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d69a6:	f7fe bbe1 	b.w	d516c <HAL_GPIO_Read>
}
   d69aa:	2000      	movs	r0, #0
   d69ac:	bd10      	pop	{r4, pc}

000d69ae <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d69ae:	f7fe bbe5 	b.w	d517c <HAL_Pulse_In>
	...

000d69b4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69b4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69b6:	4c0c      	ldr	r4, [pc, #48]	; (d69e8 <_GLOBAL__sub_I_SPI+0x34>)
   d69b8:	4e0c      	ldr	r6, [pc, #48]	; (d69ec <_GLOBAL__sub_I_SPI+0x38>)
   d69ba:	4d0d      	ldr	r5, [pc, #52]	; (d69f0 <_GLOBAL__sub_I_SPI+0x3c>)
   d69bc:	2100      	movs	r1, #0
   d69be:	4620      	mov	r0, r4
   d69c0:	f7fe ff5c 	bl	d587c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d69c4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69c6:	4c0b      	ldr	r4, [pc, #44]	; (d69f4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69c8:	4632      	mov	r2, r6
   d69ca:	4629      	mov	r1, r5
   d69cc:	f000 f8ac 	bl	d6b28 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69d0:	2101      	movs	r1, #1
   d69d2:	4620      	mov	r0, r4
   d69d4:	f7fe ff52 	bl	d587c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d69d8:	4632      	mov	r2, r6
   d69da:	4629      	mov	r1, r5
   d69dc:	4620      	mov	r0, r4
   d69de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d69e2:	f000 b8a1 	b.w	d6b28 <__aeabi_atexit>
   d69e6:	bf00      	nop
   d69e8:	2003e6f4 	.word	0x2003e6f4
   d69ec:	2003e24c 	.word	0x2003e24c
   d69f0:	000d586d 	.word	0x000d586d
   d69f4:	2003e704 	.word	0x2003e704

000d69f8 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d69f8:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d69fa:	4d1c      	ldr	r5, [pc, #112]	; (d6a6c <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d69fc:	b089      	sub	sp, #36	; 0x24
   d69fe:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d6a00:	6820      	ldr	r0, [r4, #0]
   d6a02:	f7fe fc13 	bl	d522c <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a06:	f7fe fc29 	bl	d525c <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d6a0a:	682b      	ldr	r3, [r5, #0]
   d6a0c:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d6a0e:	1ac0      	subs	r0, r0, r3
   d6a10:	4290      	cmp	r0, r2
   d6a12:	d3f5      	bcc.n	d6a00 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d6a14:	6823      	ldr	r3, [r4, #0]
   d6a16:	b333      	cbz	r3, d6a66 <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d6a18:	68e3      	ldr	r3, [r4, #12]
   d6a1a:	b323      	cbz	r3, d6a66 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a1c:	1d25      	adds	r5, r4, #4
   d6a1e:	6923      	ldr	r3, [r4, #16]
   d6a20:	4628      	mov	r0, r5
   d6a22:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a24:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6a26:	a904      	add	r1, sp, #16
   d6a28:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a2a:	9302      	str	r3, [sp, #8]
   d6a2c:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6a2e:	f7ff fac1 	bl	d5fb4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a32:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6a34:	9a06      	ldr	r2, [sp, #24]
   d6a36:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a38:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6a3a:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a3c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6a3e:	9307      	str	r3, [sp, #28]
   d6a40:	4629      	mov	r1, r5
   d6a42:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6a44:	9203      	str	r2, [sp, #12]
   d6a46:	f7ff fab5 	bl	d5fb4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a4a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6a4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a4e:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a50:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6a52:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a54:	a804      	add	r0, sp, #16
   d6a56:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a58:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6a5a:	9207      	str	r2, [sp, #28]
   d6a5c:	f7fd fb6d 	bl	d413a <_ZNSt14_Function_baseD1Ev>
   d6a60:	4668      	mov	r0, sp
   d6a62:	f7fd fb6a 	bl	d413a <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d6a66:	b009      	add	sp, #36	; 0x24
   d6a68:	bd30      	pop	{r4, r5, pc}
   d6a6a:	bf00      	nop
   d6a6c:	2003e714 	.word	0x2003e714

000d6a70 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d6a70:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d6a72:	f7ff ffc1 	bl	d69f8 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d6a76:	2000      	movs	r0, #0
}
   d6a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d6a7c:	f7fe bc2e 	b.w	d52dc <os_thread_cleanup>

000d6a80 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6a80:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6a82:	4c07      	ldr	r4, [pc, #28]	; (d6aa0 <_Z21__fetch_global_EEPROMv+0x20>)
   d6a84:	6823      	ldr	r3, [r4, #0]
   d6a86:	07db      	lsls	r3, r3, #31
   d6a88:	d408      	bmi.n	d6a9c <_Z21__fetch_global_EEPROMv+0x1c>
   d6a8a:	4620      	mov	r0, r4
   d6a8c:	f7fd fb07 	bl	d409e <__cxa_guard_acquire>
   d6a90:	b120      	cbz	r0, d6a9c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6a92:	f7fe fbeb 	bl	d526c <HAL_EEPROM_Init>
   d6a96:	4620      	mov	r0, r4
   d6a98:	f7fd fb06 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d6a9c:	4801      	ldr	r0, [pc, #4]	; (d6aa4 <_Z21__fetch_global_EEPROMv+0x24>)
   d6a9e:	bd10      	pop	{r4, pc}
   d6aa0:	2003e718 	.word	0x2003e718
   d6aa4:	2003e71c 	.word	0x2003e71c

000d6aa8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6aa8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6aaa:	4d0b      	ldr	r5, [pc, #44]	; (d6ad8 <_Z19__fetch_global_Wirev+0x30>)
   d6aac:	6829      	ldr	r1, [r5, #0]
   d6aae:	f011 0401 	ands.w	r4, r1, #1
   d6ab2:	d10f      	bne.n	d6ad4 <_Z19__fetch_global_Wirev+0x2c>
   d6ab4:	4628      	mov	r0, r5
   d6ab6:	f7fd faf2 	bl	d409e <__cxa_guard_acquire>
   d6aba:	b158      	cbz	r0, d6ad4 <_Z19__fetch_global_Wirev+0x2c>
   d6abc:	4621      	mov	r1, r4
   d6abe:	4807      	ldr	r0, [pc, #28]	; (d6adc <_Z19__fetch_global_Wirev+0x34>)
   d6ac0:	f7ff fda8 	bl	d6614 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6ac4:	4628      	mov	r0, r5
   d6ac6:	f7fd faef 	bl	d40a8 <__cxa_guard_release>
   d6aca:	4a05      	ldr	r2, [pc, #20]	; (d6ae0 <_Z19__fetch_global_Wirev+0x38>)
   d6acc:	4905      	ldr	r1, [pc, #20]	; (d6ae4 <_Z19__fetch_global_Wirev+0x3c>)
   d6ace:	4803      	ldr	r0, [pc, #12]	; (d6adc <_Z19__fetch_global_Wirev+0x34>)
   d6ad0:	f000 f82a 	bl	d6b28 <__aeabi_atexit>
	return wire;
}
   d6ad4:	4801      	ldr	r0, [pc, #4]	; (d6adc <_Z19__fetch_global_Wirev+0x34>)
   d6ad6:	bd38      	pop	{r3, r4, r5, pc}
   d6ad8:	2003e720 	.word	0x2003e720
   d6adc:	2003e738 	.word	0x2003e738
   d6ae0:	2003e24c 	.word	0x2003e24c
   d6ae4:	000d65bd 	.word	0x000d65bd

000d6ae8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d6ae8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d6aea:	4c0b      	ldr	r4, [pc, #44]	; (d6b18 <_Z20__fetch_global_Wire1v+0x30>)
   d6aec:	6823      	ldr	r3, [r4, #0]
   d6aee:	07db      	lsls	r3, r3, #31
   d6af0:	d40f      	bmi.n	d6b12 <_Z20__fetch_global_Wire1v+0x2a>
   d6af2:	4620      	mov	r0, r4
   d6af4:	f7fd fad3 	bl	d409e <__cxa_guard_acquire>
   d6af8:	b158      	cbz	r0, d6b12 <_Z20__fetch_global_Wire1v+0x2a>
   d6afa:	2101      	movs	r1, #1
   d6afc:	4807      	ldr	r0, [pc, #28]	; (d6b1c <_Z20__fetch_global_Wire1v+0x34>)
   d6afe:	f7ff fd89 	bl	d6614 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6b02:	4620      	mov	r0, r4
   d6b04:	f7fd fad0 	bl	d40a8 <__cxa_guard_release>
   d6b08:	4a05      	ldr	r2, [pc, #20]	; (d6b20 <_Z20__fetch_global_Wire1v+0x38>)
   d6b0a:	4906      	ldr	r1, [pc, #24]	; (d6b24 <_Z20__fetch_global_Wire1v+0x3c>)
   d6b0c:	4803      	ldr	r0, [pc, #12]	; (d6b1c <_Z20__fetch_global_Wire1v+0x34>)
   d6b0e:	f000 f80b 	bl	d6b28 <__aeabi_atexit>
	return wire;
}
   d6b12:	4802      	ldr	r0, [pc, #8]	; (d6b1c <_Z20__fetch_global_Wire1v+0x34>)
   d6b14:	bd10      	pop	{r4, pc}
   d6b16:	bf00      	nop
   d6b18:	2003e74c 	.word	0x2003e74c
   d6b1c:	2003e724 	.word	0x2003e724
   d6b20:	2003e24c 	.word	0x2003e24c
   d6b24:	000d65bd 	.word	0x000d65bd

000d6b28 <__aeabi_atexit>:
   d6b28:	460b      	mov	r3, r1
   d6b2a:	4601      	mov	r1, r0
   d6b2c:	4618      	mov	r0, r3
   d6b2e:	f000 be4b 	b.w	d77c8 <__cxa_atexit>

000d6b32 <_ZSt25__throw_bad_function_callv>:
   d6b32:	b508      	push	{r3, lr}
   d6b34:	f7fe fdce 	bl	d56d4 <abort>

000d6b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b38:	4b18      	ldr	r3, [pc, #96]	; (d6b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b3a:	681a      	ldr	r2, [r3, #0]
   d6b3c:	07d1      	lsls	r1, r2, #31
   d6b3e:	bf5c      	itt	pl
   d6b40:	2201      	movpl	r2, #1
   d6b42:	601a      	strpl	r2, [r3, #0]
   d6b44:	4b16      	ldr	r3, [pc, #88]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b46:	681a      	ldr	r2, [r3, #0]
   d6b48:	07d2      	lsls	r2, r2, #31
   d6b4a:	bf5c      	itt	pl
   d6b4c:	2201      	movpl	r2, #1
   d6b4e:	601a      	strpl	r2, [r3, #0]
   d6b50:	4b14      	ldr	r3, [pc, #80]	; (d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b52:	681a      	ldr	r2, [r3, #0]
   d6b54:	07d0      	lsls	r0, r2, #31
   d6b56:	bf5c      	itt	pl
   d6b58:	2201      	movpl	r2, #1
   d6b5a:	601a      	strpl	r2, [r3, #0]
   d6b5c:	4b12      	ldr	r3, [pc, #72]	; (d6ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b5e:	681a      	ldr	r2, [r3, #0]
   d6b60:	07d1      	lsls	r1, r2, #31
   d6b62:	bf5c      	itt	pl
   d6b64:	2201      	movpl	r2, #1
   d6b66:	601a      	strpl	r2, [r3, #0]
   d6b68:	4b10      	ldr	r3, [pc, #64]	; (d6bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b6a:	681a      	ldr	r2, [r3, #0]
   d6b6c:	07d2      	lsls	r2, r2, #31
   d6b6e:	bf5c      	itt	pl
   d6b70:	2201      	movpl	r2, #1
   d6b72:	601a      	strpl	r2, [r3, #0]
   d6b74:	4b0e      	ldr	r3, [pc, #56]	; (d6bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b76:	681a      	ldr	r2, [r3, #0]
   d6b78:	07d0      	lsls	r0, r2, #31
   d6b7a:	bf5c      	itt	pl
   d6b7c:	2201      	movpl	r2, #1
   d6b7e:	601a      	strpl	r2, [r3, #0]
   d6b80:	4b0c      	ldr	r3, [pc, #48]	; (d6bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b82:	681a      	ldr	r2, [r3, #0]
   d6b84:	07d1      	lsls	r1, r2, #31
   d6b86:	bf5c      	itt	pl
   d6b88:	2201      	movpl	r2, #1
   d6b8a:	601a      	strpl	r2, [r3, #0]
   d6b8c:	4b0a      	ldr	r3, [pc, #40]	; (d6bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b8e:	681a      	ldr	r2, [r3, #0]
   d6b90:	07d2      	lsls	r2, r2, #31
   d6b92:	bf5c      	itt	pl
   d6b94:	2201      	movpl	r2, #1
   d6b96:	601a      	strpl	r2, [r3, #0]
   d6b98:	4770      	bx	lr
   d6b9a:	bf00      	nop
   d6b9c:	2003e76c 	.word	0x2003e76c
   d6ba0:	2003e768 	.word	0x2003e768
   d6ba4:	2003e764 	.word	0x2003e764
   d6ba8:	2003e760 	.word	0x2003e760
   d6bac:	2003e75c 	.word	0x2003e75c
   d6bb0:	2003e758 	.word	0x2003e758
   d6bb4:	2003e754 	.word	0x2003e754
   d6bb8:	2003e750 	.word	0x2003e750

000d6bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6bbc:	4b24      	ldr	r3, [pc, #144]	; (d6c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6bbe:	681a      	ldr	r2, [r3, #0]
   d6bc0:	07d0      	lsls	r0, r2, #31
   d6bc2:	bf5c      	itt	pl
   d6bc4:	2201      	movpl	r2, #1
   d6bc6:	601a      	strpl	r2, [r3, #0]
   d6bc8:	4b22      	ldr	r3, [pc, #136]	; (d6c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6bca:	681a      	ldr	r2, [r3, #0]
   d6bcc:	07d1      	lsls	r1, r2, #31
   d6bce:	bf5c      	itt	pl
   d6bd0:	2201      	movpl	r2, #1
   d6bd2:	601a      	strpl	r2, [r3, #0]
   d6bd4:	4b20      	ldr	r3, [pc, #128]	; (d6c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6bd6:	681a      	ldr	r2, [r3, #0]
   d6bd8:	07d2      	lsls	r2, r2, #31
   d6bda:	bf5c      	itt	pl
   d6bdc:	2201      	movpl	r2, #1
   d6bde:	601a      	strpl	r2, [r3, #0]
   d6be0:	4b1e      	ldr	r3, [pc, #120]	; (d6c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6be2:	681a      	ldr	r2, [r3, #0]
   d6be4:	07d0      	lsls	r0, r2, #31
   d6be6:	bf5c      	itt	pl
   d6be8:	2201      	movpl	r2, #1
   d6bea:	601a      	strpl	r2, [r3, #0]
   d6bec:	4b1c      	ldr	r3, [pc, #112]	; (d6c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6bee:	681a      	ldr	r2, [r3, #0]
   d6bf0:	07d1      	lsls	r1, r2, #31
   d6bf2:	bf5c      	itt	pl
   d6bf4:	2201      	movpl	r2, #1
   d6bf6:	601a      	strpl	r2, [r3, #0]
   d6bf8:	4b1a      	ldr	r3, [pc, #104]	; (d6c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d2      	lsls	r2, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4b18      	ldr	r3, [pc, #96]	; (d6c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6c06:	681a      	ldr	r2, [r3, #0]
   d6c08:	07d0      	lsls	r0, r2, #31
   d6c0a:	bf5c      	itt	pl
   d6c0c:	2201      	movpl	r2, #1
   d6c0e:	601a      	strpl	r2, [r3, #0]
   d6c10:	4b16      	ldr	r3, [pc, #88]	; (d6c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6c12:	681a      	ldr	r2, [r3, #0]
   d6c14:	07d1      	lsls	r1, r2, #31
   d6c16:	bf5c      	itt	pl
   d6c18:	2201      	movpl	r2, #1
   d6c1a:	601a      	strpl	r2, [r3, #0]
   d6c1c:	4b14      	ldr	r3, [pc, #80]	; (d6c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6c1e:	681a      	ldr	r2, [r3, #0]
   d6c20:	07d2      	lsls	r2, r2, #31
   d6c22:	bf5c      	itt	pl
   d6c24:	2201      	movpl	r2, #1
   d6c26:	601a      	strpl	r2, [r3, #0]
   d6c28:	4b12      	ldr	r3, [pc, #72]	; (d6c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d0      	lsls	r0, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b10      	ldr	r3, [pc, #64]	; (d6c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d1      	lsls	r1, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4b0e      	ldr	r3, [pc, #56]	; (d6c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	07d2      	lsls	r2, r2, #31
   d6c46:	bf5c      	itt	pl
   d6c48:	2201      	movpl	r2, #1
   d6c4a:	601a      	strpl	r2, [r3, #0]
   d6c4c:	4770      	bx	lr
   d6c4e:	bf00      	nop
   d6c50:	2003e79c 	.word	0x2003e79c
   d6c54:	2003e798 	.word	0x2003e798
   d6c58:	2003e794 	.word	0x2003e794
   d6c5c:	2003e790 	.word	0x2003e790
   d6c60:	2003e78c 	.word	0x2003e78c
   d6c64:	2003e788 	.word	0x2003e788
   d6c68:	2003e784 	.word	0x2003e784
   d6c6c:	2003e780 	.word	0x2003e780
   d6c70:	2003e77c 	.word	0x2003e77c
   d6c74:	2003e778 	.word	0x2003e778
   d6c78:	2003e774 	.word	0x2003e774
   d6c7c:	2003e770 	.word	0x2003e770

000d6c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6c80:	4b24      	ldr	r3, [pc, #144]	; (d6d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6c82:	681a      	ldr	r2, [r3, #0]
   d6c84:	07d0      	lsls	r0, r2, #31
   d6c86:	bf5c      	itt	pl
   d6c88:	2201      	movpl	r2, #1
   d6c8a:	601a      	strpl	r2, [r3, #0]
   d6c8c:	4b22      	ldr	r3, [pc, #136]	; (d6d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6c8e:	681a      	ldr	r2, [r3, #0]
   d6c90:	07d1      	lsls	r1, r2, #31
   d6c92:	bf5c      	itt	pl
   d6c94:	2201      	movpl	r2, #1
   d6c96:	601a      	strpl	r2, [r3, #0]
   d6c98:	4b20      	ldr	r3, [pc, #128]	; (d6d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6c9a:	681a      	ldr	r2, [r3, #0]
   d6c9c:	07d2      	lsls	r2, r2, #31
   d6c9e:	bf5c      	itt	pl
   d6ca0:	2201      	movpl	r2, #1
   d6ca2:	601a      	strpl	r2, [r3, #0]
   d6ca4:	4b1e      	ldr	r3, [pc, #120]	; (d6d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6ca6:	681a      	ldr	r2, [r3, #0]
   d6ca8:	07d0      	lsls	r0, r2, #31
   d6caa:	bf5c      	itt	pl
   d6cac:	2201      	movpl	r2, #1
   d6cae:	601a      	strpl	r2, [r3, #0]
   d6cb0:	4b1c      	ldr	r3, [pc, #112]	; (d6d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6cb2:	681a      	ldr	r2, [r3, #0]
   d6cb4:	07d1      	lsls	r1, r2, #31
   d6cb6:	bf5c      	itt	pl
   d6cb8:	2201      	movpl	r2, #1
   d6cba:	601a      	strpl	r2, [r3, #0]
   d6cbc:	4b1a      	ldr	r3, [pc, #104]	; (d6d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cbe:	681a      	ldr	r2, [r3, #0]
   d6cc0:	07d2      	lsls	r2, r2, #31
   d6cc2:	bf5c      	itt	pl
   d6cc4:	2201      	movpl	r2, #1
   d6cc6:	601a      	strpl	r2, [r3, #0]
   d6cc8:	4b18      	ldr	r3, [pc, #96]	; (d6d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6cca:	681a      	ldr	r2, [r3, #0]
   d6ccc:	07d0      	lsls	r0, r2, #31
   d6cce:	bf5c      	itt	pl
   d6cd0:	2201      	movpl	r2, #1
   d6cd2:	601a      	strpl	r2, [r3, #0]
   d6cd4:	4b16      	ldr	r3, [pc, #88]	; (d6d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6cd6:	681a      	ldr	r2, [r3, #0]
   d6cd8:	07d1      	lsls	r1, r2, #31
   d6cda:	bf5c      	itt	pl
   d6cdc:	2201      	movpl	r2, #1
   d6cde:	601a      	strpl	r2, [r3, #0]
   d6ce0:	4b14      	ldr	r3, [pc, #80]	; (d6d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6ce2:	681a      	ldr	r2, [r3, #0]
   d6ce4:	07d2      	lsls	r2, r2, #31
   d6ce6:	bf5c      	itt	pl
   d6ce8:	2201      	movpl	r2, #1
   d6cea:	601a      	strpl	r2, [r3, #0]
   d6cec:	4b12      	ldr	r3, [pc, #72]	; (d6d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6cee:	681a      	ldr	r2, [r3, #0]
   d6cf0:	07d0      	lsls	r0, r2, #31
   d6cf2:	bf5c      	itt	pl
   d6cf4:	2201      	movpl	r2, #1
   d6cf6:	601a      	strpl	r2, [r3, #0]
   d6cf8:	4b10      	ldr	r3, [pc, #64]	; (d6d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6cfa:	681a      	ldr	r2, [r3, #0]
   d6cfc:	07d1      	lsls	r1, r2, #31
   d6cfe:	bf5c      	itt	pl
   d6d00:	2201      	movpl	r2, #1
   d6d02:	601a      	strpl	r2, [r3, #0]
   d6d04:	4b0e      	ldr	r3, [pc, #56]	; (d6d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6d06:	681a      	ldr	r2, [r3, #0]
   d6d08:	07d2      	lsls	r2, r2, #31
   d6d0a:	bf5c      	itt	pl
   d6d0c:	2201      	movpl	r2, #1
   d6d0e:	601a      	strpl	r2, [r3, #0]
   d6d10:	4770      	bx	lr
   d6d12:	bf00      	nop
   d6d14:	2003e7cc 	.word	0x2003e7cc
   d6d18:	2003e7c8 	.word	0x2003e7c8
   d6d1c:	2003e7c4 	.word	0x2003e7c4
   d6d20:	2003e7c0 	.word	0x2003e7c0
   d6d24:	2003e7bc 	.word	0x2003e7bc
   d6d28:	2003e7b8 	.word	0x2003e7b8
   d6d2c:	2003e7b4 	.word	0x2003e7b4
   d6d30:	2003e7b0 	.word	0x2003e7b0
   d6d34:	2003e7ac 	.word	0x2003e7ac
   d6d38:	2003e7a8 	.word	0x2003e7a8
   d6d3c:	2003e7a4 	.word	0x2003e7a4
   d6d40:	2003e7a0 	.word	0x2003e7a0

000d6d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d44:	4b18      	ldr	r3, [pc, #96]	; (d6da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d46:	681a      	ldr	r2, [r3, #0]
   d6d48:	07d1      	lsls	r1, r2, #31
   d6d4a:	bf5c      	itt	pl
   d6d4c:	2201      	movpl	r2, #1
   d6d4e:	601a      	strpl	r2, [r3, #0]
   d6d50:	4b16      	ldr	r3, [pc, #88]	; (d6dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d52:	681a      	ldr	r2, [r3, #0]
   d6d54:	07d2      	lsls	r2, r2, #31
   d6d56:	bf5c      	itt	pl
   d6d58:	2201      	movpl	r2, #1
   d6d5a:	601a      	strpl	r2, [r3, #0]
   d6d5c:	4b14      	ldr	r3, [pc, #80]	; (d6db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d5e:	681a      	ldr	r2, [r3, #0]
   d6d60:	07d0      	lsls	r0, r2, #31
   d6d62:	bf5c      	itt	pl
   d6d64:	2201      	movpl	r2, #1
   d6d66:	601a      	strpl	r2, [r3, #0]
   d6d68:	4b12      	ldr	r3, [pc, #72]	; (d6db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6d6a:	681a      	ldr	r2, [r3, #0]
   d6d6c:	07d1      	lsls	r1, r2, #31
   d6d6e:	bf5c      	itt	pl
   d6d70:	2201      	movpl	r2, #1
   d6d72:	601a      	strpl	r2, [r3, #0]
   d6d74:	4b10      	ldr	r3, [pc, #64]	; (d6db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6d76:	681a      	ldr	r2, [r3, #0]
   d6d78:	07d2      	lsls	r2, r2, #31
   d6d7a:	bf5c      	itt	pl
   d6d7c:	2201      	movpl	r2, #1
   d6d7e:	601a      	strpl	r2, [r3, #0]
   d6d80:	4b0e      	ldr	r3, [pc, #56]	; (d6dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d0      	lsls	r0, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b0c      	ldr	r3, [pc, #48]	; (d6dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d1      	lsls	r1, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4b0a      	ldr	r3, [pc, #40]	; (d6dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6d9a:	681a      	ldr	r2, [r3, #0]
   d6d9c:	07d2      	lsls	r2, r2, #31
   d6d9e:	bf5c      	itt	pl
   d6da0:	2201      	movpl	r2, #1
   d6da2:	601a      	strpl	r2, [r3, #0]
   d6da4:	4770      	bx	lr
   d6da6:	bf00      	nop
   d6da8:	2003e7ec 	.word	0x2003e7ec
   d6dac:	2003e7e8 	.word	0x2003e7e8
   d6db0:	2003e7e4 	.word	0x2003e7e4
   d6db4:	2003e7e0 	.word	0x2003e7e0
   d6db8:	2003e7dc 	.word	0x2003e7dc
   d6dbc:	2003e7d8 	.word	0x2003e7d8
   d6dc0:	2003e7d4 	.word	0x2003e7d4
   d6dc4:	2003e7d0 	.word	0x2003e7d0

000d6dc8 <__aeabi_drsub>:
   d6dc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6dcc:	e002      	b.n	d6dd4 <__adddf3>
   d6dce:	bf00      	nop

000d6dd0 <__aeabi_dsub>:
   d6dd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6dd4 <__adddf3>:
   d6dd4:	b530      	push	{r4, r5, lr}
   d6dd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6dda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6dde:	ea94 0f05 	teq	r4, r5
   d6de2:	bf08      	it	eq
   d6de4:	ea90 0f02 	teqeq	r0, r2
   d6de8:	bf1f      	itttt	ne
   d6dea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6dee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6df2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6df6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6dfa:	f000 80e2 	beq.w	d6fc2 <__adddf3+0x1ee>
   d6dfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6e02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6e06:	bfb8      	it	lt
   d6e08:	426d      	neglt	r5, r5
   d6e0a:	dd0c      	ble.n	d6e26 <__adddf3+0x52>
   d6e0c:	442c      	add	r4, r5
   d6e0e:	ea80 0202 	eor.w	r2, r0, r2
   d6e12:	ea81 0303 	eor.w	r3, r1, r3
   d6e16:	ea82 0000 	eor.w	r0, r2, r0
   d6e1a:	ea83 0101 	eor.w	r1, r3, r1
   d6e1e:	ea80 0202 	eor.w	r2, r0, r2
   d6e22:	ea81 0303 	eor.w	r3, r1, r3
   d6e26:	2d36      	cmp	r5, #54	; 0x36
   d6e28:	bf88      	it	hi
   d6e2a:	bd30      	pophi	{r4, r5, pc}
   d6e2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6e34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6e38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6e3c:	d002      	beq.n	d6e44 <__adddf3+0x70>
   d6e3e:	4240      	negs	r0, r0
   d6e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6e48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6e4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6e50:	d002      	beq.n	d6e58 <__adddf3+0x84>
   d6e52:	4252      	negs	r2, r2
   d6e54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6e58:	ea94 0f05 	teq	r4, r5
   d6e5c:	f000 80a7 	beq.w	d6fae <__adddf3+0x1da>
   d6e60:	f1a4 0401 	sub.w	r4, r4, #1
   d6e64:	f1d5 0e20 	rsbs	lr, r5, #32
   d6e68:	db0d      	blt.n	d6e86 <__adddf3+0xb2>
   d6e6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6e6e:	fa22 f205 	lsr.w	r2, r2, r5
   d6e72:	1880      	adds	r0, r0, r2
   d6e74:	f141 0100 	adc.w	r1, r1, #0
   d6e78:	fa03 f20e 	lsl.w	r2, r3, lr
   d6e7c:	1880      	adds	r0, r0, r2
   d6e7e:	fa43 f305 	asr.w	r3, r3, r5
   d6e82:	4159      	adcs	r1, r3
   d6e84:	e00e      	b.n	d6ea4 <__adddf3+0xd0>
   d6e86:	f1a5 0520 	sub.w	r5, r5, #32
   d6e8a:	f10e 0e20 	add.w	lr, lr, #32
   d6e8e:	2a01      	cmp	r2, #1
   d6e90:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6e94:	bf28      	it	cs
   d6e96:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6e9a:	fa43 f305 	asr.w	r3, r3, r5
   d6e9e:	18c0      	adds	r0, r0, r3
   d6ea0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ea8:	d507      	bpl.n	d6eba <__adddf3+0xe6>
   d6eaa:	f04f 0e00 	mov.w	lr, #0
   d6eae:	f1dc 0c00 	rsbs	ip, ip, #0
   d6eb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6eb6:	eb6e 0101 	sbc.w	r1, lr, r1
   d6eba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6ebe:	d31b      	bcc.n	d6ef8 <__adddf3+0x124>
   d6ec0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6ec4:	d30c      	bcc.n	d6ee0 <__adddf3+0x10c>
   d6ec6:	0849      	lsrs	r1, r1, #1
   d6ec8:	ea5f 0030 	movs.w	r0, r0, rrx
   d6ecc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ed0:	f104 0401 	add.w	r4, r4, #1
   d6ed4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6ed8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6edc:	f080 809a 	bcs.w	d7014 <__adddf3+0x240>
   d6ee0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6ee4:	bf08      	it	eq
   d6ee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6eea:	f150 0000 	adcs.w	r0, r0, #0
   d6eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ef2:	ea41 0105 	orr.w	r1, r1, r5
   d6ef6:	bd30      	pop	{r4, r5, pc}
   d6ef8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6efc:	4140      	adcs	r0, r0
   d6efe:	eb41 0101 	adc.w	r1, r1, r1
   d6f02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f06:	f1a4 0401 	sub.w	r4, r4, #1
   d6f0a:	d1e9      	bne.n	d6ee0 <__adddf3+0x10c>
   d6f0c:	f091 0f00 	teq	r1, #0
   d6f10:	bf04      	itt	eq
   d6f12:	4601      	moveq	r1, r0
   d6f14:	2000      	moveq	r0, #0
   d6f16:	fab1 f381 	clz	r3, r1
   d6f1a:	bf08      	it	eq
   d6f1c:	3320      	addeq	r3, #32
   d6f1e:	f1a3 030b 	sub.w	r3, r3, #11
   d6f22:	f1b3 0220 	subs.w	r2, r3, #32
   d6f26:	da0c      	bge.n	d6f42 <__adddf3+0x16e>
   d6f28:	320c      	adds	r2, #12
   d6f2a:	dd08      	ble.n	d6f3e <__adddf3+0x16a>
   d6f2c:	f102 0c14 	add.w	ip, r2, #20
   d6f30:	f1c2 020c 	rsb	r2, r2, #12
   d6f34:	fa01 f00c 	lsl.w	r0, r1, ip
   d6f38:	fa21 f102 	lsr.w	r1, r1, r2
   d6f3c:	e00c      	b.n	d6f58 <__adddf3+0x184>
   d6f3e:	f102 0214 	add.w	r2, r2, #20
   d6f42:	bfd8      	it	le
   d6f44:	f1c2 0c20 	rsble	ip, r2, #32
   d6f48:	fa01 f102 	lsl.w	r1, r1, r2
   d6f4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6f50:	bfdc      	itt	le
   d6f52:	ea41 010c 	orrle.w	r1, r1, ip
   d6f56:	4090      	lslle	r0, r2
   d6f58:	1ae4      	subs	r4, r4, r3
   d6f5a:	bfa2      	ittt	ge
   d6f5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6f60:	4329      	orrge	r1, r5
   d6f62:	bd30      	popge	{r4, r5, pc}
   d6f64:	ea6f 0404 	mvn.w	r4, r4
   d6f68:	3c1f      	subs	r4, #31
   d6f6a:	da1c      	bge.n	d6fa6 <__adddf3+0x1d2>
   d6f6c:	340c      	adds	r4, #12
   d6f6e:	dc0e      	bgt.n	d6f8e <__adddf3+0x1ba>
   d6f70:	f104 0414 	add.w	r4, r4, #20
   d6f74:	f1c4 0220 	rsb	r2, r4, #32
   d6f78:	fa20 f004 	lsr.w	r0, r0, r4
   d6f7c:	fa01 f302 	lsl.w	r3, r1, r2
   d6f80:	ea40 0003 	orr.w	r0, r0, r3
   d6f84:	fa21 f304 	lsr.w	r3, r1, r4
   d6f88:	ea45 0103 	orr.w	r1, r5, r3
   d6f8c:	bd30      	pop	{r4, r5, pc}
   d6f8e:	f1c4 040c 	rsb	r4, r4, #12
   d6f92:	f1c4 0220 	rsb	r2, r4, #32
   d6f96:	fa20 f002 	lsr.w	r0, r0, r2
   d6f9a:	fa01 f304 	lsl.w	r3, r1, r4
   d6f9e:	ea40 0003 	orr.w	r0, r0, r3
   d6fa2:	4629      	mov	r1, r5
   d6fa4:	bd30      	pop	{r4, r5, pc}
   d6fa6:	fa21 f004 	lsr.w	r0, r1, r4
   d6faa:	4629      	mov	r1, r5
   d6fac:	bd30      	pop	{r4, r5, pc}
   d6fae:	f094 0f00 	teq	r4, #0
   d6fb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6fb6:	bf06      	itte	eq
   d6fb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6fbc:	3401      	addeq	r4, #1
   d6fbe:	3d01      	subne	r5, #1
   d6fc0:	e74e      	b.n	d6e60 <__adddf3+0x8c>
   d6fc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6fc6:	bf18      	it	ne
   d6fc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6fcc:	d029      	beq.n	d7022 <__adddf3+0x24e>
   d6fce:	ea94 0f05 	teq	r4, r5
   d6fd2:	bf08      	it	eq
   d6fd4:	ea90 0f02 	teqeq	r0, r2
   d6fd8:	d005      	beq.n	d6fe6 <__adddf3+0x212>
   d6fda:	ea54 0c00 	orrs.w	ip, r4, r0
   d6fde:	bf04      	itt	eq
   d6fe0:	4619      	moveq	r1, r3
   d6fe2:	4610      	moveq	r0, r2
   d6fe4:	bd30      	pop	{r4, r5, pc}
   d6fe6:	ea91 0f03 	teq	r1, r3
   d6fea:	bf1e      	ittt	ne
   d6fec:	2100      	movne	r1, #0
   d6fee:	2000      	movne	r0, #0
   d6ff0:	bd30      	popne	{r4, r5, pc}
   d6ff2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6ff6:	d105      	bne.n	d7004 <__adddf3+0x230>
   d6ff8:	0040      	lsls	r0, r0, #1
   d6ffa:	4149      	adcs	r1, r1
   d6ffc:	bf28      	it	cs
   d6ffe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7002:	bd30      	pop	{r4, r5, pc}
   d7004:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7008:	bf3c      	itt	cc
   d700a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d700e:	bd30      	popcc	{r4, r5, pc}
   d7010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7014:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7018:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d701c:	f04f 0000 	mov.w	r0, #0
   d7020:	bd30      	pop	{r4, r5, pc}
   d7022:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7026:	bf1a      	itte	ne
   d7028:	4619      	movne	r1, r3
   d702a:	4610      	movne	r0, r2
   d702c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7030:	bf1c      	itt	ne
   d7032:	460b      	movne	r3, r1
   d7034:	4602      	movne	r2, r0
   d7036:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d703a:	bf06      	itte	eq
   d703c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7040:	ea91 0f03 	teqeq	r1, r3
   d7044:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7048:	bd30      	pop	{r4, r5, pc}
   d704a:	bf00      	nop

000d704c <__aeabi_ui2d>:
   d704c:	f090 0f00 	teq	r0, #0
   d7050:	bf04      	itt	eq
   d7052:	2100      	moveq	r1, #0
   d7054:	4770      	bxeq	lr
   d7056:	b530      	push	{r4, r5, lr}
   d7058:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d705c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7060:	f04f 0500 	mov.w	r5, #0
   d7064:	f04f 0100 	mov.w	r1, #0
   d7068:	e750      	b.n	d6f0c <__adddf3+0x138>
   d706a:	bf00      	nop

000d706c <__aeabi_i2d>:
   d706c:	f090 0f00 	teq	r0, #0
   d7070:	bf04      	itt	eq
   d7072:	2100      	moveq	r1, #0
   d7074:	4770      	bxeq	lr
   d7076:	b530      	push	{r4, r5, lr}
   d7078:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d707c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7080:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7084:	bf48      	it	mi
   d7086:	4240      	negmi	r0, r0
   d7088:	f04f 0100 	mov.w	r1, #0
   d708c:	e73e      	b.n	d6f0c <__adddf3+0x138>
   d708e:	bf00      	nop

000d7090 <__aeabi_f2d>:
   d7090:	0042      	lsls	r2, r0, #1
   d7092:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7096:	ea4f 0131 	mov.w	r1, r1, rrx
   d709a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d709e:	bf1f      	itttt	ne
   d70a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d70a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d70a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d70ac:	4770      	bxne	lr
   d70ae:	f092 0f00 	teq	r2, #0
   d70b2:	bf14      	ite	ne
   d70b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d70b8:	4770      	bxeq	lr
   d70ba:	b530      	push	{r4, r5, lr}
   d70bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d70c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d70c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d70c8:	e720      	b.n	d6f0c <__adddf3+0x138>
   d70ca:	bf00      	nop

000d70cc <__aeabi_ul2d>:
   d70cc:	ea50 0201 	orrs.w	r2, r0, r1
   d70d0:	bf08      	it	eq
   d70d2:	4770      	bxeq	lr
   d70d4:	b530      	push	{r4, r5, lr}
   d70d6:	f04f 0500 	mov.w	r5, #0
   d70da:	e00a      	b.n	d70f2 <__aeabi_l2d+0x16>

000d70dc <__aeabi_l2d>:
   d70dc:	ea50 0201 	orrs.w	r2, r0, r1
   d70e0:	bf08      	it	eq
   d70e2:	4770      	bxeq	lr
   d70e4:	b530      	push	{r4, r5, lr}
   d70e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d70ea:	d502      	bpl.n	d70f2 <__aeabi_l2d+0x16>
   d70ec:	4240      	negs	r0, r0
   d70ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d70f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d70f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d70fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d70fe:	f43f aedc 	beq.w	d6eba <__adddf3+0xe6>
   d7102:	f04f 0203 	mov.w	r2, #3
   d7106:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d710a:	bf18      	it	ne
   d710c:	3203      	addne	r2, #3
   d710e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7112:	bf18      	it	ne
   d7114:	3203      	addne	r2, #3
   d7116:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d711a:	f1c2 0320 	rsb	r3, r2, #32
   d711e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7122:	fa20 f002 	lsr.w	r0, r0, r2
   d7126:	fa01 fe03 	lsl.w	lr, r1, r3
   d712a:	ea40 000e 	orr.w	r0, r0, lr
   d712e:	fa21 f102 	lsr.w	r1, r1, r2
   d7132:	4414      	add	r4, r2
   d7134:	e6c1      	b.n	d6eba <__adddf3+0xe6>
   d7136:	bf00      	nop

000d7138 <__aeabi_dmul>:
   d7138:	b570      	push	{r4, r5, r6, lr}
   d713a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d713e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7146:	bf1d      	ittte	ne
   d7148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d714c:	ea94 0f0c 	teqne	r4, ip
   d7150:	ea95 0f0c 	teqne	r5, ip
   d7154:	f000 f8de 	bleq	d7314 <__aeabi_dmul+0x1dc>
   d7158:	442c      	add	r4, r5
   d715a:	ea81 0603 	eor.w	r6, r1, r3
   d715e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7162:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7166:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d716a:	bf18      	it	ne
   d716c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7170:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7178:	d038      	beq.n	d71ec <__aeabi_dmul+0xb4>
   d717a:	fba0 ce02 	umull	ip, lr, r0, r2
   d717e:	f04f 0500 	mov.w	r5, #0
   d7182:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7186:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d718a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d718e:	f04f 0600 	mov.w	r6, #0
   d7192:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7196:	f09c 0f00 	teq	ip, #0
   d719a:	bf18      	it	ne
   d719c:	f04e 0e01 	orrne.w	lr, lr, #1
   d71a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d71a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d71a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d71ac:	d204      	bcs.n	d71b8 <__aeabi_dmul+0x80>
   d71ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d71b2:	416d      	adcs	r5, r5
   d71b4:	eb46 0606 	adc.w	r6, r6, r6
   d71b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d71bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d71c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d71c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d71c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d71cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d71d0:	bf88      	it	hi
   d71d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d71d6:	d81e      	bhi.n	d7216 <__aeabi_dmul+0xde>
   d71d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d71dc:	bf08      	it	eq
   d71de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d71e2:	f150 0000 	adcs.w	r0, r0, #0
   d71e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71ea:	bd70      	pop	{r4, r5, r6, pc}
   d71ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d71f0:	ea46 0101 	orr.w	r1, r6, r1
   d71f4:	ea40 0002 	orr.w	r0, r0, r2
   d71f8:	ea81 0103 	eor.w	r1, r1, r3
   d71fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7200:	bfc2      	ittt	gt
   d7202:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7206:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d720a:	bd70      	popgt	{r4, r5, r6, pc}
   d720c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7210:	f04f 0e00 	mov.w	lr, #0
   d7214:	3c01      	subs	r4, #1
   d7216:	f300 80ab 	bgt.w	d7370 <__aeabi_dmul+0x238>
   d721a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d721e:	bfde      	ittt	le
   d7220:	2000      	movle	r0, #0
   d7222:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7226:	bd70      	pople	{r4, r5, r6, pc}
   d7228:	f1c4 0400 	rsb	r4, r4, #0
   d722c:	3c20      	subs	r4, #32
   d722e:	da35      	bge.n	d729c <__aeabi_dmul+0x164>
   d7230:	340c      	adds	r4, #12
   d7232:	dc1b      	bgt.n	d726c <__aeabi_dmul+0x134>
   d7234:	f104 0414 	add.w	r4, r4, #20
   d7238:	f1c4 0520 	rsb	r5, r4, #32
   d723c:	fa00 f305 	lsl.w	r3, r0, r5
   d7240:	fa20 f004 	lsr.w	r0, r0, r4
   d7244:	fa01 f205 	lsl.w	r2, r1, r5
   d7248:	ea40 0002 	orr.w	r0, r0, r2
   d724c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7254:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7258:	fa21 f604 	lsr.w	r6, r1, r4
   d725c:	eb42 0106 	adc.w	r1, r2, r6
   d7260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7264:	bf08      	it	eq
   d7266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d726a:	bd70      	pop	{r4, r5, r6, pc}
   d726c:	f1c4 040c 	rsb	r4, r4, #12
   d7270:	f1c4 0520 	rsb	r5, r4, #32
   d7274:	fa00 f304 	lsl.w	r3, r0, r4
   d7278:	fa20 f005 	lsr.w	r0, r0, r5
   d727c:	fa01 f204 	lsl.w	r2, r1, r4
   d7280:	ea40 0002 	orr.w	r0, r0, r2
   d7284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7288:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d728c:	f141 0100 	adc.w	r1, r1, #0
   d7290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7294:	bf08      	it	eq
   d7296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d729a:	bd70      	pop	{r4, r5, r6, pc}
   d729c:	f1c4 0520 	rsb	r5, r4, #32
   d72a0:	fa00 f205 	lsl.w	r2, r0, r5
   d72a4:	ea4e 0e02 	orr.w	lr, lr, r2
   d72a8:	fa20 f304 	lsr.w	r3, r0, r4
   d72ac:	fa01 f205 	lsl.w	r2, r1, r5
   d72b0:	ea43 0302 	orr.w	r3, r3, r2
   d72b4:	fa21 f004 	lsr.w	r0, r1, r4
   d72b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d72bc:	fa21 f204 	lsr.w	r2, r1, r4
   d72c0:	ea20 0002 	bic.w	r0, r0, r2
   d72c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d72c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d72cc:	bf08      	it	eq
   d72ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d72d2:	bd70      	pop	{r4, r5, r6, pc}
   d72d4:	f094 0f00 	teq	r4, #0
   d72d8:	d10f      	bne.n	d72fa <__aeabi_dmul+0x1c2>
   d72da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d72de:	0040      	lsls	r0, r0, #1
   d72e0:	eb41 0101 	adc.w	r1, r1, r1
   d72e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72e8:	bf08      	it	eq
   d72ea:	3c01      	subeq	r4, #1
   d72ec:	d0f7      	beq.n	d72de <__aeabi_dmul+0x1a6>
   d72ee:	ea41 0106 	orr.w	r1, r1, r6
   d72f2:	f095 0f00 	teq	r5, #0
   d72f6:	bf18      	it	ne
   d72f8:	4770      	bxne	lr
   d72fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d72fe:	0052      	lsls	r2, r2, #1
   d7300:	eb43 0303 	adc.w	r3, r3, r3
   d7304:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7308:	bf08      	it	eq
   d730a:	3d01      	subeq	r5, #1
   d730c:	d0f7      	beq.n	d72fe <__aeabi_dmul+0x1c6>
   d730e:	ea43 0306 	orr.w	r3, r3, r6
   d7312:	4770      	bx	lr
   d7314:	ea94 0f0c 	teq	r4, ip
   d7318:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d731c:	bf18      	it	ne
   d731e:	ea95 0f0c 	teqne	r5, ip
   d7322:	d00c      	beq.n	d733e <__aeabi_dmul+0x206>
   d7324:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7328:	bf18      	it	ne
   d732a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d732e:	d1d1      	bne.n	d72d4 <__aeabi_dmul+0x19c>
   d7330:	ea81 0103 	eor.w	r1, r1, r3
   d7334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7338:	f04f 0000 	mov.w	r0, #0
   d733c:	bd70      	pop	{r4, r5, r6, pc}
   d733e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7342:	bf06      	itte	eq
   d7344:	4610      	moveq	r0, r2
   d7346:	4619      	moveq	r1, r3
   d7348:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d734c:	d019      	beq.n	d7382 <__aeabi_dmul+0x24a>
   d734e:	ea94 0f0c 	teq	r4, ip
   d7352:	d102      	bne.n	d735a <__aeabi_dmul+0x222>
   d7354:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7358:	d113      	bne.n	d7382 <__aeabi_dmul+0x24a>
   d735a:	ea95 0f0c 	teq	r5, ip
   d735e:	d105      	bne.n	d736c <__aeabi_dmul+0x234>
   d7360:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7364:	bf1c      	itt	ne
   d7366:	4610      	movne	r0, r2
   d7368:	4619      	movne	r1, r3
   d736a:	d10a      	bne.n	d7382 <__aeabi_dmul+0x24a>
   d736c:	ea81 0103 	eor.w	r1, r1, r3
   d7370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7374:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d737c:	f04f 0000 	mov.w	r0, #0
   d7380:	bd70      	pop	{r4, r5, r6, pc}
   d7382:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7386:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d738a:	bd70      	pop	{r4, r5, r6, pc}

000d738c <__aeabi_ddiv>:
   d738c:	b570      	push	{r4, r5, r6, lr}
   d738e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7392:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7396:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d739a:	bf1d      	ittte	ne
   d739c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d73a0:	ea94 0f0c 	teqne	r4, ip
   d73a4:	ea95 0f0c 	teqne	r5, ip
   d73a8:	f000 f8a7 	bleq	d74fa <__aeabi_ddiv+0x16e>
   d73ac:	eba4 0405 	sub.w	r4, r4, r5
   d73b0:	ea81 0e03 	eor.w	lr, r1, r3
   d73b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d73b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d73bc:	f000 8088 	beq.w	d74d0 <__aeabi_ddiv+0x144>
   d73c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d73c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d73c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d73cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d73d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d73d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d73d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d73dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d73e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d73e4:	429d      	cmp	r5, r3
   d73e6:	bf08      	it	eq
   d73e8:	4296      	cmpeq	r6, r2
   d73ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d73ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d73f2:	d202      	bcs.n	d73fa <__aeabi_ddiv+0x6e>
   d73f4:	085b      	lsrs	r3, r3, #1
   d73f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d73fa:	1ab6      	subs	r6, r6, r2
   d73fc:	eb65 0503 	sbc.w	r5, r5, r3
   d7400:	085b      	lsrs	r3, r3, #1
   d7402:	ea4f 0232 	mov.w	r2, r2, rrx
   d7406:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d740a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d740e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7412:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7416:	bf22      	ittt	cs
   d7418:	1ab6      	subcs	r6, r6, r2
   d741a:	4675      	movcs	r5, lr
   d741c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7420:	085b      	lsrs	r3, r3, #1
   d7422:	ea4f 0232 	mov.w	r2, r2, rrx
   d7426:	ebb6 0e02 	subs.w	lr, r6, r2
   d742a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d742e:	bf22      	ittt	cs
   d7430:	1ab6      	subcs	r6, r6, r2
   d7432:	4675      	movcs	r5, lr
   d7434:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7438:	085b      	lsrs	r3, r3, #1
   d743a:	ea4f 0232 	mov.w	r2, r2, rrx
   d743e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7442:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7446:	bf22      	ittt	cs
   d7448:	1ab6      	subcs	r6, r6, r2
   d744a:	4675      	movcs	r5, lr
   d744c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7450:	085b      	lsrs	r3, r3, #1
   d7452:	ea4f 0232 	mov.w	r2, r2, rrx
   d7456:	ebb6 0e02 	subs.w	lr, r6, r2
   d745a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d745e:	bf22      	ittt	cs
   d7460:	1ab6      	subcs	r6, r6, r2
   d7462:	4675      	movcs	r5, lr
   d7464:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7468:	ea55 0e06 	orrs.w	lr, r5, r6
   d746c:	d018      	beq.n	d74a0 <__aeabi_ddiv+0x114>
   d746e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7472:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7476:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d747a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d747e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7482:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7486:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d748a:	d1c0      	bne.n	d740e <__aeabi_ddiv+0x82>
   d748c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7490:	d10b      	bne.n	d74aa <__aeabi_ddiv+0x11e>
   d7492:	ea41 0100 	orr.w	r1, r1, r0
   d7496:	f04f 0000 	mov.w	r0, #0
   d749a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d749e:	e7b6      	b.n	d740e <__aeabi_ddiv+0x82>
   d74a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d74a4:	bf04      	itt	eq
   d74a6:	4301      	orreq	r1, r0
   d74a8:	2000      	moveq	r0, #0
   d74aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74ae:	bf88      	it	hi
   d74b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74b4:	f63f aeaf 	bhi.w	d7216 <__aeabi_dmul+0xde>
   d74b8:	ebb5 0c03 	subs.w	ip, r5, r3
   d74bc:	bf04      	itt	eq
   d74be:	ebb6 0c02 	subseq.w	ip, r6, r2
   d74c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d74c6:	f150 0000 	adcs.w	r0, r0, #0
   d74ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74ce:	bd70      	pop	{r4, r5, r6, pc}
   d74d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d74d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d74d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d74dc:	bfc2      	ittt	gt
   d74de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74e6:	bd70      	popgt	{r4, r5, r6, pc}
   d74e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74ec:	f04f 0e00 	mov.w	lr, #0
   d74f0:	3c01      	subs	r4, #1
   d74f2:	e690      	b.n	d7216 <__aeabi_dmul+0xde>
   d74f4:	ea45 0e06 	orr.w	lr, r5, r6
   d74f8:	e68d      	b.n	d7216 <__aeabi_dmul+0xde>
   d74fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d74fe:	ea94 0f0c 	teq	r4, ip
   d7502:	bf08      	it	eq
   d7504:	ea95 0f0c 	teqeq	r5, ip
   d7508:	f43f af3b 	beq.w	d7382 <__aeabi_dmul+0x24a>
   d750c:	ea94 0f0c 	teq	r4, ip
   d7510:	d10a      	bne.n	d7528 <__aeabi_ddiv+0x19c>
   d7512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7516:	f47f af34 	bne.w	d7382 <__aeabi_dmul+0x24a>
   d751a:	ea95 0f0c 	teq	r5, ip
   d751e:	f47f af25 	bne.w	d736c <__aeabi_dmul+0x234>
   d7522:	4610      	mov	r0, r2
   d7524:	4619      	mov	r1, r3
   d7526:	e72c      	b.n	d7382 <__aeabi_dmul+0x24a>
   d7528:	ea95 0f0c 	teq	r5, ip
   d752c:	d106      	bne.n	d753c <__aeabi_ddiv+0x1b0>
   d752e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7532:	f43f aefd 	beq.w	d7330 <__aeabi_dmul+0x1f8>
   d7536:	4610      	mov	r0, r2
   d7538:	4619      	mov	r1, r3
   d753a:	e722      	b.n	d7382 <__aeabi_dmul+0x24a>
   d753c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7540:	bf18      	it	ne
   d7542:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7546:	f47f aec5 	bne.w	d72d4 <__aeabi_dmul+0x19c>
   d754a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d754e:	f47f af0d 	bne.w	d736c <__aeabi_dmul+0x234>
   d7552:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7556:	f47f aeeb 	bne.w	d7330 <__aeabi_dmul+0x1f8>
   d755a:	e712      	b.n	d7382 <__aeabi_dmul+0x24a>

000d755c <__gedf2>:
   d755c:	f04f 3cff 	mov.w	ip, #4294967295
   d7560:	e006      	b.n	d7570 <__cmpdf2+0x4>
   d7562:	bf00      	nop

000d7564 <__ledf2>:
   d7564:	f04f 0c01 	mov.w	ip, #1
   d7568:	e002      	b.n	d7570 <__cmpdf2+0x4>
   d756a:	bf00      	nop

000d756c <__cmpdf2>:
   d756c:	f04f 0c01 	mov.w	ip, #1
   d7570:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7574:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d757c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7580:	bf18      	it	ne
   d7582:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7586:	d01b      	beq.n	d75c0 <__cmpdf2+0x54>
   d7588:	b001      	add	sp, #4
   d758a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d758e:	bf0c      	ite	eq
   d7590:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7594:	ea91 0f03 	teqne	r1, r3
   d7598:	bf02      	ittt	eq
   d759a:	ea90 0f02 	teqeq	r0, r2
   d759e:	2000      	moveq	r0, #0
   d75a0:	4770      	bxeq	lr
   d75a2:	f110 0f00 	cmn.w	r0, #0
   d75a6:	ea91 0f03 	teq	r1, r3
   d75aa:	bf58      	it	pl
   d75ac:	4299      	cmppl	r1, r3
   d75ae:	bf08      	it	eq
   d75b0:	4290      	cmpeq	r0, r2
   d75b2:	bf2c      	ite	cs
   d75b4:	17d8      	asrcs	r0, r3, #31
   d75b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d75ba:	f040 0001 	orr.w	r0, r0, #1
   d75be:	4770      	bx	lr
   d75c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d75c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d75c8:	d102      	bne.n	d75d0 <__cmpdf2+0x64>
   d75ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d75ce:	d107      	bne.n	d75e0 <__cmpdf2+0x74>
   d75d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d75d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d75d8:	d1d6      	bne.n	d7588 <__cmpdf2+0x1c>
   d75da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d75de:	d0d3      	beq.n	d7588 <__cmpdf2+0x1c>
   d75e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d75e4:	4770      	bx	lr
   d75e6:	bf00      	nop

000d75e8 <__aeabi_cdrcmple>:
   d75e8:	4684      	mov	ip, r0
   d75ea:	4610      	mov	r0, r2
   d75ec:	4662      	mov	r2, ip
   d75ee:	468c      	mov	ip, r1
   d75f0:	4619      	mov	r1, r3
   d75f2:	4663      	mov	r3, ip
   d75f4:	e000      	b.n	d75f8 <__aeabi_cdcmpeq>
   d75f6:	bf00      	nop

000d75f8 <__aeabi_cdcmpeq>:
   d75f8:	b501      	push	{r0, lr}
   d75fa:	f7ff ffb7 	bl	d756c <__cmpdf2>
   d75fe:	2800      	cmp	r0, #0
   d7600:	bf48      	it	mi
   d7602:	f110 0f00 	cmnmi.w	r0, #0
   d7606:	bd01      	pop	{r0, pc}

000d7608 <__aeabi_dcmpeq>:
   d7608:	f84d ed08 	str.w	lr, [sp, #-8]!
   d760c:	f7ff fff4 	bl	d75f8 <__aeabi_cdcmpeq>
   d7610:	bf0c      	ite	eq
   d7612:	2001      	moveq	r0, #1
   d7614:	2000      	movne	r0, #0
   d7616:	f85d fb08 	ldr.w	pc, [sp], #8
   d761a:	bf00      	nop

000d761c <__aeabi_dcmplt>:
   d761c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7620:	f7ff ffea 	bl	d75f8 <__aeabi_cdcmpeq>
   d7624:	bf34      	ite	cc
   d7626:	2001      	movcc	r0, #1
   d7628:	2000      	movcs	r0, #0
   d762a:	f85d fb08 	ldr.w	pc, [sp], #8
   d762e:	bf00      	nop

000d7630 <__aeabi_dcmple>:
   d7630:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7634:	f7ff ffe0 	bl	d75f8 <__aeabi_cdcmpeq>
   d7638:	bf94      	ite	ls
   d763a:	2001      	movls	r0, #1
   d763c:	2000      	movhi	r0, #0
   d763e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7642:	bf00      	nop

000d7644 <__aeabi_dcmpge>:
   d7644:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7648:	f7ff ffce 	bl	d75e8 <__aeabi_cdrcmple>
   d764c:	bf94      	ite	ls
   d764e:	2001      	movls	r0, #1
   d7650:	2000      	movhi	r0, #0
   d7652:	f85d fb08 	ldr.w	pc, [sp], #8
   d7656:	bf00      	nop

000d7658 <__aeabi_dcmpgt>:
   d7658:	f84d ed08 	str.w	lr, [sp, #-8]!
   d765c:	f7ff ffc4 	bl	d75e8 <__aeabi_cdrcmple>
   d7660:	bf34      	ite	cc
   d7662:	2001      	movcc	r0, #1
   d7664:	2000      	movcs	r0, #0
   d7666:	f85d fb08 	ldr.w	pc, [sp], #8
   d766a:	bf00      	nop

000d766c <__aeabi_dcmpun>:
   d766c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7674:	d102      	bne.n	d767c <__aeabi_dcmpun+0x10>
   d7676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d767a:	d10a      	bne.n	d7692 <__aeabi_dcmpun+0x26>
   d767c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7684:	d102      	bne.n	d768c <__aeabi_dcmpun+0x20>
   d7686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d768a:	d102      	bne.n	d7692 <__aeabi_dcmpun+0x26>
   d768c:	f04f 0000 	mov.w	r0, #0
   d7690:	4770      	bx	lr
   d7692:	f04f 0001 	mov.w	r0, #1
   d7696:	4770      	bx	lr

000d7698 <__aeabi_d2iz>:
   d7698:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d769c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d76a0:	d215      	bcs.n	d76ce <__aeabi_d2iz+0x36>
   d76a2:	d511      	bpl.n	d76c8 <__aeabi_d2iz+0x30>
   d76a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d76a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d76ac:	d912      	bls.n	d76d4 <__aeabi_d2iz+0x3c>
   d76ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d76b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d76b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d76ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d76be:	fa23 f002 	lsr.w	r0, r3, r2
   d76c2:	bf18      	it	ne
   d76c4:	4240      	negne	r0, r0
   d76c6:	4770      	bx	lr
   d76c8:	f04f 0000 	mov.w	r0, #0
   d76cc:	4770      	bx	lr
   d76ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d76d2:	d105      	bne.n	d76e0 <__aeabi_d2iz+0x48>
   d76d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d76d8:	bf08      	it	eq
   d76da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d76de:	4770      	bx	lr
   d76e0:	f04f 0000 	mov.w	r0, #0
   d76e4:	4770      	bx	lr
   d76e6:	bf00      	nop

000d76e8 <__aeabi_d2uiz>:
   d76e8:	004a      	lsls	r2, r1, #1
   d76ea:	d211      	bcs.n	d7710 <__aeabi_d2uiz+0x28>
   d76ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d76f0:	d211      	bcs.n	d7716 <__aeabi_d2uiz+0x2e>
   d76f2:	d50d      	bpl.n	d7710 <__aeabi_d2uiz+0x28>
   d76f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d76f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d76fc:	d40e      	bmi.n	d771c <__aeabi_d2uiz+0x34>
   d76fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7706:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d770a:	fa23 f002 	lsr.w	r0, r3, r2
   d770e:	4770      	bx	lr
   d7710:	f04f 0000 	mov.w	r0, #0
   d7714:	4770      	bx	lr
   d7716:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d771a:	d102      	bne.n	d7722 <__aeabi_d2uiz+0x3a>
   d771c:	f04f 30ff 	mov.w	r0, #4294967295
   d7720:	4770      	bx	lr
   d7722:	f04f 0000 	mov.w	r0, #0
   d7726:	4770      	bx	lr

000d7728 <__aeabi_d2f>:
   d7728:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d772c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7730:	bf24      	itt	cs
   d7732:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7736:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d773a:	d90d      	bls.n	d7758 <__aeabi_d2f+0x30>
   d773c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7740:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7744:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7748:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d774c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7750:	bf08      	it	eq
   d7752:	f020 0001 	biceq.w	r0, r0, #1
   d7756:	4770      	bx	lr
   d7758:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d775c:	d121      	bne.n	d77a2 <__aeabi_d2f+0x7a>
   d775e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7762:	bfbc      	itt	lt
   d7764:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7768:	4770      	bxlt	lr
   d776a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d776e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7772:	f1c2 0218 	rsb	r2, r2, #24
   d7776:	f1c2 0c20 	rsb	ip, r2, #32
   d777a:	fa10 f30c 	lsls.w	r3, r0, ip
   d777e:	fa20 f002 	lsr.w	r0, r0, r2
   d7782:	bf18      	it	ne
   d7784:	f040 0001 	orrne.w	r0, r0, #1
   d7788:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d778c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7790:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7794:	ea40 000c 	orr.w	r0, r0, ip
   d7798:	fa23 f302 	lsr.w	r3, r3, r2
   d779c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d77a0:	e7cc      	b.n	d773c <__aeabi_d2f+0x14>
   d77a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d77a6:	d107      	bne.n	d77b8 <__aeabi_d2f+0x90>
   d77a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d77ac:	bf1e      	ittt	ne
   d77ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d77b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d77b6:	4770      	bxne	lr
   d77b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d77bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d77c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d77c4:	4770      	bx	lr
   d77c6:	bf00      	nop

000d77c8 <__cxa_atexit>:
   d77c8:	b510      	push	{r4, lr}
   d77ca:	4c05      	ldr	r4, [pc, #20]	; (d77e0 <__cxa_atexit+0x18>)
   d77cc:	4613      	mov	r3, r2
   d77ce:	b12c      	cbz	r4, d77dc <__cxa_atexit+0x14>
   d77d0:	460a      	mov	r2, r1
   d77d2:	4601      	mov	r1, r0
   d77d4:	2002      	movs	r0, #2
   d77d6:	f3af 8000 	nop.w
   d77da:	bd10      	pop	{r4, pc}
   d77dc:	4620      	mov	r0, r4
   d77de:	bd10      	pop	{r4, pc}
   d77e0:	00000000 	.word	0x00000000

000d77e4 <memcpy>:
   d77e4:	b510      	push	{r4, lr}
   d77e6:	1e43      	subs	r3, r0, #1
   d77e8:	440a      	add	r2, r1
   d77ea:	4291      	cmp	r1, r2
   d77ec:	d004      	beq.n	d77f8 <memcpy+0x14>
   d77ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77f6:	e7f8      	b.n	d77ea <memcpy+0x6>
   d77f8:	bd10      	pop	{r4, pc}

000d77fa <memset>:
   d77fa:	4402      	add	r2, r0
   d77fc:	4603      	mov	r3, r0
   d77fe:	4293      	cmp	r3, r2
   d7800:	d002      	beq.n	d7808 <memset+0xe>
   d7802:	f803 1b01 	strb.w	r1, [r3], #1
   d7806:	e7fa      	b.n	d77fe <memset+0x4>
   d7808:	4770      	bx	lr
	...

000d780c <srand>:
   d780c:	b538      	push	{r3, r4, r5, lr}
   d780e:	4b12      	ldr	r3, [pc, #72]	; (d7858 <srand+0x4c>)
   d7810:	681c      	ldr	r4, [r3, #0]
   d7812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7814:	4605      	mov	r5, r0
   d7816:	b9d3      	cbnz	r3, d784e <srand+0x42>
   d7818:	2018      	movs	r0, #24
   d781a:	f7fd ff3b 	bl	d5694 <malloc>
   d781e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7822:	63a0      	str	r0, [r4, #56]	; 0x38
   d7824:	8003      	strh	r3, [r0, #0]
   d7826:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d782a:	8043      	strh	r3, [r0, #2]
   d782c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7830:	8083      	strh	r3, [r0, #4]
   d7832:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7836:	80c3      	strh	r3, [r0, #6]
   d7838:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d783c:	8103      	strh	r3, [r0, #8]
   d783e:	2305      	movs	r3, #5
   d7840:	8143      	strh	r3, [r0, #10]
   d7842:	230b      	movs	r3, #11
   d7844:	8183      	strh	r3, [r0, #12]
   d7846:	2201      	movs	r2, #1
   d7848:	2300      	movs	r3, #0
   d784a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d784e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7850:	2200      	movs	r2, #0
   d7852:	611d      	str	r5, [r3, #16]
   d7854:	615a      	str	r2, [r3, #20]
   d7856:	bd38      	pop	{r3, r4, r5, pc}
   d7858:	2003e248 	.word	0x2003e248

000d785c <strcpy>:
   d785c:	4603      	mov	r3, r0
   d785e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7862:	f803 2b01 	strb.w	r2, [r3], #1
   d7866:	2a00      	cmp	r2, #0
   d7868:	d1f9      	bne.n	d785e <strcpy+0x2>
   d786a:	4770      	bx	lr

000d786c <strlen>:
   d786c:	4603      	mov	r3, r0
   d786e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7872:	2a00      	cmp	r2, #0
   d7874:	d1fb      	bne.n	d786e <strlen+0x2>
   d7876:	1a18      	subs	r0, r3, r0
   d7878:	3801      	subs	r0, #1
   d787a:	4770      	bx	lr

000d787c <dynalib_user>:
   d787c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d788c:	0000 0000 6157 6374 6468 676f 7420 6d69     ....Watchdog tim
   d789c:	6f65 7475 2e00 4100 454e 4f4d 454d 4554     eout...ANEMOMETE
   d78ac:	2052 4400 5448 0020 5245 4f52 3a52 4320     R .DHT .ERROR: C
   d78bc:	756f 646c 6e20 746f 6720 7465 6920 696e     ould not get ini
   d78cc:	6974 6c61 7720 6e69 2064 6572 6461 6e69     tial wind readin
   d78dc:	0067 6557 7461 6568 2072 7453 7461 6f69     g.Weather Statio
   d78ec:	006e 6544 6976 6563 4920 3a44 2520 0073     n.Device ID: %s.
   d78fc:	7953 7473 6d65 7620 7265 6973 6e6f 203a     System version: 
   d790c:	7325 4900 706e 7475 5620 6c6f 6174 6567     %s.Input Voltage
   d791c:	4c20 6d69 7469 203a 6425 4900 706e 7475      Limit: %d.Input
   d792c:	4320 7275 6572 746e 4c20 6d69 7469 203a      Current Limit: 
   d793c:	6425 4d00 6e69 6d69 6d75 5320 7379 6574     %d.Minimum Syste
   d794c:	206d 6f56 746c 6761 3a65 2520 0064 6843     m Voltage: %d.Ch
   d795c:	7261 6567 4320 7275 6572 746e 203a 6425     arge Current: %d
   d796c:	4300 6168 6772 2065 6f56 746c 6761 3a65     .Charge Voltage:
   d797c:	2520 0064 6843 7261 6567 203a 5600 6c6f      %d.Charge: .Vol
   d798c:	6174 6567 203a 4300 6d6f 6170 7373 6920     tage: .Compass i
   d799c:	696e 6974 6c61 7a69 6e69 0067 6f43 706d     nitializing.Comp
   d79ac:	7361 2073 6e69 7469 6169 656c 0064 3a58     ass initialed.X:
   d79bc:	2520 2c64 5920 203a 6425 202c 3a5a 2520      %d, Y: %d, Z: %
   d79cc:	0064 6544 7065 5320 656c 7065 6620 726f     d.Deep Sleep for
   d79dc:	2520 2064 696d 6c6c 7369 6365 6e6f 7364      %d milliseconds
   d79ec:	5400 6172 736e 696d 7373 6f69 206e 7473     .Transmission st
   d79fc:	7461 7375 2520 0064 7061 7770 7464 4300     atus %d.appwdt.C
   d7a0c:	6e6f 6966 7567 6972 676e 5120 434d 3835     onfiguring QMC58
   d7a1c:	3338 204c 202d 534f 2052 3135 2c32 7220     83L - OSR 512, r
   d7a2c:	6e61 6567 2b20 2d2f 2032 6147 7375 2c73     ange +/-2 Gauss,
   d7a3c:	4f20 5244 3120 2c30 4320 6e6f 6974 756e      ODR 10, Continu
   d7a4c:	756f 0073 7245 6f72 2072 6f63 6564 0020     ous.Error code .
   d7a5c:	7274 6575 5300 5641 4e49 2047 4553 5454     true.SAVING SETT
   d7a6c:	4e49 5347 0020 6576 7372 6f69 006e 7262     INGS .version.br
   d7a7c:	776f 6f6e 7475 6200 6f72 6e77 756f 5674     ownout.brownoutV
   d7a8c:	6c6f 6174 6567 6200 6f72 6e77 756f 4d74     oltage.brownoutM
   d7a9c:	6e69 7475 7365 7300 656c 7065 6954 656d     inutes.sleepTime
   d7aac:	6400 6169 6e67 736f 7469 6369 7943 6c63     .diagnositicCycl
   d7abc:	7365 7500 6573 6544 7065 6c53 6565 0070     es.useDeepSleep.
   d7acc:	2222 5c5c 0862 0c66 0a6e 0d72 0974 0000     ""\\b.f.n.r.t...

000d7adc <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d7adc:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

000d7aec <CSWTCH.24>:
   d7aec:	0bb8 0000 0c1c 0000 0c80 0000 0ce4 0000     ................
   d7afc:	0d48 0000 0dac 0000 0e10 0000 0e74 0000     H...........t...

000d7b0c <_ZTVN5spark13EthernetClassE>:
	...
   d7b14:	584f 000d 5845 000d 583b 000d 5831 000d     OX..EX..;X..1X..
   d7b24:	5825 000d 5819 000d 580d 000d 5805 000d     %X...X...X...X..
   d7b34:	57fb 000d 57f1 000d 6855 000d               .W...W..Uh..

000d7b40 <_ZTV8SPIClass>:
	...
   d7b48:	586d 000d 586f 000d                         mX..oX..

000d7b50 <_ZL14clock_divisors>:
   d7b50:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d7b60:	6e69 0066 6e6c 6600 006e 6f63 6564 6400     inf.ln.fn.code.d
   d7b70:	7465 6961 006c 0a0d 2500 3130 7530 0020     etail....%010u .
   d7b80:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
   d7b90:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
   d7ba0:	3d20 0020 6162 6475 5300 7265 6169 006c      = .baud.Serial.
   d7bb0:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d7bc0:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d7bd0:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d7be0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d7bf0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d7c00:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d7c10:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
   d7c20:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d7c30:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d7c40:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d7c50:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d7c60:	6100 6373 6974 656d 0000 0000               .asctime....

000d7c6c <_ZTV9IPAddress>:
	...
   d7c74:	628b 000d 627d 000d 627f 000d               .b..}b...b..

000d7c80 <_ZTV9USBSerial>:
	...
   d7c88:	6365 000d 63a9 000d 6383 000d 5c09 000d     ec...c...c...\..
   d7c98:	637d 000d 6367 000d 636f 000d 63a3 000d     }c..gc..oc...c..
   d7ca8:	6377 000d 6361 000d                         wc..ac..

000d7cb0 <_ZTVN5spark13CellularClassE>:
	...
   d7cb8:	649f 000d 6495 000d 648b 000d 6441 000d     .d...d...d..Ad..
   d7cc8:	647f 000d 6473 000d 6467 000d 645f 000d     .d..sd..gd.._d..
   d7cd8:	6455 000d 644b 000d 6855 000d               Ud..Kd..Uh..

000d7ce4 <_ZTV11USARTSerial>:
	...
   d7cec:	64e9 000d 650d 000d 6519 000d 5c09 000d     .d...e...e...\..
   d7cfc:	64f5 000d 6501 000d 64fb 000d 6507 000d     .d...e...d...e..
   d7d0c:	64eb 000d 64ef 000d                         .d...d..

000d7d14 <_ZTV7TwoWire>:
	...
   d7d1c:	65bd 000d 6607 000d 65df 000d 65bf 000d     .e...f...e...e..
   d7d2c:	65e7 000d 65ef 000d 65f7 000d 65ff 000d     .e...e...e...e..

000d7d3c <_ZTVN5spark9MeshClassE>:
	...
   d7d44:	6717 000d 670d 000d 6703 000d 66f9 000d     .g...g...g...f..
   d7d54:	66ed 000d 66e1 000d 66d5 000d 66cd 000d     .f...f...f...f..
   d7d64:	66c3 000d 66b9 000d 6855 000d               .f...f..Uh..

000d7d70 <_ZTVN5spark12NetworkClassE>:
	...
   d7d78:	67ed 000d 67f7 000d 6801 000d 680b 000d     .g...g...h...h..
   d7d88:	6815 000d 6821 000d 682d 000d 6839 000d     .h..!h..-h..9h..
   d7d98:	6841 000d 684b 000d 6855 000d               Ah..Kh..Uh..

000d7da4 <__sf_fake_stdin>:
	...

000d7dc4 <__sf_fake_stdout>:
	...

000d7de4 <__sf_fake_stderr>:
	...
   d7e04:	0043                                        C.

000d7e06 <link_const_variable_data_end>:
	...

000d7e08 <link_constructors_location>:
   d7e08:	000d45c1 	.word	0x000d45c1
   d7e0c:	000d4791 	.word	0x000d4791
   d7e10:	000d47a5 	.word	0x000d47a5
   d7e14:	000d4931 	.word	0x000d4931
   d7e18:	000d49b9 	.word	0x000d49b9
   d7e1c:	000d4ea1 	.word	0x000d4ea1
   d7e20:	000d506d 	.word	0x000d506d
   d7e24:	000d50fd 	.word	0x000d50fd
   d7e28:	000d5859 	.word	0x000d5859
   d7e2c:	000d59dd 	.word	0x000d59dd
   d7e30:	000d5f39 	.word	0x000d5f39
   d7e34:	000d5f49 	.word	0x000d5f49
   d7e38:	000d5fd5 	.word	0x000d5fd5
   d7e3c:	000d64a9 	.word	0x000d64a9
   d7e40:	000d67a1 	.word	0x000d67a1
   d7e44:	000d68d9 	.word	0x000d68d9
   d7e48:	000d69b5 	.word	0x000d69b5
   d7e4c:	000d6b39 	.word	0x000d6b39
   d7e50:	000d6bbd 	.word	0x000d6bbd
   d7e54:	000d6c81 	.word	0x000d6c81
   d7e58:	000d6d45 	.word	0x000d6d45

000d7e5c <link_constructors_end>:
   d7e5c:	00000000 	.word	0x00000000
