
c:/working/WeatherStation/DeviceFirmware/ParticleBoron/target/ParticleBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d98a0  000d98a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  000199a0  2**0
                  CONTENTS
  4 .data         000000cc  2003e000  000d98a8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000724  2003e0d0  2003e0d0  0001e0d0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9974  000d9974  00019974  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d999c  000d999c  0001999c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e4843  00000000  00000000  000199a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015342  00000000  00000000  000fe1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001bcf0  00000000  00000000  00113525  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026c0  00000000  00000000  0012f215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004368  00000000  00000000  001318d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e0b0  00000000  00000000  00135c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038d21  00000000  00000000  00173ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000eab46  00000000  00000000  001aca0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ced4  00000000  00000000  00297554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	78 92 0d 00                                         x...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f8b1 	bl	d9194 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f8b6 	bl	d91aa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e000 	.word	0x2003e000
   d4048:	000d98a8 	.word	0x000d98a8
   d404c:	2003e0cc 	.word	0x2003e0cc
   d4050:	2003e0d0 	.word	0x2003e0d0
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f89f 	bl	d719c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9898 	.word	0x000d9898
   d4080:	000d9848 	.word	0x000d9848

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb2c 	b.w	d46e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa81 	bl	d4590 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b851 	b.w	d7138 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 ba7d 	b.w	d6594 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 ba83 	b.w	d65a4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 ba81 	b.w	d65a4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	4718      	bx	r3

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40ce:	2a01      	cmp	r2, #1
   d40d0:	d002      	beq.n	d40d8 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40d2:	2a02      	cmp	r2, #2
   d40d4:	d002      	beq.n	d40dc <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40d6:	e004      	b.n	d40e2 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d8:	6001      	str	r1, [r0, #0]
	      break;
   d40da:	e002      	b.n	d40e2 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40dc:	b108      	cbz	r0, d40e2 <_ZNSt14_Function_base13_Base_managerIZ14readAnemometerP7ReadingEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40de:	680b      	ldr	r3, [r1, #0]
   d40e0:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e2:	2000      	movs	r0, #0
   d40e4:	4770      	bx	lr
	...

000d40e8 <_ZNSt17_Function_handlerIFbvEZ14readAnemometerP7ReadingEUlvE_E9_M_invokeERKSt9_Any_data>:
}

bool readAnemometer(Reading *reading)
{
  Serial.print("ANEMOMETER ");
  bool result = timeout(ANEMOMETER_TIMEOUT, [reading]() {
   d40e8:	6801      	ldr	r1, [r0, #0]
    return laCrosseTX23.read(reading->windSpeed, reading->windDirection);
  });
   d40ea:	4803      	ldr	r0, [pc, #12]	; (d40f8 <_ZNSt17_Function_handlerIFbvEZ14readAnemometerP7ReadingEUlvE_E9_M_invokeERKSt9_Any_data+0x10>)
   d40ec:	f101 0214 	add.w	r2, r1, #20
   d40f0:	3110      	adds	r1, #16
   d40f2:	f001 bd87 	b.w	d5c04 <_ZN13LaCrosse_TX234readERfRi>
   d40f6:	bf00      	nop
   d40f8:	2003e288 	.word	0x2003e288

000d40fc <_Z15watchDogTimeoutv>:
    }
  }
}

void watchDogTimeout()
{
   d40fc:	b508      	push	{r3, lr}
  Serial.println("Watchdog timeout");
   d40fe:	f003 fba5 	bl	d784c <_Z16_fetch_usbserialv>
   d4102:	4903      	ldr	r1, [pc, #12]	; (d4110 <_Z15watchDogTimeoutv+0x14>)
   d4104:	f002 fd49 	bl	d6b9a <_ZN5Print7printlnEPKc>
  System.reset();
}
   d4108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void watchDogTimeout()
{
  Serial.println("Watchdog timeout");
  System.reset();
   d410c:	f002 bbda 	b.w	d68c4 <_ZN11SystemClass5resetEv>
   d4110:	000d928c 	.word	0x000d928c

000d4114 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4114:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4116:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4118:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d411a:	b10b      	cbz	r3, d4120 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d411c:	68c0      	ldr	r0, [r0, #12]
   d411e:	e006      	b.n	d412e <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d4120:	6840      	ldr	r0, [r0, #4]
   d4122:	b128      	cbz	r0, d4130 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4124:	6883      	ldr	r3, [r0, #8]
   d4126:	b90b      	cbnz	r3, d412c <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d4128:	f003 ff41 	bl	d7fae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d412c:	68c3      	ldr	r3, [r0, #12]
   d412e:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d4130:	2301      	movs	r3, #1
   d4132:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4134:	2000      	movs	r0, #0
    }
   d4136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d413a:	f002 b847 	b.w	d61cc <os_thread_exit>

000d413e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4140:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4142:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4144:	b113      	cbz	r3, d414c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4146:	2203      	movs	r2, #3
   d4148:	4601      	mov	r1, r0
   d414a:	4798      	blx	r3
    }
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}

000d4150 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
   d4150:	b538      	push	{r3, r4, r5, lr}
   d4152:	4604      	mov	r4, r0
   d4154:	6940      	ldr	r0, [r0, #20]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
   d4156:	b1b0      	cbz	r0, d4186 <_ZN19ApplicationWatchdogD1Ev+0x36>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4158:	f002 f800 	bl	d615c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d415c:	b998      	cbnz	r0, d4186 <_ZN19ApplicationWatchdogD1Ev+0x36>
            return;

        if (!exited_) {
   d415e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d4162:	b91b      	cbnz	r3, d416c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4164:	6960      	ldr	r0, [r4, #20]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4166:	b108      	cbz	r0, d416c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4168:	f002 f800 	bl	d616c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d416c:	69a5      	ldr	r5, [r4, #24]
   d416e:	b13d      	cbz	r5, d4180 <_ZN19ApplicationWatchdogD1Ev+0x30>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4170:	4628      	mov	r0, r5
   d4172:	f7ff ffe4 	bl	d413e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   d4176:	4628      	mov	r0, r5
   d4178:	f7ff ff8f 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d417c:	2300      	movs	r3, #0
   d417e:	61a3      	str	r3, [r4, #24]
        }

        os_thread_cleanup(handle);
   d4180:	6960      	ldr	r0, [r4, #20]
   d4182:	f001 fffb 	bl	d617c <os_thread_cleanup>
   d4186:	1d20      	adds	r0, r4, #4
   d4188:	f7ff ffd9 	bl	d413e <_ZNSt14_Function_baseD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	bd38      	pop	{r3, r4, r5, pc}

000d4190 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
   d4190:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4192:	f001 ffb3 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4196:	4b01      	ldr	r3, [pc, #4]	; (d419c <_ZN19ApplicationWatchdog7checkinEv+0xc>)
   d4198:	6018      	str	r0, [r3, #0]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	2003e718 	.word	0x2003e718

000d41a0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d41a0:	6803      	ldr	r3, [r0, #0]
   d41a2:	b2c9      	uxtb	r1, r1
   d41a4:	689b      	ldr	r3, [r3, #8]
   d41a6:	4718      	bx	r3

000d41a8 <_Z7onErrorPKc>:

Reading initialReading;
char messageBuffer[255];

void onError(const char *message)
{
   d41a8:	b510      	push	{r4, lr}
  RGB.color(255, 255, 0);
   d41aa:	21ff      	movs	r1, #255	; 0xff

Reading initialReading;
char messageBuffer[255];

void onError(const char *message)
{
   d41ac:	4604      	mov	r4, r0
  RGB.color(255, 255, 0);
   d41ae:	2200      	movs	r2, #0
   d41b0:	4608      	mov	r0, r1
   d41b2:	f002 fe96 	bl	d6ee2 <_ZN8RGBClass5colorEiii>
  Serial.println(message);
   d41b6:	f003 fb49 	bl	d784c <_Z16_fetch_usbserialv>
   d41ba:	4621      	mov	r1, r4
}
   d41bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
char messageBuffer[255];

void onError(const char *message)
{
  RGB.color(255, 255, 0);
  Serial.println(message);
   d41c0:	f002 bceb 	b.w	d6b9a <_ZN5Print7printlnEPKc>

000d41c4 <_Z7timeoutiSt8functionIFbvEE>:
}

bool timeout(int timeout, std::function<bool()> opperation)
{
   d41c4:	b570      	push	{r4, r5, r6, lr}
   d41c6:	4604      	mov	r4, r0
   d41c8:	460d      	mov	r5, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41ca:	f001 ff97 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
  unsigned long endTime = millis() + timeout;
   d41ce:	4404      	add	r4, r0
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d41d0:	68ab      	ldr	r3, [r5, #8]
   d41d2:	b90b      	cbnz	r3, d41d8 <_Z7timeoutiSt8functionIFbvEE+0x14>
	__throw_bad_function_call();
   d41d4:	f003 feeb 	bl	d7fae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41d8:	68eb      	ldr	r3, [r5, #12]
   d41da:	4628      	mov	r0, r5
   d41dc:	4798      	blx	r3
  bool result = false;
  while (!(result = opperation()) && millis() < endTime)
   d41de:	4606      	mov	r6, r0
   d41e0:	b960      	cbnz	r0, d41fc <_Z7timeoutiSt8functionIFbvEE+0x38>
   d41e2:	f001 ff8b 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
   d41e6:	42a0      	cmp	r0, r4
   d41e8:	d208      	bcs.n	d41fc <_Z7timeoutiSt8functionIFbvEE+0x38>
  {
    Serial.print(".");
   d41ea:	f003 fb2f 	bl	d784c <_Z16_fetch_usbserialv>
   d41ee:	4904      	ldr	r1, [pc, #16]	; (d4200 <_Z7timeoutiSt8functionIFbvEE+0x3c>)
   d41f0:	f002 fcc0 	bl	d6b74 <_ZN5Print5printEPKc>
    delay(10);
   d41f4:	200a      	movs	r0, #10
   d41f6:	f002 fe5b 	bl	d6eb0 <delay>

bool timeout(int timeout, std::function<bool()> opperation)
{
  unsigned long endTime = millis() + timeout;
  bool result = false;
  while (!(result = opperation()) && millis() < endTime)
   d41fa:	e7e9      	b.n	d41d0 <_Z7timeoutiSt8functionIFbvEE+0xc>
  {
    Serial.print(".");
    delay(10);
  }
  return result;
}
   d41fc:	4630      	mov	r0, r6
   d41fe:	bd70      	pop	{r4, r5, r6, pc}
   d4200:	000d929d 	.word	0x000d929d

000d4204 <_Z13checkBrownoutv>:

bool checkBrownout()
{
   d4204:	b510      	push	{r4, lr}
  return settings.brownout && fuelGuage.getVCell() < settings.brownoutVoltage;
   d4206:	4c08      	ldr	r4, [pc, #32]	; (d4228 <_Z13checkBrownoutv+0x24>)
   d4208:	7920      	ldrb	r0, [r4, #4]
   d420a:	b158      	cbz	r0, d4224 <_Z13checkBrownoutv+0x20>
   d420c:	4807      	ldr	r0, [pc, #28]	; (d422c <_Z13checkBrownoutv+0x28>)
   d420e:	f002 fef3 	bl	d6ff8 <_ZN9FuelGauge8getVCellEv>
   d4212:	edd4 7a02 	vldr	s15, [r4, #8]
   d4216:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d421e:	bf4c      	ite	mi
   d4220:	2001      	movmi	r0, #1
   d4222:	2000      	movpl	r0, #0
}
   d4224:	bd10      	pop	{r4, pc}
   d4226:	bf00      	nop
   d4228:	2003e0d4 	.word	0x2003e0d4
   d422c:	2003e2cc 	.word	0x2003e2cc

000d4230 <_Z14readAnemometerP7Reading>:

bool readAnemometer(Reading *reading)
{
   d4230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4232:	4604      	mov	r4, r0
  Serial.print("ANEMOMETER ");
   d4234:	f003 fb0a 	bl	d784c <_Z16_fetch_usbserialv>
   d4238:	490b      	ldr	r1, [pc, #44]	; (d4268 <_Z14readAnemometerP7Reading+0x38>)
   d423a:	f002 fc9b 	bl	d6b74 <_ZN5Print5printEPKc>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d423e:	4b0b      	ldr	r3, [pc, #44]	; (d426c <_Z14readAnemometerP7Reading+0x3c>)
   d4240:	9303      	str	r3, [sp, #12]
  bool result = timeout(ANEMOMETER_TIMEOUT, [reading]() {
    return laCrosseTX23.read(reading->windSpeed, reading->windDirection);
  });
   d4242:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d4244:	4b0a      	ldr	r3, [pc, #40]	; (d4270 <_Z14readAnemometerP7Reading+0x40>)
   d4246:	9302      	str	r3, [sp, #8]
   d4248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ffb9 	bl	d41c4 <_Z7timeoutiSt8functionIFbvEE>
   d4252:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4254:	4668      	mov	r0, sp
   d4256:	f7ff ff72 	bl	d413e <_ZNSt14_Function_baseD1Ev>
  Serial.println();
   d425a:	f003 faf7 	bl	d784c <_Z16_fetch_usbserialv>
   d425e:	f002 fc90 	bl	d6b82 <_ZN5Print7printlnEv>
  return result;
}
   d4262:	4620      	mov	r0, r4
   d4264:	b004      	add	sp, #16
   d4266:	bd10      	pop	{r4, pc}
   d4268:	000d929f 	.word	0x000d929f
   d426c:	000d40e9 	.word	0x000d40e9
   d4270:	000d40cf 	.word	0x000d40cf

000d4274 <_Z11deviceSetupv>:
  return !isnan(reading->bmeTemperature) && !isnan(reading->pressure) && reading->pressure > 0 && !isnan(reading->bmeHumidity);
}

STARTUP(deviceSetup());
void deviceSetup()
{
   d4274:	b570      	push	{r4, r5, r6, lr}
   d4276:	f001 ff41 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
  duration = millis();
   d427a:	4b27      	ldr	r3, [pc, #156]	; (d4318 <_Z11deviceSetupv+0xa4>)
  //Turn off the status LED to save power
  RGB.control(true);
  RGB.color(0, 0, 0);

  //Load saved settings;
  settings = *loadSettings();
   d427c:	4e27      	ldr	r6, [pc, #156]	; (d431c <_Z11deviceSetupv+0xa8>)
}

STARTUP(deviceSetup());
void deviceSetup()
{
  duration = millis();
   d427e:	6018      	str	r0, [r3, #0]

  Serial.begin(115200);
   d4280:	f003 fae4 	bl	d784c <_Z16_fetch_usbserialv>
   d4284:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4288:	f003 fad4 	bl	d7834 <_ZN9USBSerial5beginEl>

  //Turn off the status LED to save power
  RGB.control(true);
   d428c:	2001      	movs	r0, #1
   d428e:	f002 fe18 	bl	d6ec2 <_ZN8RGBClass7controlEb>
  RGB.color(0, 0, 0);
   d4292:	2200      	movs	r2, #0
   d4294:	4611      	mov	r1, r2
   d4296:	4610      	mov	r0, r2
   d4298:	f002 fe23 	bl	d6ee2 <_ZN8RGBClass5colorEiii>

  //Load saved settings;
  settings = *loadSettings();
   d429c:	f000 fc16 	bl	d4acc <_Z12loadSettingsv>
   d42a0:	4605      	mov	r5, r0
   d42a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d42a4:	4634      	mov	r4, r6
   d42a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d42a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d42ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  if (!(brownout = checkBrownout()))
   d42b0:	f7ff ffa8 	bl	d4204 <_Z13checkBrownoutv>
   d42b4:	4b1a      	ldr	r3, [pc, #104]	; (d4320 <_Z11deviceSetupv+0xac>)
   d42b6:	7018      	strb	r0, [r3, #0]
   d42b8:	bb68      	cbnz	r0, d4316 <_Z11deviceSetupv+0xa2>
  {
    if (diagnosticMode)
   d42ba:	6973      	ldr	r3, [r6, #20]
   d42bc:	b16b      	cbz	r3, d42da <_Z11deviceSetupv+0x66>
    {
      pinMode(LED, OUTPUT);
   d42be:	2101      	movs	r1, #1
   d42c0:	2007      	movs	r0, #7
   d42c2:	f003 fd75 	bl	d7db0 <pinMode>
      digitalWrite(LED, HIGH);
   d42c6:	2007      	movs	r0, #7
   d42c8:	2101      	movs	r1, #1
   d42ca:	f003 fd82 	bl	d7dd2 <digitalWrite>
      settings.diagnositicCycles--;
   d42ce:	6973      	ldr	r3, [r6, #20]

      saveSettings(&settings);
   d42d0:	4630      	mov	r0, r6
  {
    if (diagnosticMode)
    {
      pinMode(LED, OUTPUT);
      digitalWrite(LED, HIGH);
      settings.diagnositicCycles--;
   d42d2:	3b01      	subs	r3, #1
   d42d4:	6173      	str	r3, [r6, #20]

      saveSettings(&settings);
   d42d6:	f000 fc19 	bl	d4b0c <_Z12saveSettingsP8Settings>
    }

    //turn on the sensors
    pinMode(SENSOR_POWER, OUTPUT);
   d42da:	2101      	movs	r1, #1
   d42dc:	2002      	movs	r0, #2
   d42de:	f003 fd67 	bl	d7db0 <pinMode>
    digitalWrite(SENSOR_POWER, HIGH);
   d42e2:	2101      	movs	r1, #1
   d42e4:	2002      	movs	r0, #2
   d42e6:	f003 fd74 	bl	d7dd2 <digitalWrite>

    Wire.begin();
   d42ea:	f003 fe1b 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d42ee:	f003 fbe1 	bl	d7ab4 <_ZN7TwoWire5beginEv>
    dht.begin();
    bme280.begin(0x76);

    //take an initial wind reading
    if (!(initialReading.anemometerRead = readAnemometer(&initialReading)))
   d42f2:	4c0c      	ldr	r4, [pc, #48]	; (d4324 <_Z11deviceSetupv+0xb0>)
    //turn on the sensors
    pinMode(SENSOR_POWER, OUTPUT);
    digitalWrite(SENSOR_POWER, HIGH);

    Wire.begin();
    dht.begin();
   d42f4:	480c      	ldr	r0, [pc, #48]	; (d4328 <_Z11deviceSetupv+0xb4>)
   d42f6:	f001 fd73 	bl	d5de0 <_ZN3DHT5beginEv>
    bme280.begin(0x76);
   d42fa:	2176      	movs	r1, #118	; 0x76
   d42fc:	480b      	ldr	r0, [pc, #44]	; (d432c <_Z11deviceSetupv+0xb8>)
   d42fe:	f001 fc01 	bl	d5b04 <_ZN15Adafruit_BME2805beginEh>

    //take an initial wind reading
    if (!(initialReading.anemometerRead = readAnemometer(&initialReading)))
   d4302:	4620      	mov	r0, r4
   d4304:	f7ff ff94 	bl	d4230 <_Z14readAnemometerP7Reading>
   d4308:	7320      	strb	r0, [r4, #12]
   d430a:	b920      	cbnz	r0, d4316 <_Z11deviceSetupv+0xa2>
    {
      onError("ERROR: Could not get initial wind reading");
   d430c:	4808      	ldr	r0, [pc, #32]	; (d4330 <_Z11deviceSetupv+0xbc>)
    }
  }
}
   d430e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bme280.begin(0x76);

    //take an initial wind reading
    if (!(initialReading.anemometerRead = readAnemometer(&initialReading)))
    {
      onError("ERROR: Could not get initial wind reading");
   d4312:	f7ff bf49 	b.w	d41a8 <_Z7onErrorPKc>
   d4316:	bd70      	pop	{r4, r5, r6, pc}
   d4318:	2003e270 	.word	0x2003e270
   d431c:	2003e0d4 	.word	0x2003e0d4
   d4320:	2003e26c 	.word	0x2003e26c
   d4324:	2003e0f0 	.word	0x2003e0f0
   d4328:	2003e2b8 	.word	0x2003e2b8
   d432c:	2003e22c 	.word	0x2003e22c
   d4330:	000d92b0 	.word	0x000d92b0

000d4334 <_ZZ4loopENUlvE0_4_FUNEv>:
    };
  }
  else
  {
    sleepMessage = "LIGHT";
    sleepAction = []() {
   d4334:	b508      	push	{r3, lr}
      delay(settings.sleepTime * 1000);
   d4336:	4b05      	ldr	r3, [pc, #20]	; (d434c <_ZZ4loopENUlvE0_4_FUNEv+0x18>)
   d4338:	691b      	ldr	r3, [r3, #16]
   d433a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d433e:	4358      	muls	r0, r3
   d4340:	f002 fdb6 	bl	d6eb0 <delay>
      deviceSetup();
    };
   d4344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    sleepMessage = "LIGHT";
    sleepAction = []() {
      delay(settings.sleepTime * 1000);
      deviceSetup();
   d4348:	f7ff bf94 	b.w	d4274 <_Z11deviceSetupv>
   d434c:	2003e0d4 	.word	0x2003e0d4

000d4350 <_Z9deepSleepj>:
  Serial.println("Watchdog timeout");
  System.reset();
}

void deepSleep(unsigned int milliseconds)
{
   d4350:	b513      	push	{r0, r1, r4, lr}
   d4352:	4604      	mov	r4, r0
  Serial.printlnf("Deep Sleep for %d milliseconds", milliseconds);
   d4354:	f003 fa7a 	bl	d784c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4358:	4623      	mov	r3, r4
   d435a:	4a11      	ldr	r2, [pc, #68]	; (d43a0 <_Z9deepSleepj+0x50>)
   d435c:	2101      	movs	r1, #1
   d435e:	f002 fd54 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>
  Wire.beginTransmission(WAKEUP_BUDDY_ADDRESS);
   d4362:	f003 fddf 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d4366:	2108      	movs	r1, #8
   d4368:	f003 fbc4 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(milliseconds);
   d436c:	f003 fdda 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d4370:	4621      	mov	r1, r4
   d4372:	f7ff ff15 	bl	d41a0 <_ZN7TwoWire5writeEj>
  Wire.write(milliseconds >> 8);
   d4376:	f003 fdd5 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d437a:	0a21      	lsrs	r1, r4, #8
   d437c:	f7ff ff10 	bl	d41a0 <_ZN7TwoWire5writeEj>
  Wire.endTransmission();
   d4380:	f003 fdd0 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d4384:	f003 fbbd 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>

  fuelGuage.sleep();
   d4388:	4806      	ldr	r0, [pc, #24]	; (d43a4 <_Z9deepSleepj+0x54>)
   d438a:	f002 fe99 	bl	d70c0 <_ZN9FuelGauge5sleepEv>
  System.sleep(SLEEP_MODE_DEEP);
   d438e:	4b06      	ldr	r3, [pc, #24]	; (d43a8 <_Z9deepSleepj+0x58>)
   d4390:	2200      	movs	r2, #0
   d4392:	681b      	ldr	r3, [r3, #0]
   d4394:	2101      	movs	r1, #1
   d4396:	4668      	mov	r0, sp
   d4398:	f002 fa98 	bl	d68cc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d439c:	b002      	add	sp, #8
   d439e:	bd10      	pop	{r4, pc}
   d43a0:	000d92da 	.word	0x000d92da
   d43a4:	2003e2cc 	.word	0x2003e2cc
   d43a8:	2003e28c 	.word	0x2003e28c

000d43ac <_ZZ4loopENUlvE_4_FUNEv>:
  const char *sleepMessage;
  if (settings.useDeepSleep)
  {
    sleepMessage = "DEEP";
    sleepAction = []() {
      deepSleep(settings.sleepTime * 1000);
   d43ac:	4b03      	ldr	r3, [pc, #12]	; (d43bc <_ZZ4loopENUlvE_4_FUNEv+0x10>)
   d43ae:	691b      	ldr	r3, [r3, #16]
   d43b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d43b4:	4358      	muls	r0, r3
   d43b6:	f7ff bfcb 	b.w	d4350 <_Z9deepSleepj>
   d43ba:	bf00      	nop
   d43bc:	2003e0d4 	.word	0x2003e0d4

000d43c0 <_Z15printSystemInfov>:
    deepSleep(settings.brownoutMinutes * 60000);
  }
}

void printSystemInfo()
{
   d43c0:	b570      	push	{r4, r5, r6, lr}
   d43c2:	b096      	sub	sp, #88	; 0x58
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d43c4:	a807      	add	r0, sp, #28
   d43c6:	f002 f8c5 	bl	d6554 <spark_deviceID>
#define SYSTEM_VERSION_080RC27
#define SYSTEM_VERSION_090RC1
#define SYSTEM_VERSION_090RC2
#define SYSTEM_VERSION_090RC3

typedef struct __attribute__((packed)) SystemVersionInfo
   d43ca:	ac16      	add	r4, sp, #88	; 0x58
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
   d43cc:	f003 fa3e 	bl	d784c <_Z16_fetch_usbserialv>
   d43d0:	4a60      	ldr	r2, [pc, #384]	; (d4554 <_Z15printSystemInfov+0x194>)
   d43d2:	9b07      	ldr	r3, [sp, #28]
   d43d4:	2101      	movs	r1, #1
   d43d6:	f002 fd18 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("System version: %s", System.version().c_str());
   d43da:	f003 fa37 	bl	d784c <_Z16_fetch_usbserialv>
   d43de:	231c      	movs	r3, #28
   d43e0:	f824 3d1c 	strh.w	r3, [r4, #-28]!
   d43e4:	4605      	mov	r5, r0
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   d43e6:	2100      	movs	r1, #0
   d43e8:	4620      	mov	r0, r4
   d43ea:	f002 f827 	bl	d643c <system_version_info>
        return String(info.versionString);
   d43ee:	a911      	add	r1, sp, #68	; 0x44
   d43f0:	a80b      	add	r0, sp, #44	; 0x2c
   d43f2:	f002 fb25 	bl	d6a40 <_ZN6StringC1EPK19__FlashStringHelper>
   d43f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d43f8:	4a57      	ldr	r2, [pc, #348]	; (d4558 <_Z15printSystemInfov+0x198>)
   d43fa:	2101      	movs	r1, #1
   d43fc:	4628      	mov	r0, r5

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d43fe:	4d57      	ldr	r5, [pc, #348]	; (d455c <_Z15printSystemInfov+0x19c>)
   d4400:	f002 fd03 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>

void printSystemInfo()
{
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
  Serial.printlnf("System version: %s", System.version().c_str());
   d4404:	a80b      	add	r0, sp, #44	; 0x2c
   d4406:	f002 fad4 	bl	d69b2 <_ZN6StringD1Ev>

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d440a:	4628      	mov	r0, r5
   d440c:	f002 f8fa 	bl	d6604 <_ZN4PMIC20getInputVoltageLimitEv>
   d4410:	4606      	mov	r6, r0
  Serial.printlnf("Input Voltage Limit: %d", inputVoltageLimit);
   d4412:	f003 fa1b 	bl	d784c <_Z16_fetch_usbserialv>
   d4416:	4633      	mov	r3, r6
   d4418:	4a51      	ldr	r2, [pc, #324]	; (d4560 <_Z15printSystemInfov+0x1a0>)
   d441a:	2101      	movs	r1, #1
   d441c:	f002 fcf5 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>

  byte inputCurrentLimit = pmic.getInputCurrentLimit();
   d4420:	4628      	mov	r0, r5
   d4422:	f002 f943 	bl	d66ac <_ZN4PMIC20getInputCurrentLimitEv>
   d4426:	4606      	mov	r6, r0
  Serial.printlnf("Input Current Limit: %d", inputCurrentLimit);
   d4428:	f003 fa10 	bl	d784c <_Z16_fetch_usbserialv>
   d442c:	b2f3      	uxtb	r3, r6
   d442e:	4a4d      	ldr	r2, [pc, #308]	; (d4564 <_Z15printSystemInfov+0x1a4>)
   d4430:	2101      	movs	r1, #1
   d4432:	f002 fcea 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>

  uint16_t minimumSystemVoltage = pmic.getMinimumSystemVoltage();
   d4436:	4628      	mov	r0, r5
   d4438:	f002 f944 	bl	d66c4 <_ZN4PMIC23getMinimumSystemVoltageEv>
   d443c:	4606      	mov	r6, r0
  Serial.printlnf("Minimum System Voltage: %d", minimumSystemVoltage);
   d443e:	f003 fa05 	bl	d784c <_Z16_fetch_usbserialv>
   d4442:	4633      	mov	r3, r6
   d4444:	4a48      	ldr	r2, [pc, #288]	; (d4568 <_Z15printSystemInfov+0x1a8>)
   d4446:	2101      	movs	r1, #1
   d4448:	f002 fcdf 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>

  byte chargeCurrent = pmic.getChargeCurrent();
   d444c:	4628      	mov	r0, r5
   d444e:	f002 f945 	bl	d66dc <_ZN4PMIC16getChargeCurrentEv>
   d4452:	4606      	mov	r6, r0
  Serial.printlnf("Charge Current: %d", chargeCurrent);
   d4454:	f003 f9fa 	bl	d784c <_Z16_fetch_usbserialv>
   d4458:	4633      	mov	r3, r6
   d445a:	4a44      	ldr	r2, [pc, #272]	; (d456c <_Z15printSystemInfov+0x1ac>)
   d445c:	2101      	movs	r1, #1
   d445e:	f002 fcd4 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
   d4462:	4628      	mov	r0, r5
   d4464:	f002 f940 	bl	d66e8 <_ZN4PMIC21getChargeVoltageValueEv>
   d4468:	4605      	mov	r5, r0
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);
   d446a:	f003 f9ef 	bl	d784c <_Z16_fetch_usbserialv>
   d446e:	462b      	mov	r3, r5
   d4470:	4a3f      	ldr	r2, [pc, #252]	; (d4570 <_Z15printSystemInfov+0x1b0>)

  Serial.print("Charge: ");
  Serial.println(fuelGuage.getSoC());
   d4472:	4d40      	ldr	r5, [pc, #256]	; (d4574 <_Z15printSystemInfov+0x1b4>)
   d4474:	2101      	movs	r1, #1
   d4476:	f002 fcc8 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Charge Current: %d", chargeCurrent);

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);

  Serial.print("Charge: ");
   d447a:	f003 f9e7 	bl	d784c <_Z16_fetch_usbserialv>
   d447e:	493e      	ldr	r1, [pc, #248]	; (d4578 <_Z15printSystemInfov+0x1b8>)
   d4480:	f002 fb78 	bl	d6b74 <_ZN5Print5printEPKc>
  Serial.println(fuelGuage.getSoC());
   d4484:	f003 f9e2 	bl	d784c <_Z16_fetch_usbserialv>
   d4488:	4606      	mov	r6, r0
   d448a:	4628      	mov	r0, r5
   d448c:	f002 fdca 	bl	d7024 <_ZN9FuelGauge6getSoCEv>
   d4490:	ee10 0a10 	vmov	r0, s0
   d4494:	f004 f83a 	bl	d850c <__aeabi_f2d>
   d4498:	ec41 0b10 	vmov	d0, r0, r1
   d449c:	2102      	movs	r1, #2
   d449e:	4630      	mov	r0, r6
   d44a0:	f002 fca8 	bl	d6df4 <_ZN5Print7printlnEdi>

  Serial.print("Voltage: ");
   d44a4:	f003 f9d2 	bl	d784c <_Z16_fetch_usbserialv>
   d44a8:	4934      	ldr	r1, [pc, #208]	; (d457c <_Z15printSystemInfov+0x1bc>)
   d44aa:	f002 fb63 	bl	d6b74 <_ZN5Print5printEPKc>
  Serial.println(fuelGuage.getVCell());
   d44ae:	f003 f9cd 	bl	d784c <_Z16_fetch_usbserialv>
   d44b2:	4606      	mov	r6, r0
   d44b4:	4628      	mov	r0, r5
   d44b6:	f002 fd9f 	bl	d6ff8 <_ZN9FuelGauge8getVCellEv>
   d44ba:	ee10 0a10 	vmov	r0, s0
   d44be:	f004 f825 	bl	d850c <__aeabi_f2d>
   d44c2:	ec41 0b10 	vmov	d0, r0, r1
   d44c6:	2102      	movs	r1, #2
   d44c8:	4630      	mov	r0, r6
   d44ca:	f002 fc93 	bl	d6df4 <_ZN5Print7printlnEdi>

  Serial.println("Compass initializing");
   d44ce:	f003 f9bd 	bl	d784c <_Z16_fetch_usbserialv>
   d44d2:	492b      	ldr	r1, [pc, #172]	; (d4580 <_Z15printSystemInfov+0x1c0>)
  compassSensor = Compass();
   d44d4:	4d2b      	ldr	r5, [pc, #172]	; (d4584 <_Z15printSystemInfov+0x1c4>)
  Serial.println(fuelGuage.getSoC());

  Serial.print("Voltage: ");
  Serial.println(fuelGuage.getVCell());

  Serial.println("Compass initializing");
   d44d6:	f002 fb60 	bl	d6b9a <_ZN5Print7printlnEPKc>
  compassSensor = Compass();
   d44da:	4620      	mov	r0, r4
   d44dc:	f000 f9f8 	bl	d48d0 <_ZN7CompassC1Ev>
   d44e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   d44e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  Serial.println(compassSensor.begin());
   d44e8:	f003 f9b0 	bl	d784c <_Z16_fetch_usbserialv>
   d44ec:	4604      	mov	r4, r0
   d44ee:	4628      	mov	r0, r5
   d44f0:	f000 f9fe 	bl	d48f0 <_ZN7Compass5beginEv>
   d44f4:	220a      	movs	r2, #10
   d44f6:	4601      	mov	r1, r0
   d44f8:	4620      	mov	r0, r4
   d44fa:	f002 fbb5 	bl	d6c68 <_ZN5Print7printlnEii>
  Serial.println("Compass initialed");
   d44fe:	f003 f9a5 	bl	d784c <_Z16_fetch_usbserialv>
   d4502:	4921      	ldr	r1, [pc, #132]	; (d4588 <_Z15printSystemInfov+0x1c8>)
   d4504:	f002 fb49 	bl	d6b9a <_ZN5Print7printlnEPKc>

  CompassReading reading = compassSensor.getReading();
   d4508:	4628      	mov	r0, r5
   d450a:	f000 fa2d 	bl	d4968 <_ZN7Compass10getReadingEv>
   d450e:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
   d4512:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
   d4516:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
   d451a:	f003 f997 	bl	d784c <_Z16_fetch_usbserialv>
   d451e:	4604      	mov	r4, r0
   d4520:	9811      	ldr	r0, [sp, #68]	; 0x44
   d4522:	f003 fff3 	bl	d850c <__aeabi_f2d>
   d4526:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d452a:	9810      	ldr	r0, [sp, #64]	; 0x40
   d452c:	f003 ffee 	bl	d850c <__aeabi_f2d>
   d4530:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4534:	980f      	ldr	r0, [sp, #60]	; 0x3c
   d4536:	f003 ffe9 	bl	d850c <__aeabi_f2d>
   d453a:	4a14      	ldr	r2, [pc, #80]	; (d458c <_Z15printSystemInfov+0x1cc>)
   d453c:	e9cd 0100 	strd	r0, r1, [sp]
   d4540:	2101      	movs	r1, #1
   d4542:	4620      	mov	r0, r4
   d4544:	f002 fc61 	bl	d6e0a <_ZN5Print11printf_implEbPKcz>
  }
}

void printSystemInfo()
{
  String myID = System.deviceID();
   d4548:	a807      	add	r0, sp, #28
   d454a:	f002 fa32 	bl	d69b2 <_ZN6StringD1Ev>
  Serial.println(compassSensor.begin());
  Serial.println("Compass initialed");

  CompassReading reading = compassSensor.getReading();
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
}
   d454e:	b016      	add	sp, #88	; 0x58
   d4550:	bd70      	pop	{r4, r5, r6, pc}
   d4552:	bf00      	nop
   d4554:	000d92f9 	.word	0x000d92f9
   d4558:	000d9307 	.word	0x000d9307
   d455c:	2003e223 	.word	0x2003e223
   d4560:	000d931a 	.word	0x000d931a
   d4564:	000d9332 	.word	0x000d9332
   d4568:	000d934a 	.word	0x000d934a
   d456c:	000d9365 	.word	0x000d9365
   d4570:	000d9378 	.word	0x000d9378
   d4574:	2003e2cc 	.word	0x2003e2cc
   d4578:	000d938b 	.word	0x000d938b
   d457c:	000d9394 	.word	0x000d9394
   d4580:	000d939e 	.word	0x000d939e
   d4584:	2003e274 	.word	0x2003e274
   d4588:	000d93b3 	.word	0x000d93b3
   d458c:	000d93c5 	.word	0x000d93c5

000d4590 <loop>:

void loop()
{
   d4590:	b570      	push	{r4, r5, r6, lr}
  digitalWrite(LED_BUILTIN, HIGH);
   d4592:	2101      	movs	r1, #1
   d4594:	2007      	movs	r0, #7
   d4596:	f003 fc1c 	bl	d7dd2 <digitalWrite>

  watchDog.checkin();

  void (*sleepAction)();
  const char *sleepMessage;
  if (settings.useDeepSleep)
   d459a:	4e1e      	ldr	r6, [pc, #120]	; (d4614 <loop+0x84>)
      deepSleep(settings.sleepTime * 1000);
    };
  }
  else
  {
    sleepMessage = "LIGHT";
   d459c:	4d1e      	ldr	r5, [pc, #120]	; (d4618 <loop+0x88>)
   d459e:	4c1f      	ldr	r4, [pc, #124]	; (d461c <loop+0x8c>)
}

void loop()
{
  digitalWrite(LED_BUILTIN, HIGH);
  delay(1000);
   d45a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d45a4:	f002 fc84 	bl	d6eb0 <delay>
  digitalWrite(LED_BUILTIN, LOW);
   d45a8:	2100      	movs	r1, #0
   d45aa:	2007      	movs	r0, #7
   d45ac:	f003 fc11 	bl	d7dd2 <digitalWrite>

  // And repeat!
  printSystemInfo();
   d45b0:	f7ff ff06 	bl	d43c0 <_Z15printSystemInfov>

  watchDog.checkin();
   d45b4:	f7ff fdec 	bl	d4190 <_ZN19ApplicationWatchdog7checkinEv>

  void (*sleepAction)();
  const char *sleepMessage;
  if (settings.useDeepSleep)
   d45b8:	7e33      	ldrb	r3, [r6, #24]
   d45ba:	2b00      	cmp	r3, #0
      deepSleep(settings.sleepTime * 1000);
    };
  }
  else
  {
    sleepMessage = "LIGHT";
   d45bc:	4b18      	ldr	r3, [pc, #96]	; (d4620 <loop+0x90>)
   d45be:	bf18      	it	ne
   d45c0:	461d      	movne	r5, r3
   d45c2:	4b18      	ldr	r3, [pc, #96]	; (d4624 <loop+0x94>)
   d45c4:	bf18      	it	ne
   d45c6:	461c      	movne	r4, r3
      delay(settings.sleepTime * 1000);
      deviceSetup();
    };
  }

  Serial.print(sleepMessage);
   d45c8:	f003 f940 	bl	d784c <_Z16_fetch_usbserialv>
   d45cc:	4629      	mov	r1, r5
   d45ce:	f002 fad1 	bl	d6b74 <_ZN5Print5printEPKc>
  Serial.print(" SLEEP ");
   d45d2:	f003 f93b 	bl	d784c <_Z16_fetch_usbserialv>
   d45d6:	4914      	ldr	r1, [pc, #80]	; (d4628 <loop+0x98>)
   d45d8:	f002 facc 	bl	d6b74 <_ZN5Print5printEPKc>
  Serial.println(settings.sleepTime);
   d45dc:	f003 f936 	bl	d784c <_Z16_fetch_usbserialv>
   d45e0:	220a      	movs	r2, #10
   d45e2:	6931      	ldr	r1, [r6, #16]
   d45e4:	f002 fb4a 	bl	d6c7c <_ZN5Print7printlnEli>

  Serial.print("DURATION ");
   d45e8:	f003 f930 	bl	d784c <_Z16_fetch_usbserialv>
   d45ec:	490f      	ldr	r1, [pc, #60]	; (d462c <loop+0x9c>)
   d45ee:	f002 fac1 	bl	d6b74 <_ZN5Print5printEPKc>
  Serial.println(millis() - duration);
   d45f2:	f003 f92b 	bl	d784c <_Z16_fetch_usbserialv>
   d45f6:	4605      	mov	r5, r0
   d45f8:	f001 fd80 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
   d45fc:	4b0c      	ldr	r3, [pc, #48]	; (d4630 <loop+0xa0>)
   d45fe:	6819      	ldr	r1, [r3, #0]
   d4600:	220a      	movs	r2, #10
   d4602:	1a41      	subs	r1, r0, r1
   d4604:	4628      	mov	r0, r5
   d4606:	f002 fb01 	bl	d6c0c <_ZN5Print7printlnEmi>

  sleepAction();
   d460a:	4623      	mov	r3, r4
}
   d460c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.println(settings.sleepTime);

  Serial.print("DURATION ");
  Serial.println(millis() - duration);

  sleepAction();
   d4610:	4718      	bx	r3
   d4612:	bf00      	nop
   d4614:	2003e0d4 	.word	0x2003e0d4
   d4618:	000d93de 	.word	0x000d93de
   d461c:	000d4335 	.word	0x000d4335
   d4620:	000d93d9 	.word	0x000d93d9
   d4624:	000d43ad 	.word	0x000d43ad
   d4628:	000d93e4 	.word	0x000d93e4
   d462c:	000d93ec 	.word	0x000d93ec
   d4630:	2003e270 	.word	0x2003e270

000d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4634:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4636:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4638:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d463a:	b17c      	cbz	r4, d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d463c:	6863      	ldr	r3, [r4, #4]
   d463e:	3b01      	subs	r3, #1
   d4640:	6063      	str	r3, [r4, #4]
   d4642:	b95b      	cbnz	r3, d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4644:	6823      	ldr	r3, [r4, #0]
   d4646:	4620      	mov	r0, r4
   d4648:	689b      	ldr	r3, [r3, #8]
   d464a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d464c:	68a3      	ldr	r3, [r4, #8]
   d464e:	3b01      	subs	r3, #1
   d4650:	60a3      	str	r3, [r4, #8]
   d4652:	b91b      	cbnz	r3, d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4654:	6823      	ldr	r3, [r4, #0]
   d4656:	4620      	mov	r0, r4
   d4658:	68db      	ldr	r3, [r3, #12]
   d465a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d465c:	4628      	mov	r0, r5
   d465e:	bd38      	pop	{r3, r4, r5, pc}

000d4660 <_Z16onSettingsUpdatePKcS0_>:
  fuelGuage.sleep();
  System.sleep(SLEEP_MODE_DEEP);
}

void onSettingsUpdate(const char* event, const char* data)
{
   d4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    digitalWrite(LED, HIGH);
   d4662:	2007      	movs	r0, #7
  fuelGuage.sleep();
  System.sleep(SLEEP_MODE_DEEP);
}

void onSettingsUpdate(const char* event, const char* data)
{
   d4664:	b085      	sub	sp, #20
   d4666:	460e      	mov	r6, r1
    digitalWrite(LED, HIGH);
   d4668:	2101      	movs	r1, #1
   d466a:	f003 fbb2 	bl	d7dd2 <digitalWrite>
    settings = *deserialize(data);
   d466e:	4630      	mov	r0, r6
   d4670:	f000 ff70 	bl	d5554 <_Z11deserializePKc>
   d4674:	4605      	mov	r5, r0
   d4676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4678:	4f15      	ldr	r7, [pc, #84]	; (d46d0 <_Z16onSettingsUpdatePKcS0_+0x70>)
   d467a:	463c      	mov	r4, r7
   d467c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d467e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    saveSettings(&settings);
   d4686:	4638      	mov	r0, r7
   d4688:	f000 fa40 	bl	d4b0c <_Z12saveSettingsP8Settings>

    Serial.print("SETTINGS UPDATE: ");
   d468c:	f003 f8de 	bl	d784c <_Z16_fetch_usbserialv>
   d4690:	4910      	ldr	r1, [pc, #64]	; (d46d4 <_Z16onSettingsUpdatePKcS0_+0x74>)
   d4692:	f002 fa6f 	bl	d6b74 <_ZN5Print5printEPKc>
    Serial.println(data);
   d4696:	f003 f8d9 	bl	d784c <_Z16_fetch_usbserialv>
   d469a:	4631      	mov	r1, r6
   d469c:	f002 fa7d 	bl	d6b9a <_ZN5Print7printlnEPKc>
   d46a0:	4b0d      	ldr	r3, [pc, #52]	; (d46d8 <_Z16onSettingsUpdatePKcS0_+0x78>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46a2:	490e      	ldr	r1, [pc, #56]	; (d46dc <_Z16onSettingsUpdatePKcS0_+0x7c>)
   d46a4:	781b      	ldrb	r3, [r3, #0]
   d46a6:	f88d 3000 	strb.w	r3, [sp]
   d46aa:	4632      	mov	r2, r6
   d46ac:	233c      	movs	r3, #60	; 0x3c
   d46ae:	a802      	add	r0, sp, #8
   d46b0:	f002 feac 	bl	d740c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46b4:	a803      	add	r0, sp, #12
   d46b6:	f7ff ffbd 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
   d46ba:	f7ff fd69 	bl	d4190 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d46be:	f001 ff39 	bl	d6534 <spark_process>

    Particle.publish("Settings", data, 60, PRIVATE);
    Particle.process();

    digitalWrite(LED, LOW);
   d46c2:	2100      	movs	r1, #0
   d46c4:	2007      	movs	r0, #7
   d46c6:	f003 fb84 	bl	d7dd2 <digitalWrite>
}
   d46ca:	b005      	add	sp, #20
   d46cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46ce:	bf00      	nop
   d46d0:	2003e0d4 	.word	0x2003e0d4
   d46d4:	000d93f6 	.word	0x000d93f6
   d46d8:	2003e284 	.word	0x2003e284
   d46dc:	000d9408 	.word	0x000d9408

000d46e0 <setup>:

void setup()
{
   d46e0:	b5d0      	push	{r4, r6, r7, lr}
   d46e2:	b086      	sub	sp, #24
  watchDog.checkin();
   d46e4:	f7ff fd54 	bl	d4190 <_ZN19ApplicationWatchdog7checkinEv>
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d46e8:	2300      	movs	r3, #0
   d46ea:	9301      	str	r3, [sp, #4]
   d46ec:	9300      	str	r3, [sp, #0]
   d46ee:	461a      	mov	r2, r3
   d46f0:	4923      	ldr	r1, [pc, #140]	; (d4780 <setup+0xa0>)
   d46f2:	4824      	ldr	r0, [pc, #144]	; (d4784 <setup+0xa4>)
   d46f4:	f001 ff3e 	bl	d6574 <spark_subscribe>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d46f8:	f001 ff24 	bl	d6544 <spark_cloud_flag_connect>

  Particle.subscribe("Settings", onSettingsUpdate, MY_DEVICES);
  Particle.connect();

  if (brownout)
   d46fc:	4b22      	ldr	r3, [pc, #136]	; (d4788 <setup+0xa8>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	2b00      	cmp	r3, #0
   d4702:	d03a      	beq.n	d477a <setup+0x9a>
  {
    float voltage = fuelGuage.getVCell();
   d4704:	4821      	ldr	r0, [pc, #132]	; (d478c <setup+0xac>)
   d4706:	f002 fc77 	bl	d6ff8 <_ZN9FuelGauge8getVCellEv>
   d470a:	ed8d 0a03 	vstr	s0, [sp, #12]
    Serial.print("BROWNOUT ");
   d470e:	f003 f89d 	bl	d784c <_Z16_fetch_usbserialv>
   d4712:	491f      	ldr	r1, [pc, #124]	; (d4790 <setup+0xb0>)
   d4714:	f002 fa2e 	bl	d6b74 <_ZN5Print5printEPKc>
    Serial.println(voltage);
   d4718:	f003 f898 	bl	d784c <_Z16_fetch_usbserialv>
   d471c:	ed9d 0a03 	vldr	s0, [sp, #12]
   d4720:	4604      	mov	r4, r0
   d4722:	ee10 0a10 	vmov	r0, s0
   d4726:	f003 fef1 	bl	d850c <__aeabi_f2d>
   d472a:	4606      	mov	r6, r0
   d472c:	460f      	mov	r7, r1
   d472e:	4620      	mov	r0, r4

    char *buffer = messageBuffer;
    sprintf(buffer, "%f:%d", voltage, settings.brownoutMinutes);
   d4730:	4c18      	ldr	r4, [pc, #96]	; (d4794 <setup+0xb4>)

  if (brownout)
  {
    float voltage = fuelGuage.getVCell();
    Serial.print("BROWNOUT ");
    Serial.println(voltage);
   d4732:	ec47 6b10 	vmov	d0, r6, r7
   d4736:	2102      	movs	r1, #2
   d4738:	f002 fb5c 	bl	d6df4 <_ZN5Print7printlnEdi>

    char *buffer = messageBuffer;
    sprintf(buffer, "%f:%d", voltage, settings.brownoutMinutes);
   d473c:	68e3      	ldr	r3, [r4, #12]
   d473e:	9300      	str	r3, [sp, #0]
   d4740:	4632      	mov	r2, r6
   d4742:	463b      	mov	r3, r7
   d4744:	4914      	ldr	r1, [pc, #80]	; (d4798 <setup+0xb8>)
   d4746:	4815      	ldr	r0, [pc, #84]	; (d479c <setup+0xbc>)
   d4748:	f001 ff3c 	bl	d65c4 <sprintf>
   d474c:	4b14      	ldr	r3, [pc, #80]	; (d47a0 <setup+0xc0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d474e:	4a13      	ldr	r2, [pc, #76]	; (d479c <setup+0xbc>)
   d4750:	781b      	ldrb	r3, [r3, #0]
   d4752:	4914      	ldr	r1, [pc, #80]	; (d47a4 <setup+0xc4>)
   d4754:	f88d 3000 	strb.w	r3, [sp]
   d4758:	a804      	add	r0, sp, #16
   d475a:	233c      	movs	r3, #60	; 0x3c
   d475c:	f002 fe56 	bl	d740c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4760:	a805      	add	r0, sp, #20
   d4762:	f7ff ff67 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4766:	f7ff fd13 	bl	d4190 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d476a:	f001 fee3 	bl	d6534 <spark_process>
    Particle.publish("Brownout", buffer, 60, PRIVATE);
    Particle.process();

    deepSleep(settings.brownoutMinutes * 60000);
   d476e:	68e3      	ldr	r3, [r4, #12]
   d4770:	f64e 2060 	movw	r0, #60000	; 0xea60
   d4774:	4358      	muls	r0, r3
   d4776:	f7ff fdeb 	bl	d4350 <_Z9deepSleepj>
  }
}
   d477a:	b006      	add	sp, #24
   d477c:	bdd0      	pop	{r4, r6, r7, pc}
   d477e:	bf00      	nop
   d4780:	000d4661 	.word	0x000d4661
   d4784:	000d9408 	.word	0x000d9408
   d4788:	2003e26c 	.word	0x2003e26c
   d478c:	2003e2cc 	.word	0x2003e2cc
   d4790:	000d9411 	.word	0x000d9411
   d4794:	2003e0d4 	.word	0x2003e0d4
   d4798:	000d941b 	.word	0x000d941b
   d479c:	2003e124 	.word	0x2003e124
   d47a0:	2003e284 	.word	0x2003e284
   d47a4:	000d9421 	.word	0x000d9421

000d47a8 <_GLOBAL__sub_I_SystemMode>:

  Serial.print("DURATION ");
  Serial.println(millis() - duration);

  sleepAction();
}
   d47a8:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d47aa:	4b35      	ldr	r3, [pc, #212]	; (d4880 <_GLOBAL__sub_I_SystemMode+0xd8>)

DHT dht(DHT_IN, DHTTYPE);
Adafruit_BME280 bme280;
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);

FuelGauge fuelGuage;
   d47ac:	4e35      	ldr	r6, [pc, #212]	; (d4884 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d47ae:	2500      	movs	r5, #0
   d47b0:	601d      	str	r5, [r3, #0]
   d47b2:	4b35      	ldr	r3, [pc, #212]	; (d4888 <_GLOBAL__sub_I_SystemMode+0xe0>)

  Serial.print("DURATION ");
  Serial.println(millis() - duration);

  sleepAction();
}
   d47b4:	b086      	sub	sp, #24
   d47b6:	2401      	movs	r4, #1
   d47b8:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d47ba:	f001 fc07 	bl	d5fcc <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d47be:	4b33      	ldr	r3, [pc, #204]	; (d488c <_GLOBAL__sub_I_SystemMode+0xe4>)
   d47c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d47c4:	701d      	strb	r5, [r3, #0]
   d47c6:	805d      	strh	r5, [r3, #2]
   d47c8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47ca:	2002      	movs	r0, #2
   d47cc:	f001 fe1e 	bl	d640c <set_system_mode>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <LaCrosse_TX23.h>
#include <ArduinoJson.h>

DHT dht(DHT_IN, DHTTYPE);
   d47d0:	2306      	movs	r3, #6
   d47d2:	4619      	mov	r1, r3
   d47d4:	2216      	movs	r2, #22
   d47d6:	482e      	ldr	r0, [pc, #184]	; (d4890 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d47d8:	f001 fafb 	bl	d5dd2 <_ZN3DHTC1Ehhh>
Adafruit_BME280 bme280;
   d47dc:	482d      	ldr	r0, [pc, #180]	; (d4894 <_GLOBAL__sub_I_SystemMode+0xec>)
   d47de:	f000 ff77 	bl	d56d0 <_ZN15Adafruit_BME280C1Ev>
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);
   d47e2:	4621      	mov	r1, r4

FuelGauge fuelGuage;
   d47e4:	4c2c      	ldr	r4, [pc, #176]	; (d4898 <_GLOBAL__sub_I_SystemMode+0xf0>)
#include <LaCrosse_TX23.h>
#include <ArduinoJson.h>

DHT dht(DHT_IN, DHTTYPE);
Adafruit_BME280 bme280;
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);
   d47e6:	482d      	ldr	r0, [pc, #180]	; (d489c <_GLOBAL__sub_I_SystemMode+0xf4>)
   d47e8:	f001 f9e6 	bl	d5bb8 <_ZN13LaCrosse_TX23C1Ei>

FuelGauge fuelGuage;
   d47ec:	4629      	mov	r1, r5
   d47ee:	4620      	mov	r0, r4
   d47f0:	f002 fbc2 	bl	d6f78 <_ZN9FuelGaugeC1Eb>
   d47f4:	4620      	mov	r0, r4
PMIC pmic;
   d47f6:	4c2a      	ldr	r4, [pc, #168]	; (d48a0 <_GLOBAL__sub_I_SystemMode+0xf8>)

DHT dht(DHT_IN, DHTTYPE);
Adafruit_BME280 bme280;
LaCrosse_TX23 laCrosseTX23(ANEMOMETER);

FuelGauge fuelGuage;
   d47f8:	492a      	ldr	r1, [pc, #168]	; (d48a4 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d47fa:	4632      	mov	r2, r6
   d47fc:	f003 fbd2 	bl	d7fa4 <__aeabi_atexit>
PMIC pmic;
   d4800:	4629      	mov	r1, r5
   d4802:	4620      	mov	r0, r4
   d4804:	f001 ff07 	bl	d6616 <_ZN4PMICC1Eb>
   d4808:	4632      	mov	r2, r6
   d480a:	4927      	ldr	r1, [pc, #156]	; (d48a8 <_GLOBAL__sub_I_SystemMode+0x100>)
   d480c:	4620      	mov	r0, r4
   d480e:	f003 fbc9 	bl	d7fa4 <__aeabi_atexit>
Compass compassSensor;
   d4812:	4826      	ldr	r0, [pc, #152]	; (d48ac <_GLOBAL__sub_I_SystemMode+0x104>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d4814:	4c26      	ldr	r4, [pc, #152]	; (d48b0 <_GLOBAL__sub_I_SystemMode+0x108>)
   d4816:	f000 f85b 	bl	d48d0 <_ZN7CompassC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d481a:	4b26      	ldr	r3, [pc, #152]	; (d48b4 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d481c:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d481e:	4b26      	ldr	r3, [pc, #152]	; (d48b8 <_GLOBAL__sub_I_SystemMode+0x110>)
   d4820:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d4822:	4b26      	ldr	r3, [pc, #152]	; (d48bc <_GLOBAL__sub_I_SystemMode+0x114>)
   d4824:	9304      	str	r3, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4826:	a902      	add	r1, sp, #8
   d4828:	f64e 2360 	movw	r3, #60000	; 0xea60
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d482c:	60e5      	str	r5, [r4, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d482e:	2202      	movs	r2, #2
   d4830:	1d20      	adds	r0, r4, #4
   d4832:	6023      	str	r3, [r4, #0]
   d4834:	f7ff fc3f 	bl	d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d4838:	9b05      	ldr	r3, [sp, #20]
   d483a:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d483c:	9b04      	ldr	r3, [sp, #16]
   d483e:	60e3      	str	r3, [r4, #12]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4840:	4b1f      	ldr	r3, [pc, #124]	; (d48c0 <_GLOBAL__sub_I_SystemMode+0x118>)
   d4842:	61e3      	str	r3, [r4, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d4844:	f104 0014 	add.w	r0, r4, #20
   d4848:	f44f 7300 	mov.w	r3, #512	; 0x200
   d484c:	2209      	movs	r2, #9
   d484e:	491d      	ldr	r1, [pc, #116]	; (d48c4 <_GLOBAL__sub_I_SystemMode+0x11c>)

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4850:	6165      	str	r5, [r4, #20]
   d4852:	61a5      	str	r5, [r4, #24]
   d4854:	6224      	str	r4, [r4, #32]
   d4856:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d485a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d485e:	4b1a      	ldr	r3, [pc, #104]	; (d48c8 <_GLOBAL__sub_I_SystemMode+0x120>)
   d4860:	f001 fc74 	bl	d614c <os_thread_create>
	{
		checkin();
   d4864:	f7ff fc94 	bl	d4190 <_ZN19ApplicationWatchdog7checkinEv>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4868:	a802      	add	r0, sp, #8
   d486a:	f7ff fc68 	bl	d413e <_ZNSt14_Function_baseD1Ev>

ApplicationWatchdog watchDog(60000, watchDogTimeout);
   d486e:	4632      	mov	r2, r6
   d4870:	4916      	ldr	r1, [pc, #88]	; (d48cc <_GLOBAL__sub_I_SystemMode+0x124>)
   d4872:	4620      	mov	r0, r4
   d4874:	f003 fb96 	bl	d7fa4 <__aeabi_atexit>
  reading->pressure = bme280.readPressure();
  reading->bmeHumidity = bme280.readHumidity();
  return !isnan(reading->bmeTemperature) && !isnan(reading->pressure) && reading->pressure > 0 && !isnan(reading->bmeHumidity);
}

STARTUP(deviceSetup());
   d4878:	f7ff fcfc 	bl	d4274 <_Z11deviceSetupv>

  Serial.print("DURATION ");
  Serial.println(millis() - duration);

  sleepAction();
}
   d487c:	b006      	add	sp, #24
   d487e:	bd70      	pop	{r4, r5, r6, pc}
   d4880:	2003e28c 	.word	0x2003e28c
   d4884:	2003e0d0 	.word	0x2003e0d0
   d4888:	2003e284 	.word	0x2003e284
   d488c:	2003e224 	.word	0x2003e224
   d4890:	2003e2b8 	.word	0x2003e2b8
   d4894:	2003e22c 	.word	0x2003e22c
   d4898:	2003e2cc 	.word	0x2003e2cc
   d489c:	2003e288 	.word	0x2003e288
   d48a0:	2003e223 	.word	0x2003e223
   d48a4:	000d6f97 	.word	0x000d6f97
   d48a8:	000d6635 	.word	0x000d6635
   d48ac:	2003e274 	.word	0x2003e274
   d48b0:	2003e290 	.word	0x2003e290
   d48b4:	000d40fd 	.word	0x000d40fd
   d48b8:	000d40b3 	.word	0x000d40b3
   d48bc:	000d40b7 	.word	0x000d40b7
   d48c0:	000d7eed 	.word	0x000d7eed
   d48c4:	000d942a 	.word	0x000d942a
   d48c8:	000d4115 	.word	0x000d4115
   d48cc:	000d4151 	.word	0x000d4151

000d48d0 <_ZN7CompassC1Ev>:
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;

Compass::Compass()
   d48d0:	b530      	push	{r4, r5, lr}
   d48d2:	b085      	sub	sp, #20
   d48d4:	4604      	mov	r4, r0
   d48d6:	f001 faa7 	bl	d5e28 <_ZN8QMC5883LC1Ev>
{
    compass = QMC5883L();
   d48da:	4668      	mov	r0, sp
   d48dc:	f001 faa4 	bl	d5e28 <_ZN8QMC5883LC1Ev>
   d48e0:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   d48e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   d48e8:	4620      	mov	r0, r4
   d48ea:	b005      	add	sp, #20
   d48ec:	bd30      	pop	{r4, r5, pc}
	...

000d48f0 <_ZN7Compass5beginEv>:

bool Compass::begin()
{
   d48f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d48f2:	4604      	mov	r4, r0
    //re-initialize the wire library if necessary
    if(!Wire.isEnabled()) Wire.begin();
   d48f4:	f003 fb16 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d48f8:	f003 f906 	bl	d7b08 <_ZN7TwoWire9isEnabledEv>
   d48fc:	b918      	cbnz	r0, d4906 <_ZN7Compass5beginEv+0x16>
   d48fe:	f003 fb11 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d4902:	f003 f8d7 	bl	d7ab4 <_ZN7TwoWire5beginEv>

    // Check that a device responds at the compass address - don't continue if it doesn't -
    Wire.beginTransmission(QMC5883L_Address);
   d4906:	f003 fb0d 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d490a:	210d      	movs	r1, #13
   d490c:	f003 f8f2 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    int error = Wire.endTransmission();
   d4910:	f003 fb08 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d4914:	f003 f8f5 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>

    if (!error)
   d4918:	4605      	mov	r5, r0
   d491a:	b9f0      	cbnz	r0, d495a <_ZN7Compass5beginEv+0x6a>
    {
        // configure the control registers using static settings above
        // compass autoranges, but starts in the mode given
        compass.dataRegister.OSR_RNG_ODR_MODE = (OSR << 6) | (RNG << 4) | (ODR << 2) | MODE;
   d491c:	2301      	movs	r3, #1
   d491e:	7263      	strb	r3, [r4, #9]
        compass.dataRegister.CR2_INT_ENABLE = CR2;
        compass.dataRegister.SET_RESET_PERIOD = RESETPERIOD;
   d4920:	72e3      	strb	r3, [r4, #11]
    if (!error)
    {
        // configure the control registers using static settings above
        // compass autoranges, but starts in the mode given
        compass.dataRegister.OSR_RNG_ODR_MODE = (OSR << 6) | (RNG << 4) | (ODR << 2) | MODE;
        compass.dataRegister.CR2_INT_ENABLE = CR2;
   d4922:	72a0      	strb	r0, [r4, #10]
        compass.dataRegister.SET_RESET_PERIOD = RESETPERIOD;

        Serial.println("Configuring QMC5883L - OSR 512, range +/-2 Gauss, ODR 10, Continuous");
   d4924:	f002 ff92 	bl	d784c <_Z16_fetch_usbserialv>
   d4928:	490e      	ldr	r1, [pc, #56]	; (d4964 <_ZN7Compass5beginEv+0x74>)
   d492a:	f002 f936 	bl	d6b9a <_ZN5Print7printlnEPKc>
        error = compass.Configure(compass.dataRegister); // use static settings from above - can access register data directly if required..
   d492e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
   d4932:	4620      	mov	r0, r4
   d4934:	f001 fa91 	bl	d5e5a <_ZN8QMC5883L9ConfigureE12QMC5883L_ODR>
        if (error != 0) Serial.println(compass.GetErrorText(error));
   d4938:	4605      	mov	r5, r0
   d493a:	b170      	cbz	r0, d495a <_ZN7Compass5beginEv+0x6a>
   d493c:	f002 ff86 	bl	d784c <_Z16_fetch_usbserialv>
   d4940:	462a      	mov	r2, r5
   d4942:	4606      	mov	r6, r0
   d4944:	4621      	mov	r1, r4
   d4946:	4668      	mov	r0, sp
   d4948:	f001 fb0e 	bl	d5f68 <_ZN8QMC5883L12GetErrorTextEi>
   d494c:	9900      	ldr	r1, [sp, #0]
   d494e:	4630      	mov	r0, r6
   d4950:	f002 f923 	bl	d6b9a <_ZN5Print7printlnEPKc>
   d4954:	4668      	mov	r0, sp
   d4956:	f002 f82c 	bl	d69b2 <_ZN6StringD1Ev>
    }
    return !error;
}
   d495a:	fab5 f085 	clz	r0, r5
   d495e:	0940      	lsrs	r0, r0, #5
   d4960:	b004      	add	sp, #16
   d4962:	bd70      	pop	{r4, r5, r6, pc}
   d4964:	000d9431 	.word	0x000d9431

000d4968 <_ZN7Compass10getReadingEv>:

CompassReading Compass::getReading()
{
   d4968:	b500      	push	{lr}
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d496a:	4601      	mov	r1, r0
    }
    return !error;
}

CompassReading Compass::getReading()
{
   d496c:	b08b      	sub	sp, #44	; 0x2c
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d496e:	f001 fadd 	bl	d5f2c <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d4972:	b00b      	add	sp, #44	; 0x2c
   d4974:	f85d fb04 	ldr.w	pc, [sp], #4

000d4978 <_GLOBAL__sub_I_compass>:
   d4978:	b508      	push	{r3, lr}
   d497a:	f001 fb27 	bl	d5fcc <HAL_Pin_Map>
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d497e:	4802      	ldr	r0, [pc, #8]	; (d4988 <_GLOBAL__sub_I_compass+0x10>)
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d4980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d4984:	f001 ba50 	b.w	d5e28 <_ZN8QMC5883LC1Ev>
   d4988:	2003e2d4 	.word	0x2003e2d4

000d498c <_ZNK19ArduinoJson6100_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
   d498c:	4770      	bx	lr

000d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>:
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
   d498e:	7803      	ldrb	r3, [r0, #0]
   d4990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d4994:	4319      	orrs	r1, r3
   d4996:	7001      	strb	r1, [r0, #0]
   d4998:	4770      	bx	lr

000d499a <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>:
    s2 = s2->next();
  }
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
   d499a:	b538      	push	{r3, r4, r5, lr}
   d499c:	4604      	mov	r4, r0
   d499e:	460d      	mov	r5, r1
  VariantSlot* slot = _head;
  while (slot) {
   d49a0:	b1a4      	cbz	r4, d49cc <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x32>
   d49a2:	68e1      	ldr	r1, [r4, #12]
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = _str;
    if (!actual || !expected) return actual == expected;
   d49a4:	b105      	cbz	r5, d49a8 <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0xe>
   d49a6:	b919      	cbnz	r1, d49b0 <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x16>
   d49a8:	1b4b      	subs	r3, r1, r5
   d49aa:	4258      	negs	r0, r3
   d49ac:	4158      	adcs	r0, r3
   d49ae:	e005      	b.n	d49bc <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x22>
    return strcmp(actual, expected) == 0;
   d49b0:	4628      	mov	r0, r5
   d49b2:	f004 fc2b 	bl	d920c <strcmp>
   d49b6:	fab0 f080 	clz	r0, r0
   d49ba:	0940      	lsrs	r0, r0, #5
    if (key.equals(slot->key())) break;
   d49bc:	b930      	cbnz	r0, d49cc <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x32>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d49be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d49c2:	b113      	cbz	r3, d49ca <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x30>
   d49c4:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   d49c8:	e7ea      	b.n	d49a0 <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x6>
   d49ca:	4604      	mov	r4, r0
    slot = slot->next();
  }
  return slot;
}
   d49cc:	4620      	mov	r0, r4
   d49ce:	bd38      	pop	{r3, r4, r5, pc}

000d49d0 <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  BasicJsonDocument(VariantRef src)
      : JsonDocument(allocPool(src.memoryUsage())) {
    set(src);
  }

  ~BasicJsonDocument() {
   d49d0:	b510      	push	{r4, lr}
   d49d2:	4604      	mov	r4, r0
  void* allocate(size_t n) {
    return malloc(n);
  }

  void deallocate(void* p) {
    free(p);
   d49d4:	6880      	ldr	r0, [r0, #8]
   d49d6:	f001 fde5 	bl	d65a4 <free>
    freePool();
  }
   d49da:	4620      	mov	r0, r4
   d49dc:	bd10      	pop	{r4, pc}

000d49de <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
   d49de:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d49e0:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d49e2:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d49e4:	3310      	adds	r3, #16
   d49e6:	429a      	cmp	r2, r3
   d49e8:	d201      	bcs.n	d49ee <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot) return 0;
   d49ea:	2000      	movs	r0, #0
   d49ec:	bd10      	pop	{r4, pc}
    _right -= bytes;
   d49ee:	f1a2 0310 	sub.w	r3, r2, #16
   d49f2:	608b      	str	r3, [r1, #8]
   d49f4:	2b00      	cmp	r3, #0
   d49f6:	d0f8      	beq.n	d49ea <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>

  if (_tail) {
   d49f8:	6841      	ldr	r1, [r0, #4]
   d49fa:	b119      	cbz	r1, d4a04 <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
   d49fc:	1a5c      	subs	r4, r3, r1
   d49fe:	1124      	asrs	r4, r4, #4
   d4a00:	814c      	strh	r4, [r1, #10]
   d4a02:	e000      	b.n	d4a06 <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
   d4a04:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
   d4a06:	2100      	movs	r1, #0
    _tail = slot;
   d4a08:	6043      	str	r3, [r0, #4]
   d4a0a:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
   d4a0e:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
   d4a12:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
   d4a16:	4618      	mov	r0, r3
}
   d4a18:	bd10      	pop	{r4, pc}
	...

000d4a1c <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv>:
    default:
      return 0;
  }
}

inline bool VariantData::asBoolean() const {
   d4a1c:	b510      	push	{r4, lr}
  switch (type()) {
   d4a1e:	7a03      	ldrb	r3, [r0, #8]
   d4a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4a24:	3b03      	subs	r3, #3
   d4a26:	2b05      	cmp	r3, #5
   d4a28:	d820      	bhi.n	d4a6c <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv+0x50>
   d4a2a:	e8df f003 	tbb	[pc, r3]
   d4a2e:	1717      	.short	0x1717
   d4a30:	0a030303 	.word	0x0a030303
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
    case VALUE_IS_NEGATIVE_INTEGER:
      return _content.asInteger != 0;
   d4a34:	e890 000c 	ldmia.w	r0, {r2, r3}
   d4a38:	4313      	orrs	r3, r2
   d4a3a:	bf14      	ite	ne
   d4a3c:	2001      	movne	r0, #1
   d4a3e:	2000      	moveq	r0, #0
   d4a40:	bd10      	pop	{r4, pc}
    case VALUE_IS_FLOAT:
      return _content.asFloat != 0;
   d4a42:	2200      	movs	r2, #0
   d4a44:	2300      	movs	r3, #0
   d4a46:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4a4a:	f04f 0401 	mov.w	r4, #1
   d4a4e:	f004 f819 	bl	d8a84 <__aeabi_dcmpeq>
   d4a52:	b108      	cbz	r0, d4a58 <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv+0x3c>
   d4a54:	f04f 0400 	mov.w	r4, #0
   d4a58:	b2e0      	uxtb	r0, r4
   d4a5a:	bd10      	pop	{r4, pc}
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return strcmp("true", _content.asString) == 0;
   d4a5c:	6801      	ldr	r1, [r0, #0]
   d4a5e:	4804      	ldr	r0, [pc, #16]	; (d4a70 <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv+0x54>)
   d4a60:	f004 fbd4 	bl	d920c <strcmp>
   d4a64:	fab0 f080 	clz	r0, r0
   d4a68:	0940      	lsrs	r0, r0, #5
   d4a6a:	bd10      	pop	{r4, pc}
    default:
      return false;
   d4a6c:	2000      	movs	r0, #0
  }
}
   d4a6e:	bd10      	pop	{r4, pc}
   d4a70:	000d9476 	.word	0x000d9476

000d4a74 <_ZN19ArduinoJson6100_11013StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
    if (!_slot.value) return;
   d4a74:	6882      	ldr	r2, [r0, #8]

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
   d4a76:	b510      	push	{r4, lr}
    if (!_slot.value) return;
   d4a78:	b14a      	cbz	r2, d4a8e <_ZN19ArduinoJson6100_11013StringBuilder6appendEc+0x1a>

    if (_size >= _slot.size) {
   d4a7a:	6843      	ldr	r3, [r0, #4]
   d4a7c:	68c4      	ldr	r4, [r0, #12]
   d4a7e:	42a3      	cmp	r3, r4
   d4a80:	d302      	bcc.n	d4a88 <_ZN19ArduinoJson6100_11013StringBuilder6appendEc+0x14>
      _slot.value = 0;
   d4a82:	2300      	movs	r3, #0
   d4a84:	6083      	str	r3, [r0, #8]
      return;
   d4a86:	bd10      	pop	{r4, pc}
    }

    _slot.value[_size++] = c;
   d4a88:	1c5c      	adds	r4, r3, #1
   d4a8a:	6044      	str	r4, [r0, #4]
   d4a8c:	54d1      	strb	r1, [r2, r3]
   d4a8e:	bd10      	pop	{r4, pc}

000d4a90 <_ZN19ArduinoJson6100_11013StringBuilder8completeEv>:
  }

  char* complete() {
   d4a90:	b510      	push	{r4, lr}
   d4a92:	4604      	mov	r4, r0
    append('\0');
   d4a94:	2100      	movs	r1, #0
   d4a96:	f7ff ffed 	bl	d4a74 <_ZN19ArduinoJson6100_11013StringBuilder6appendEc>
    if (_slot.value) {
   d4a9a:	68a3      	ldr	r3, [r4, #8]
   d4a9c:	b13b      	cbz	r3, d4aae <_ZN19ArduinoJson6100_11013StringBuilder8completeEv+0x1e>
      _parent->freezeString(_slot, _size);
   d4a9e:	e894 0006 	ldmia.w	r4, {r1, r2}
    checkInvariants();
    return s;
  }

  void freezeString(StringSlot& s, size_t newSize) {
    _left -= (s.size - newSize);
   d4aa2:	68e3      	ldr	r3, [r4, #12]
   d4aa4:	6848      	ldr	r0, [r1, #4]
   d4aa6:	1ad3      	subs	r3, r2, r3
   d4aa8:	4403      	add	r3, r0
   d4aaa:	604b      	str	r3, [r1, #4]
    s.size = newSize;
   d4aac:	60e2      	str	r2, [r4, #12]
    }
    return _slot.value;
  }
   d4aae:	68a0      	ldr	r0, [r4, #8]
   d4ab0:	bd10      	pop	{r4, pc}
	...

000d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>:
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
   d4ab4:	780b      	ldrb	r3, [r1, #0]
   d4ab6:	b90b      	cbnz	r3, d4abc <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv+0x8>
   d4ab8:	6003      	str	r3, [r0, #0]
   d4aba:	e002      	b.n	d4ac2 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv+0xe>
   d4abc:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv+0x14>)
   d4abe:	6003      	str	r3, [r0, #0]
   d4ac0:	2300      	movs	r3, #0
   d4ac2:	6043      	str	r3, [r0, #4]
  }
   d4ac4:	4770      	bx	lr
   d4ac6:	bf00      	nop
   d4ac8:	000d498d 	.word	0x000d498d

000d4acc <_Z12loadSettingsv>:

    return result;
}

Settings* loadSettings()
{
   d4acc:	b570      	push	{r4, r5, r6, lr}
   d4ace:	b088      	sub	sp, #32
    Settings eepromSettings;
    EEPROM.get(0,eepromSettings);
   d4ad0:	f003 fa14 	bl	d7efc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4ad4:	221c      	movs	r2, #28
   d4ad6:	a901      	add	r1, sp, #4
   d4ad8:	2000      	movs	r0, #0
   d4ada:	f001 fb1f 	bl	d611c <HAL_EEPROM_Get>
    Settings* result = &DefaultSettings;

    if(eepromSettings.version >= 0)
   d4ade:	9b01      	ldr	r3, [sp, #4]
   d4ae0:	2b00      	cmp	r3, #0
   d4ae2:	db0c      	blt.n	d4afe <_Z12loadSettingsv+0x32>
    {
        result = (Settings*)malloc(sizeof(Settings));
   d4ae4:	201c      	movs	r0, #28
   d4ae6:	f001 fd55 	bl	d6594 <malloc>
        *result = eepromSettings;
   d4aea:	ac01      	add	r4, sp, #4
   d4aec:	4605      	mov	r5, r0
    EEPROM.get(0,eepromSettings);
    Settings* result = &DefaultSettings;

    if(eepromSettings.version >= 0)
    {
        result = (Settings*)malloc(sizeof(Settings));
   d4aee:	4606      	mov	r6, r0
        *result = eepromSettings;
   d4af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4af4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   d4af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   d4afc:	e000      	b.n	d4b00 <_Z12loadSettingsv+0x34>

Settings* loadSettings()
{
    Settings eepromSettings;
    EEPROM.get(0,eepromSettings);
    Settings* result = &DefaultSettings;
   d4afe:	4e02      	ldr	r6, [pc, #8]	; (d4b08 <_Z12loadSettingsv+0x3c>)
    {
        result = (Settings*)malloc(sizeof(Settings));
        *result = eepromSettings;
    }
    return result;
}
   d4b00:	4630      	mov	r0, r6
   d4b02:	b008      	add	sp, #32
   d4b04:	bd70      	pop	{r4, r5, r6, pc}
   d4b06:	bf00      	nop
   d4b08:	2003e048 	.word	0x2003e048

000d4b0c <_Z12saveSettingsP8Settings>:

void saveSettings(Settings* settings)
{
   d4b0c:	b510      	push	{r4, lr}
   d4b0e:	4604      	mov	r4, r0
    Settings* existingSettings = loadSettings();
   d4b10:	f7ff ffdc 	bl	d4acc <_Z12loadSettingsv>
    
    settings->version = existingSettings->version + 1;
   d4b14:	6803      	ldr	r3, [r0, #0]
   d4b16:	3301      	adds	r3, #1
   d4b18:	6023      	str	r3, [r4, #0]
    Serial.print("SAVING SETTINGS ");
   d4b1a:	f002 fe97 	bl	d784c <_Z16_fetch_usbserialv>
   d4b1e:	490b      	ldr	r1, [pc, #44]	; (d4b4c <_Z12saveSettingsP8Settings+0x40>)
   d4b20:	f002 f828 	bl	d6b74 <_ZN5Print5printEPKc>
    Serial.print(settings->version);
   d4b24:	f002 fe92 	bl	d784c <_Z16_fetch_usbserialv>
   d4b28:	6821      	ldr	r1, [r4, #0]
   d4b2a:	220a      	movs	r2, #10
   d4b2c:	f002 f89a 	bl	d6c64 <_ZN5Print5printEii>
    Serial.println();
   d4b30:	f002 fe8c 	bl	d784c <_Z16_fetch_usbserialv>
   d4b34:	f002 f825 	bl	d6b82 <_ZN5Print7printlnEv>
    
    EEPROM.put(0,*settings);
   d4b38:	f003 f9e0 	bl	d7efc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4b3c:	4621      	mov	r1, r4
   d4b3e:	221c      	movs	r2, #28
   d4b40:	2000      	movs	r0, #0
   d4b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4b46:	f001 baf1 	b.w	d612c <HAL_EEPROM_Put>
   d4b4a:	bf00      	nop
   d4b4c:	000d947b 	.word	0x000d947b

000d4b50 <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
  const size_t mask = sizeof(void *) - 1;
  return (bytes + mask) & ~mask;
   d4b50:	3103      	adds	r1, #3
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
   d4b52:	b538      	push	{r3, r4, r5, lr}
   d4b54:	f021 0403 	bic.w	r4, r1, #3
   d4b58:	4605      	mov	r5, r0

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
    return malloc(n);
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f001 fd1a 	bl	d6594 <malloc>
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
   d4b60:	b110      	cbz	r0, d4b68 <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_+0x18>
   d4b62:	1901      	adds	r1, r0, r4
   d4b64:	460b      	mov	r3, r1
   d4b66:	e001      	b.n	d4b6c <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_+0x1c>
   d4b68:	4601      	mov	r1, r0
   d4b6a:	4603      	mov	r3, r0
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
   d4b6c:	60a8      	str	r0, [r5, #8]
   d4b6e:	60e8      	str	r0, [r5, #12]
   d4b70:	6129      	str	r1, [r5, #16]
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d4b72:	f105 0020 	add.w	r0, r5, #32
   d4b76:	616b      	str	r3, [r5, #20]
   d4b78:	2100      	movs	r1, #0
   d4b7a:	f7ff ff08 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
   d4b7e:	4628      	mov	r0, r5
   d4b80:	bd38      	pop	{r3, r4, r5, pc}

000d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    if (!_loaded) {
   d4b82:	7b83      	ldrb	r3, [r0, #14]
   d4b84:	b933      	cbnz	r3, d4b94 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x12>
 public:
  explicit UnsafeCharPointerReader(const char* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
   d4b86:	6843      	ldr	r3, [r0, #4]
   d4b88:	1c5a      	adds	r2, r3, #1
   d4b8a:	6042      	str	r2, [r0, #4]
   d4b8c:	781b      	ldrb	r3, [r3, #0]
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
   d4b8e:	7343      	strb	r3, [r0, #13]
      _loaded = true;
   d4b90:	2301      	movs	r3, #1
   d4b92:	7383      	strb	r3, [r0, #14]
    }
    return _current;
  }
   d4b94:	7b40      	ldrb	r0, [r0, #13]
   d4b96:	4770      	bx	lr

000d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
    if (c < 'A') return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
   d4b98:	b570      	push	{r4, r5, r6, lr}
   d4b9a:	4604      	mov	r4, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4b9c:	2500      	movs	r5, #0
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff ffef 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4ba4:	280a      	cmp	r0, #10
   d4ba6:	d803      	bhi.n	d4bb0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18>
   d4ba8:	2809      	cmp	r0, #9
   d4baa:	d21d      	bcs.n	d4be8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
   d4bac:	b1b0      	cbz	r0, d4bdc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x44>
   d4bae:	e02f      	b.n	d4c10 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x78>
   d4bb0:	2820      	cmp	r0, #32
   d4bb2:	d019      	beq.n	d4be8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
   d4bb4:	282f      	cmp	r0, #47	; 0x2f
   d4bb6:	d002      	beq.n	d4bbe <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x26>
   d4bb8:	280d      	cmp	r0, #13
   d4bba:	d129      	bne.n	d4c10 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x78>
   d4bbc:	e014      	b.n	d4be8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bbe:	73a5      	strb	r5, [r4, #14]
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f7ff ffde 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4bc6:	282a      	cmp	r0, #42	; 0x2a
   d4bc8:	d002      	beq.n	d4bd0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x38>
   d4bca:	282f      	cmp	r0, #47	; 0x2f
   d4bcc:	d016      	beq.n	d4bfc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x64>
   d4bce:	e01c      	b.n	d4c0a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x72>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bd0:	73a5      	strb	r5, [r4, #14]
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
   d4bd2:	2600      	movs	r6, #0
              for (;;) {
                char c = current();
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f7ff ffd4 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d4bda:	b910      	cbnz	r0, d4be2 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x4a>
   d4bdc:	f04f 0001 	mov.w	r0, #1
   d4be0:	bd70      	pop	{r4, r5, r6, pc}
                if (c == '/' && wasStar) {
   d4be2:	282f      	cmp	r0, #47	; 0x2f
   d4be4:	d102      	bne.n	d4bec <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
   d4be6:	b10e      	cbz	r6, d4bec <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4be8:	73a5      	strb	r5, [r4, #14]
   d4bea:	e7d8      	b.n	d4b9e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x6>
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
                  move();
                  break;
                }
                wasStar = c == '*';
   d4bec:	f1a0 032a 	sub.w	r3, r0, #42	; 0x2a
   d4bf0:	425e      	negs	r6, r3
   d4bf2:	415e      	adcs	r6, r3
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bf4:	73a5      	strb	r5, [r4, #14]
   d4bf6:	e7ed      	b.n	d4bd4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '\n') break;
   d4bf8:	280a      	cmp	r0, #10
   d4bfa:	d0d0      	beq.n	d4b9e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bfc:	73a5      	strb	r5, [r4, #14]
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
   d4bfe:	4620      	mov	r0, r4
   d4c00:	f7ff ffbf 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d4c04:	2800      	cmp	r0, #0
   d4c06:	d1f7      	bne.n	d4bf8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
   d4c08:	e7e8      	b.n	d4bdc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x44>
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
   d4c0a:	f04f 0002 	mov.w	r0, #2
   d4c0e:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;

        default:
          return DeserializationError::Ok;
   d4c10:	f04f 0000 	mov.w	r0, #0
      }
    }
  }
   d4c14:	bd70      	pop	{r4, r5, r6, pc}

000d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getElement(size_t index) const {
    return isArray() ? _content.asCollection.get(index) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
   d4c16:	b508      	push	{r3, lr}
    return isObject() ? _content.asCollection.get(key) : 0;
   d4c18:	7a02      	ldrb	r2, [r0, #8]
   d4c1a:	f002 0220 	and.w	r2, r2, #32
   d4c1e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   d4c22:	b11a      	cbz	r2, d4c2c <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x16>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
   d4c24:	6800      	ldr	r0, [r0, #0]
   d4c26:	f7ff feb8 	bl	d499a <_ZNK19ArduinoJson6100_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	4618      	mov	r0, r3
  }
   d4c2e:	bd08      	pop	{r3, pc}

000d4c30 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
    if (err) return err;
    variant.setOwnedString(make_not_null(value));
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
   d4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c32:	b085      	sub	sp, #20
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}

  StringBuilder startString() {
    return StringBuilder(_pool);
   d4c34:	6882      	ldr	r2, [r0, #8]

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
   d4c36:	9200      	str	r2, [sp, #0]
   d4c38:	2500      	movs	r5, #0
   d4c3a:	9501      	str	r5, [sp, #4]
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
    s.size = size_t(_right - _left);
   d4c3c:	6893      	ldr	r3, [r2, #8]
   d4c3e:	460e      	mov	r6, r1
    return s;
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
   d4c40:	6851      	ldr	r1, [r2, #4]
    s.size = size_t(_right - _left);
    _left = _right;
   d4c42:	6053      	str	r3, [r2, #4]
    _slot = _parent->allocExpandableString();
   d4c44:	1a5b      	subs	r3, r3, r1
   d4c46:	4604      	mov	r4, r0
   d4c48:	9102      	str	r1, [sp, #8]
   d4c4a:	9303      	str	r3, [sp, #12]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d4c4c:	f7ff ff99 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c50:	73a5      	strb	r5, [r4, #14]
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d4c52:	4607      	mov	r7, r0

    move();
    for (;;) {
      char c = current();
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff ff94 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
      move();
      if (c == stopChar) break;
   d4c5a:	4287      	cmp	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c5c:	73a5      	strb	r5, [r4, #14]

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
   d4c5e:	d023      	beq.n	d4ca8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x78>

      if (c == '\0') return DeserializationError::IncompleteInput;
   d4c60:	b910      	cbnz	r0, d4c68 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x38>
   d4c62:	f04f 0001 	mov.w	r0, #1
   d4c66:	e029      	b.n	d4cbc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>

      if (c == '\\') {
   d4c68:	285c      	cmp	r0, #92	; 0x5c
   d4c6a:	d118      	bne.n	d4c9e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6e>
        c = current();
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f7ff ff88 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
        if (c == '\0') return DeserializationError::IncompleteInput;
   d4c72:	2800      	cmp	r0, #0
   d4c74:	d0f5      	beq.n	d4c62 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x32>
        if (c == 'u') {
   d4c76:	2875      	cmp	r0, #117	; 0x75
   d4c78:	d001      	beq.n	d4c7e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x4e>
   d4c7a:	4b11      	ldr	r3, [pc, #68]	; (d4cc0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>)
   d4c7c:	e005      	b.n	d4c8a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x5a>
          DeserializationError err = parseCodepoint(codepoint);
          if (err) return err;
          Utf8::encodeCodepoint(codepoint, builder);
          continue;
#else
          return DeserializationError::NotSupported;
   d4c7e:	f04f 0004 	mov.w	r0, #4
   d4c82:	e01b      	b.n	d4cbc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
   d4c84:	4290      	cmp	r0, r2
   d4c86:	d004      	beq.n	d4c92 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x62>
      p += 2;
   d4c88:	3302      	adds	r3, #2

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
   d4c8a:	781a      	ldrb	r2, [r3, #0]
   d4c8c:	2a00      	cmp	r2, #0
   d4c8e:	d1f9      	bne.n	d4c84 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x54>
   d4c90:	e004      	b.n	d4c9c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6c>
      if (p[0] == c) return p[1];
   d4c92:	7858      	ldrb	r0, [r3, #1]
#endif
        }
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
   d4c94:	b910      	cbnz	r0, d4c9c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6c>
   d4c96:	f04f 0002 	mov.w	r0, #2
   d4c9a:	e00f      	b.n	d4cbc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c9c:	73a5      	strb	r5, [r4, #14]
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
        move();
      }

      builder.append(c);
   d4c9e:	4601      	mov	r1, r0
   d4ca0:	4668      	mov	r0, sp
   d4ca2:	f7ff fee7 	bl	d4a74 <_ZN19ArduinoJson6100_11013StringBuilder6appendEc>
  DeserializationError parseQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();

    move();
    for (;;) {
   d4ca6:	e7d5      	b.n	d4c54 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x24>
      }

      builder.append(c);
    }

    result = builder.complete();
   d4ca8:	4668      	mov	r0, sp
   d4caa:	f7ff fef1 	bl	d4a90 <_ZN19ArduinoJson6100_11013StringBuilder8completeEv>
   d4cae:	6030      	str	r0, [r6, #0]
    if (!result) return DeserializationError::NoMemory;
   d4cb0:	b910      	cbnz	r0, d4cb8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x88>
   d4cb2:	f04f 0003 	mov.w	r0, #3
   d4cb6:	e001      	b.n	d4cbc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
    return DeserializationError::Ok;
   d4cb8:	f04f 0000 	mov.w	r0, #0
  }
   d4cbc:	b005      	add	sp, #20
   d4cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cc0:	000d94ea 	.word	0x000d94ea

000d4cc4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
   d4cc4:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   d4cc8:	2b1b      	cmp	r3, #27
   d4cca:	d913      	bls.n	d4cf4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x30>
   d4ccc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4cd0:	2b19      	cmp	r3, #25
   d4cd2:	d90f      	bls.n	d4cf4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x30>
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
   d4cd4:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   d4cd8:	b2db      	uxtb	r3, r3
   d4cda:	2b0e      	cmp	r3, #14
   d4cdc:	d904      	bls.n	d4ce8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x24>
   d4cde:	f1a0 022e 	sub.w	r2, r0, #46	; 0x2e
   d4ce2:	4250      	negs	r0, r2
   d4ce4:	4150      	adcs	r0, r2
   d4ce6:	4770      	bx	lr
   d4ce8:	f647 72e5 	movw	r2, #32741	; 0x7fe5
   d4cec:	fa22 f303 	lsr.w	r3, r2, r3
   d4cf0:	07db      	lsls	r3, r3, #31
   d4cf2:	d5f4      	bpl.n	d4cde <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x1a>
   d4cf4:	2001      	movs	r0, #1
  }
   d4cf6:	4770      	bx	lr

000d4cf8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char *&key) {
   d4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cfa:	b085      	sub	sp, #20
   d4cfc:	4604      	mov	r4, r0
   d4cfe:	460e      	mov	r6, r1
    if (isQuote(current())) {
   d4d00:	f7ff ff3f 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   d4d04:	2827      	cmp	r0, #39	; 0x27
   d4d06:	d02d      	beq.n	d4d64 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x6c>
   d4d08:	2822      	cmp	r0, #34	; 0x22
   d4d0a:	d02b      	beq.n	d4d64 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x6c>
   d4d0c:	68a2      	ldr	r2, [r4, #8]

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
   d4d0e:	9200      	str	r2, [sp, #0]
   d4d10:	2500      	movs	r5, #0
   d4d12:	9501      	str	r5, [sp, #4]
    return s;
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
   d4d14:	6851      	ldr	r1, [r2, #4]
    s.size = size_t(_right - _left);
   d4d16:	6893      	ldr	r3, [r2, #8]
    _left = _right;
   d4d18:	6053      	str	r3, [r2, #4]
  }

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
   d4d1a:	4620      	mov	r0, r4
    _slot = _parent->allocExpandableString();
   d4d1c:	1a5b      	subs	r3, r3, r1
   d4d1e:	9102      	str	r1, [sp, #8]
   d4d20:	9303      	str	r3, [sp, #12]
   d4d22:	f7ff ff2e 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
    if (c == '\0') return DeserializationError::IncompleteInput;
   d4d26:	4607      	mov	r7, r0
   d4d28:	b1d0      	cbz	r0, d4d60 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x68>

    if (canBeInNonQuotedString(c)) {  // no quotes
   d4d2a:	f7ff ffcb 	bl	d4cc4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d4d2e:	b1a8      	cbz	r0, d4d5c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x64>
      do {
        move();
        builder.append(c);
   d4d30:	4639      	mov	r1, r7
   d4d32:	4668      	mov	r0, sp
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4d34:	73a5      	strb	r5, [r4, #14]
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        builder.append(c);
   d4d36:	f7ff fe9d 	bl	d4a74 <_ZN19ArduinoJson6100_11013StringBuilder6appendEc>
        c = current();
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f7ff ff21 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4d40:	4607      	mov	r7, r0

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
   d4d42:	f7ff ffbf 	bl	d4cc4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d4d46:	2800      	cmp	r0, #0
   d4d48:	d1f2      	bne.n	d4d30 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x38>
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
   d4d4a:	4668      	mov	r0, sp
   d4d4c:	f7ff fea0 	bl	d4a90 <_ZN19ArduinoJson6100_11013StringBuilder8completeEv>
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d4d50:	2800      	cmp	r0, #0
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
   d4d52:	6030      	str	r0, [r6, #0]
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d4d54:	bf0c      	ite	eq
   d4d56:	2003      	moveq	r0, #3
   d4d58:	2000      	movne	r0, #0
   d4d5a:	e007      	b.n	d4d6c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>
        move();
        builder.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
   d4d5c:	2002      	movs	r0, #2
   d4d5e:	e005      	b.n	d4d6c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;
   d4d60:	2001      	movs	r0, #1
   d4d62:	e003      	b.n	d4d6c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>
    }
  }

  DeserializationError parseKey(const char *&key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
   d4d64:	4631      	mov	r1, r6
   d4d66:	4620      	mov	r0, r4
   d4d68:	f7ff ff62 	bl	d4c30 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
    } else {
      return parseNonQuotedString(key);
    }
  }
   d4d6c:	b005      	add	sp, #20
   d4d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d70 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:

  typedef int16_t exponent_type;
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
   d4d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (e > 0) {
   d4d74:	1e05      	subs	r5, r0, #0

  typedef int16_t exponent_type;
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
   d4d76:	ed2d 8b06 	vpush	{d8-d10}
   d4d7a:	ec57 6b10 	vmov	r6, r7, d0
    if (e > 0) {
   d4d7e:	dd34      	ble.n	d4dea <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7a>
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d4d80:	ed9f 8b45 	vldr	d8, [pc, #276]	; d4e98 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x128>
   d4d84:	ed9f 9b46 	vldr	d9, [pc, #280]	; d4ea0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x130>
   d4d88:	ed9f ab47 	vldr	d10, [pc, #284]	; d4ea8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x138>
   d4d8c:	f04f 0800 	mov.w	r8, #0

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d4d90:	07ea      	lsls	r2, r5, #31
   d4d92:	d525      	bpl.n	d4de0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x70>
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d4d94:	f8df 9170 	ldr.w	r9, [pc, #368]	; d4f08 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x198>
   d4d98:	4c59      	ldr	r4, [pc, #356]	; (d4f00 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x190>)
   d4d9a:	f8d9 3000 	ldr.w	r3, [r9]
   d4d9e:	f013 0f01 	tst.w	r3, #1

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d4da2:	fa5f fa88 	uxtb.w	sl, r8
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d4da6:	d111      	bne.n	d4dcc <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5c>
   d4da8:	4648      	mov	r0, r9
   d4daa:	f7ff f97a 	bl	d40a2 <__cxa_guard_acquire>
   d4dae:	b168      	cbz	r0, d4dcc <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5c>
   d4db0:	a33f      	add	r3, pc, #252	; (adr r3, d4eb0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x140>)
   d4db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4db6:	4648      	mov	r0, r9
   d4db8:	ed84 8b0a 	vstr	d8, [r4, #40]	; 0x28
   d4dbc:	ed84 9b0c 	vstr	d9, [r4, #48]	; 0x30
   d4dc0:	ed84 ab0e 	vstr	d10, [r4, #56]	; 0x38
   d4dc4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d4dc8:	f7ff f970 	bl	d40ac <__cxa_guard_release>
    return factors[index];
   d4dcc:	eb04 04ca 	add.w	r4, r4, sl, lsl #3

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d4dd0:	4630      	mov	r0, r6
   d4dd2:	4639      	mov	r1, r7
   d4dd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4dd8:	f003 fbec 	bl	d85b4 <__aeabi_dmul>
   d4ddc:	4606      	mov	r6, r0
   d4dde:	460f      	mov	r7, r1
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
   d4de0:	106d      	asrs	r5, r5, #1
   d4de2:	f108 0801 	add.w	r8, r8, #1
   d4de6:	d1d3      	bne.n	d4d90 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x20>
   d4de8:	e04f      	b.n	d4e8a <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x11a>
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d4dea:	ed9f 8b33 	vldr	d8, [pc, #204]	; d4eb8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x148>
   d4dee:	ed9f 9b34 	vldr	d9, [pc, #208]	; d4ec0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x150>
   d4df2:	ed9f ab35 	vldr	d10, [pc, #212]	; d4ec8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x158>
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = TExponent(-e);
   d4df6:	426d      	negs	r5, r5
   d4df8:	f04f 0800 	mov.w	r8, #0
      for (uint8_t index = 0; e != 0; index++) {
   d4dfc:	2d00      	cmp	r5, #0
   d4dfe:	d044      	beq.n	d4e8a <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x11a>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d4e00:	07eb      	lsls	r3, r5, #31
   d4e02:	d53e      	bpl.n	d4e82 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x112>
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d4e04:	f8df 9104 	ldr.w	r9, [pc, #260]	; d4f0c <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x19c>
   d4e08:	4c3e      	ldr	r4, [pc, #248]	; (d4f04 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x194>)
   d4e0a:	f8d9 3000 	ldr.w	r3, [r9]
   d4e0e:	f013 0f01 	tst.w	r3, #1
        e >>= 1;
      }
    } else {
      e = TExponent(-e);
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d4e12:	fa5f fa88 	uxtb.w	sl, r8
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d4e16:	d12a      	bne.n	d4e6e <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0xfe>
   d4e18:	4648      	mov	r0, r9
   d4e1a:	f7ff f942 	bl	d40a2 <__cxa_guard_acquire>
   d4e1e:	b330      	cbz	r0, d4e6e <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0xfe>
   d4e20:	a32b      	add	r3, pc, #172	; (adr r3, d4ed0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x160>)
   d4e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e26:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d4e2a:	a32b      	add	r3, pc, #172	; (adr r3, d4ed8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x168>)
   d4e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e30:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d4e34:	a32a      	add	r3, pc, #168	; (adr r3, d4ee0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x170>)
   d4e36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e3a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
   d4e3e:	a32a      	add	r3, pc, #168	; (adr r3, d4ee8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x178>)
   d4e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e44:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d4e48:	a329      	add	r3, pc, #164	; (adr r3, d4ef0 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x180>)
   d4e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e4e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   d4e52:	a329      	add	r3, pc, #164	; (adr r3, d4ef8 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x188>)
   d4e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e58:	4648      	mov	r0, r9
   d4e5a:	ed84 8b00 	vstr	d8, [r4]
   d4e5e:	ed84 9b02 	vstr	d9, [r4, #8]
   d4e62:	ed84 ab04 	vstr	d10, [r4, #16]
   d4e66:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d4e6a:	f7ff f91f 	bl	d40ac <__cxa_guard_release>
    return factors[index];
   d4e6e:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
        e >>= 1;
      }
    } else {
      e = TExponent(-e);
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d4e72:	4630      	mov	r0, r6
   d4e74:	4639      	mov	r1, r7
   d4e76:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4e7a:	f003 fb9b 	bl	d85b4 <__aeabi_dmul>
   d4e7e:	4606      	mov	r6, r0
   d4e80:	460f      	mov	r7, r1
        e >>= 1;
   d4e82:	106d      	asrs	r5, r5, #1
   d4e84:	f108 0801 	add.w	r8, r8, #1
   d4e88:	e7b8      	b.n	d4dfc <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8c>
      }
    }
    return m;
  }
   d4e8a:	ecbd 8b06 	vpop	{d8-d10}
   d4e8e:	ec47 6b10 	vmov	d0, r6, r7
   d4e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4e96:	bf00      	nop
   d4e98:	b5056e17 	.word	0xb5056e17
   d4e9c:	4693b8b5 	.word	0x4693b8b5
   d4ea0:	e93ff9f5 	.word	0xe93ff9f5
   d4ea4:	4d384f03 	.word	0x4d384f03
   d4ea8:	f9301d32 	.word	0xf9301d32
   d4eac:	5a827748 	.word	0x5a827748
   d4eb0:	7f73bf3c 	.word	0x7f73bf3c
   d4eb4:	75154fdd 	.word	0x75154fdd
   d4eb8:	9999999a 	.word	0x9999999a
   d4ebc:	3fb99999 	.word	0x3fb99999
   d4ec0:	47ae147b 	.word	0x47ae147b
   d4ec4:	3f847ae1 	.word	0x3f847ae1
   d4ec8:	eb1c432d 	.word	0xeb1c432d
   d4ecc:	3f1a36e2 	.word	0x3f1a36e2
   d4ed0:	e2308c3a 	.word	0xe2308c3a
   d4ed4:	3e45798e 	.word	0x3e45798e
   d4ed8:	97d889bc 	.word	0x97d889bc
   d4edc:	3c9cd2b2 	.word	0x3c9cd2b2
   d4ee0:	d5a8a733 	.word	0xd5a8a733
   d4ee4:	3949f623 	.word	0x3949f623
   d4ee8:	44f4a73d 	.word	0x44f4a73d
   d4eec:	32a50ffd 	.word	0x32a50ffd
   d4ef0:	cf8c979d 	.word	0xcf8c979d
   d4ef4:	255bba08 	.word	0x255bba08
   d4ef8:	64ac6f43 	.word	0x64ac6f43
   d4efc:	0ac80628 	.word	0x0ac80628
   d4f00:	2003e000 	.word	0x2003e000
   d4f04:	2003e2e8 	.word	0x2003e2e8
   d4f08:	2003e330 	.word	0x2003e330
   d4f0c:	2003e2e4 	.word	0x2003e2e4

000d4f10 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d4f14:	780b      	ldrb	r3, [r1, #0]
   d4f16:	2b2b      	cmp	r3, #43	; 0x2b

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4f18:	4604      	mov	r4, r0
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d4f1a:	d004      	beq.n	d4f26 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x16>
   d4f1c:	2b2d      	cmp	r3, #45	; 0x2d
   d4f1e:	d103      	bne.n	d4f28 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18>
    case '-':
      is_negative = true;
      s++;
   d4f20:	3101      	adds	r1, #1
  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
    case '-':
      is_negative = true;
   d4f22:	2501      	movs	r5, #1
      s++;
      break;
   d4f24:	e001      	b.n	d4f2a <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a>
    case '+':
      s++;
   d4f26:	3101      	adds	r1, #1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
   d4f28:	2500      	movs	r5, #0
    case '+':
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
   d4f2a:	780b      	ldrb	r3, [r1, #0]
   d4f2c:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   d4f30:	2a4e      	cmp	r2, #78	; 0x4e
   d4f32:	d102      	bne.n	d4f3a <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a>
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4f34:	2200      	movs	r2, #0
   d4f36:	4b6c      	ldr	r3, [pc, #432]	; (d50e8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1d8>)
   d4f38:	e0c1      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
   d4f3a:	2a49      	cmp	r2, #73	; 0x49
   d4f3c:	d101      	bne.n	d4f42 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x32>
    return is_negative ? -traits::inf() : traits::inf();
   d4f3e:	2200      	movs	r2, #0
   d4f40:	e0a1      	b.n	d5086 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x176>
  if (!isdigit(*s) && *s != '.') return return_type();
   d4f42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4f46:	2a09      	cmp	r2, #9
   d4f48:	d902      	bls.n	d4f50 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x40>
   d4f4a:	2b2e      	cmp	r3, #46	; 0x2e
   d4f4c:	f040 80bb 	bne.w	d50c6 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1b6>
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4f50:	f8df b1a4 	ldr.w	fp, [pc, #420]	; d50f8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e8>
   d4f54:	4688      	mov	r8, r1
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return is_negative ? -traits::inf() : traits::inf();
   d4f56:	2000      	movs	r0, #0
   d4f58:	2100      	movs	r1, #0
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4f5a:	f04f 3a99 	mov.w	sl, #2576980377	; 0x99999999
    mantissa *= 10;
   d4f5e:	f04f 0c0a 	mov.w	ip, #10

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4f62:	46c6      	mov	lr, r8
   d4f64:	f81e 3b01 	ldrb.w	r3, [lr], #1
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
   d4f68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4f6c:	b2d2      	uxtb	r2, r2
   d4f6e:	2a09      	cmp	r2, #9
   d4f70:	d814      	bhi.n	d4f9c <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x8c>
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4f72:	458b      	cmp	fp, r1
   d4f74:	bf08      	it	eq
   d4f76:	4582      	cmpeq	sl, r0
   d4f78:	d311      	bcc.n	d4f9e <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x8e>
    mantissa *= 10;
   d4f7a:	fb0c f301 	mul.w	r3, ip, r1
   d4f7e:	fba0 010c 	umull	r0, r1, r0, ip
   d4f82:	4419      	add	r1, r3
    if (mantissa > maxUint - digit) break;
   d4f84:	2300      	movs	r3, #0
   d4f86:	b2d2      	uxtb	r2, r2
   d4f88:	43df      	mvns	r7, r3
   d4f8a:	43d6      	mvns	r6, r2
   d4f8c:	428f      	cmp	r7, r1
   d4f8e:	bf08      	it	eq
   d4f90:	4286      	cmpeq	r6, r0
   d4f92:	d304      	bcc.n	d4f9e <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x8e>
    mantissa += digit;
   d4f94:	1880      	adds	r0, r0, r2
   d4f96:	4159      	adcs	r1, r3

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4f98:	46f0      	mov	r8, lr
   d4f9a:	e7e2      	b.n	d4f62 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x52>
    if (mantissa > maxUint - digit) break;
    mantissa += digit;
    s++;
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
   d4f9c:	b123      	cbz	r3, d4fa8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x98>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d4f9e:	2300      	movs	r3, #0
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4fa0:	f04f 36ff 	mov.w	r6, #4294967295
   d4fa4:	4f51      	ldr	r7, [pc, #324]	; (d50ec <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1dc>)
   d4fa6:	e00f      	b.n	d4fc8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb8>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d4fa8:	e9c4 0100 	strd	r0, r1, [r4]
   d4fac:	f003 facc 	bl	d8548 <__aeabi_ul2d>
   d4fb0:	2d00      	cmp	r5, #0
   d4fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   d4fb6:	bf0c      	ite	eq
   d4fb8:	2306      	moveq	r3, #6
   d4fba:	2307      	movne	r3, #7
   d4fbc:	e08c      	b.n	d50d8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1c8>

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	220a      	movs	r2, #10
   d4fc2:	f003 ff4d 	bl	d8e60 <__aeabi_uldivmod>
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4fc6:	464b      	mov	r3, r9
   d4fc8:	428f      	cmp	r7, r1
   d4fca:	bf08      	it	eq
   d4fcc:	4286      	cmpeq	r6, r0
   d4fce:	f103 0901 	add.w	r9, r3, #1
   d4fd2:	d3f4      	bcc.n	d4fbe <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xae>
   d4fd4:	ebc8 0703 	rsb	r7, r8, r3
   d4fd8:	eb07 0608 	add.w	r6, r7, r8
   d4fdc:	4643      	mov	r3, r8
    mantissa /= 10;
    exponent_offset++;
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
   d4fde:	f818 2b01 	ldrb.w	r2, [r8], #1
   d4fe2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   d4fe6:	f1be 0f09 	cmp.w	lr, #9
   d4fea:	b236      	sxth	r6, r6
   d4fec:	d9f4      	bls.n	d4fd8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc8>
    exponent_offset++;
    s++;
  }

  if (*s == '.') {
   d4fee:	2a2e      	cmp	r2, #46	; 0x2e
   d4ff0:	d11d      	bne.n	d502e <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x11e>
   d4ff2:	46c6      	mov	lr, r8
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
   d4ff4:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
   d4ff8:	e9d9 8900 	ldrd	r8, r9, [r9]
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4ffc:	f04f 0c0a 	mov.w	ip, #10
   d5000:	4673      	mov	r3, lr
   d5002:	f10e 0e01 	add.w	lr, lr, #1
   d5006:	781f      	ldrb	r7, [r3, #0]
   d5008:	3f30      	subs	r7, #48	; 0x30
   d500a:	b2ff      	uxtb	r7, r7
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d500c:	2f09      	cmp	r7, #9
   d500e:	d80e      	bhi.n	d502e <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x11e>
      if (mantissa < traits::mantissa_max / 10) {
   d5010:	4589      	cmp	r9, r1
   d5012:	bf08      	it	eq
   d5014:	4580      	cmpeq	r8, r0
   d5016:	d3f3      	bcc.n	d5000 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xf0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d5018:	fba0 230c 	umull	r2, r3, r0, ip
   d501c:	fb0c 3301 	mla	r3, ip, r1, r3
   d5020:	19d0      	adds	r0, r2, r7
        exponent_offset--;
   d5022:	f106 36ff 	add.w	r6, r6, #4294967295

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d5026:	f143 0100 	adc.w	r1, r3, #0
        exponent_offset--;
   d502a:	b236      	sxth	r6, r6
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d502c:	e7e8      	b.n	d5000 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xf0>
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
   d502e:	781a      	ldrb	r2, [r3, #0]
   d5030:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   d5034:	2a45      	cmp	r2, #69	; 0x45
   d5036:	d12e      	bne.n	d5096 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x186>
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
   d5038:	785a      	ldrb	r2, [r3, #1]
   d503a:	2a2d      	cmp	r2, #45	; 0x2d
   d503c:	d102      	bne.n	d5044 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x134>
      negative_exponent = true;
      s++;
   d503e:	3302      	adds	r3, #2
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
   d5040:	2701      	movs	r7, #1
   d5042:	e004      	b.n	d504e <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x13e>
      s++;
    } else if (*s == '+') {
   d5044:	2a2b      	cmp	r2, #43	; 0x2b
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
   d5046:	bf14      	ite	ne
   d5048:	3301      	addne	r3, #1
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
   d504a:	3302      	addeq	r3, #2
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
   d504c:	2700      	movs	r7, #0
   d504e:	3b01      	subs	r3, #1
   d5050:	2200      	movs	r2, #0
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
   d5052:	f04f 0c0a 	mov.w	ip, #10
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
   d5056:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   d505a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d505e:	fa5f f88e 	uxtb.w	r8, lr
   d5062:	f1b8 0f09 	cmp.w	r8, #9
   d5066:	d813      	bhi.n	d5090 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x180>
      exponent = exponent * 10 + (*s - '0');
   d5068:	fb0c e202 	mla	r2, ip, r2, lr
      if (exponent + exponent_offset > traits::exponent_max) {
   d506c:	eb06 0e02 	add.w	lr, r6, r2
   d5070:	f5be 7f9a 	cmp.w	lr, #308	; 0x134
   d5074:	ddef      	ble.n	d5056 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x146>
        if (negative_exponent)
          return is_negative ? -0.0f : 0.0f;
   d5076:	2200      	movs	r2, #0
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
   d5078:	b12f      	cbz	r7, d5086 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x176>
          return is_negative ? -0.0f : 0.0f;
   d507a:	b115      	cbz	r5, d5082 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x172>
   d507c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   d5080:	e01d      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
   d5082:	2300      	movs	r3, #0
   d5084:	e01b      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
        else
          return is_negative ? -traits::inf() : traits::inf();
   d5086:	b90d      	cbnz	r5, d508c <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
   d5088:	4b19      	ldr	r3, [pc, #100]	; (d50f0 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e0>)
   d508a:	e018      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
   d508c:	4b19      	ldr	r3, [pc, #100]	; (d50f4 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>)
   d508e:	e016      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
   d5090:	b117      	cbz	r7, d5098 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x188>
   d5092:	4252      	negs	r2, r2
   d5094:	e000      	b.n	d5098 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x188>
      }
      s++;
    }
  }

  int exponent = 0;
   d5096:	2200      	movs	r2, #0
    }
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
   d5098:	4416      	add	r6, r2
   d509a:	f003 fa55 	bl	d8548 <__aeabi_ul2d>
   d509e:	ec41 0b10 	vmov	d0, r0, r1
   d50a2:	4630      	mov	r0, r6
   d50a4:	f7ff fe64 	bl	d4d70 <_ZN19ArduinoJson6100_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
   d50a8:	ec51 0b10 	vmov	r0, r1, d0

  return is_negative ? -result : result;
   d50ac:	b125      	cbz	r5, d50b8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a8>
   d50ae:	ee10 2a10 	vmov	r2, s0
   d50b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d50b6:	e002      	b.n	d50be <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ae>
   d50b8:	ee10 2a10 	vmov	r2, s0
   d50bc:	460b      	mov	r3, r1
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d50be:	e9c4 2302 	strd	r2, r3, [r4, #8]
   d50c2:	2308      	movs	r3, #8
   d50c4:	e008      	b.n	d50d8 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1c8>

namespace ARDUINOJSON_NAMESPACE {

template <typename TFloat, typename TUInt>
struct ParsedNumber {
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
   d50c6:	2200      	movs	r2, #0
   d50c8:	2300      	movs	r3, #0
   d50ca:	e9c4 2300 	strd	r2, r3, [r4]
   d50ce:	2300      	movs	r3, #0
   d50d0:	2200      	movs	r2, #0
   d50d2:	e9c4 2302 	strd	r2, r3, [r4, #8]
   d50d6:	2300      	movs	r3, #0
   d50d8:	7423      	strb	r3, [r4, #16]
  exponent += exponent_offset;

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);

  return is_negative ? -result : result;
}
   d50da:	4620      	mov	r0, r4
   d50dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50e0:	99999998 	.word	0x99999998
   d50e4:	00019999 	.word	0x00019999
   d50e8:	7ff80000 	.word	0x7ff80000
   d50ec:	000fffff 	.word	0x000fffff
   d50f0:	7ff00000 	.word	0x7ff00000
   d50f4:	fff00000 	.word	0xfff00000
   d50f8:	19999999 	.word	0x19999999

000d50fc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(VariantData &result) {
   d50fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5100:	b097      	sub	sp, #92	; 0x5c
   d5102:	4680      	mov	r8, r0
   d5104:	460d      	mov	r5, r1
    char buffer[64];
    uint8_t n = 0;

    char c = current();
   d5106:	f7ff fd3c 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d510a:	2400      	movs	r4, #0
   d510c:	4607      	mov	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d510e:	46a1      	mov	r9, r4
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d5110:	4638      	mov	r0, r7
   d5112:	b2e6      	uxtb	r6, r4
   d5114:	f7ff fdd6 	bl	d4cc4 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d5118:	b158      	cbz	r0, d5132 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x36>
   d511a:	2c3f      	cmp	r4, #63	; 0x3f
   d511c:	d009      	beq.n	d5132 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x36>
      move();
      buffer[n++] = c;
   d511e:	ab06      	add	r3, sp, #24
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d5120:	f888 900e 	strb.w	r9, [r8, #14]
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
   d5124:	54e7      	strb	r7, [r4, r3]
      c = current();
   d5126:	4640      	mov	r0, r8
   d5128:	f7ff fd2b 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d512c:	3401      	adds	r4, #1
   d512e:	4607      	mov	r7, r0
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d5130:	e7ee      	b.n	d5110 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x14>
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
   d5132:	ab16      	add	r3, sp, #88	; 0x58
   d5134:	4433      	add	r3, r6
   d5136:	2400      	movs	r4, #0
   d5138:	f803 4c40 	strb.w	r4, [r3, #-64]

    c = buffer[0];
   d513c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    if (c == 't') {  // true
   d5140:	2b74      	cmp	r3, #116	; 0x74
   d5142:	d109      	bne.n	d5158 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x5c>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d5144:	2105      	movs	r1, #5
   d5146:	f105 0008 	add.w	r0, r5, #8
   d514a:	f7ff fc20 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
   d514e:	2201      	movs	r2, #1
   d5150:	2300      	movs	r3, #0
   d5152:	e9c5 2300 	strd	r2, r3, [r5]
   d5156:	e010      	b.n	d517a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x7e>
      result.setBoolean(true);
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }
    if (c == 'f') {  // false
   d5158:	2b66      	cmp	r3, #102	; 0x66
   d515a:	d10c      	bne.n	d5176 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x7a>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d515c:	f105 0008 	add.w	r0, r5, #8
   d5160:	2105      	movs	r1, #5
   d5162:	f7ff fc14 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
   d5166:	2200      	movs	r2, #0
   d5168:	2300      	movs	r3, #0
   d516a:	e9c5 2300 	strd	r2, r3, [r5]
      result.setBoolean(false);
      return n == 5 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d516e:	1f70      	subs	r0, r6, #5
   d5170:	bf18      	it	ne
   d5172:	2001      	movne	r0, #1
   d5174:	e024      	b.n	d51c0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }
    if (c == 'n') {  // null
   d5176:	2b6e      	cmp	r3, #110	; 0x6e
   d5178:	d101      	bne.n	d517e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x82>
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d517a:	1f30      	subs	r0, r6, #4
   d517c:	e7f8      	b.n	d5170 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x74>
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d517e:	a906      	add	r1, sp, #24
   d5180:	4668      	mov	r0, sp
   d5182:	f7ff fec5 	bl	d4f10 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>

    switch (num.type()) {
   d5186:	f89d 1010 	ldrb.w	r1, [sp, #16]
   d518a:	2907      	cmp	r1, #7
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d518c:	e9dd 6700 	ldrd	r6, r7, [sp]

    switch (num.type()) {
   d5190:	d003      	beq.n	d519a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x9e>
   d5192:	2908      	cmp	r1, #8
   d5194:	d008      	beq.n	d51a8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xac>
   d5196:	2906      	cmp	r1, #6
   d5198:	d110      	bne.n	d51bc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xc0>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d519a:	f105 0008 	add.w	r0, r5, #8
   d519e:	f7ff fbf6 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
    _content.asInteger = value;
   d51a2:	e9c5 6700 	strd	r6, r7, [r5]
   d51a6:	e007      	b.n	d51b8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xbc>
      case VALUE_IS_POSITIVE_INTEGER:
        result.setPositiveInteger(num.uintValue);
        return DeserializationError::Ok;

      case VALUE_IS_FLOAT:
        result.setFloat(num.floatValue);
   d51a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
   d51ac:	f105 0008 	add.w	r0, r5, #8
   d51b0:	f7ff fbed 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
    _content.asFloat = value;
   d51b4:	e9c5 6700 	strd	r6, r7, [r5]
        return DeserializationError::Ok;
   d51b8:	4620      	mov	r0, r4
   d51ba:	e001      	b.n	d51c0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }

    return DeserializationError::InvalidInput;
   d51bc:	f04f 0002 	mov.w	r0, #2
  }
   d51c0:	b017      	add	sp, #92	; 0x5c
   d51c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d51c6 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
   d51c6:	b570      	push	{r4, r5, r6, lr}
   d51c8:	b088      	sub	sp, #32
   d51ca:	460c      	mov	r4, r1
   d51cc:	4606      	mov	r6, r0
    DeserializationError err = skipSpacesAndComments();
   d51ce:	f7ff fce3 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d51d2:	a901      	add	r1, sp, #4
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
   d51d4:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d51d8:	a804      	add	r0, sp, #16
   d51da:	f7ff fc6b 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d51de:	9b04      	ldr	r3, [sp, #16]
   d51e0:	bb5b      	cbnz	r3, d523a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x74>
   d51e2:	9d05      	ldr	r5, [sp, #20]
   d51e4:	f015 0501 	ands.w	r5, r5, #1
   d51e8:	d127      	bne.n	d523a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x74>

    switch (current()) {
   d51ea:	4630      	mov	r0, r6
   d51ec:	f7ff fcc9 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d51f0:	285b      	cmp	r0, #91	; 0x5b
   d51f2:	d10b      	bne.n	d520c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x46>
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
    setType(VALUE_IS_ARRAY);
   d51f4:	f104 0008 	add.w	r0, r4, #8
   d51f8:	2140      	movs	r1, #64	; 0x40
   d51fa:	f7ff fbc8 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d51fe:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d5200:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());
   d5202:	4621      	mov	r1, r4
   d5204:	4630      	mov	r0, r6
   d5206:	f000 f83e 	bl	d5286 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
   d520a:	e00c      	b.n	d5226 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x60>
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
   d520c:	287b      	cmp	r0, #123	; 0x7b
   d520e:	d10c      	bne.n	d522a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x64>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d5210:	2120      	movs	r1, #32
   d5212:	f104 0008 	add.w	r0, r4, #8
   d5216:	f7ff fbba 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d521a:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d521c:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());

      case '{':
        return parseObject(variant.toObject());
   d521e:	4621      	mov	r1, r4
   d5220:	4630      	mov	r0, r6
   d5222:	f000 f896 	bl	d5352 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
   d5226:	b2c0      	uxtb	r0, r0
   d5228:	e02b      	b.n	d5282 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
      if (err) return err;
    }
  }

  DeserializationError parseValue(VariantData &variant) {
    if (isQuote(current())) {
   d522a:	4630      	mov	r0, r6
   d522c:	f7ff fca9 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   d5230:	2827      	cmp	r0, #39	; 0x27
   d5232:	d005      	beq.n	d5240 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x7a>
   d5234:	2822      	cmp	r0, #34	; 0x22
   d5236:	d114      	bne.n	d5262 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x9c>
   d5238:	e002      	b.n	d5240 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x7a>
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d523a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d523e:	e020      	b.n	d5282 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d5240:	a903      	add	r1, sp, #12
   d5242:	4630      	mov	r0, r6
   d5244:	f7ff fcf4 	bl	d4c30 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
    if (err) return err;
   d5248:	a902      	add	r1, sp, #8
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d524a:	f88d 0008 	strb.w	r0, [sp, #8]
    if (err) return err;
   d524e:	a806      	add	r0, sp, #24
   d5250:	f7ff fc30 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d5254:	9b06      	ldr	r3, [sp, #24]
   d5256:	b94b      	cbnz	r3, d526c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xa6>
   d5258:	9807      	ldr	r0, [sp, #28]
   d525a:	f010 0201 	ands.w	r2, r0, #1
   d525e:	d105      	bne.n	d526c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xa6>
   d5260:	e007      	b.n	d5272 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xac>

  DeserializationError parseValue(VariantData &variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
   d5262:	4621      	mov	r1, r4
   d5264:	4630      	mov	r0, r6
   d5266:	f7ff ff49 	bl	d50fc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
   d526a:	e7dc      	b.n	d5226 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x60>
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
    if (err) return err;
   d526c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   d5270:	e007      	b.n	d5282 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
  void setNull() {
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d5272:	f104 0008 	add.w	r0, r4, #8
   d5276:	2104      	movs	r1, #4
    variant.setOwnedString(make_not_null(value));
   d5278:	9d03      	ldr	r5, [sp, #12]
   d527a:	f7ff fb88 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
    _content.asString = s.get();
   d527e:	6025      	str	r5, [r4, #0]
    return DeserializationError::Ok;
   d5280:	4610      	mov	r0, r2
        return parseObject(variant.toObject());

      default:
        return parseValue(variant);
    }
  }
   d5282:	b008      	add	sp, #32
   d5284:	bd70      	pop	{r4, r5, r6, pc}

000d5286 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(CollectionData &array) {
   d5286:	b570      	push	{r4, r5, r6, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d5288:	7b03      	ldrb	r3, [r0, #12]
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(CollectionData &array) {
   d528a:	b088      	sub	sp, #32
   d528c:	4604      	mov	r4, r0
   d528e:	460e      	mov	r6, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d5290:	b913      	cbnz	r3, d5298 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x12>
   d5292:	f04f 0005 	mov.w	r0, #5
   d5296:	e05a      	b.n	d534e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d5298:	f7ff fc73 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d529c:	285b      	cmp	r0, #91	; 0x5b
   d529e:	d110      	bne.n	d52c2 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d52a0:	2300      	movs	r3, #0
   d52a2:	73a3      	strb	r3, [r4, #14]

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d52a4:	4620      	mov	r0, r4
   d52a6:	f7ff fc77 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d52aa:	a901      	add	r1, sp, #4

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d52ac:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d52b0:	a802      	add	r0, sp, #8
   d52b2:	f7ff fbff 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d52b6:	9b02      	ldr	r3, [sp, #8]
   d52b8:	b9bb      	cbnz	r3, d52ea <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d52ba:	9b03      	ldr	r3, [sp, #12]
   d52bc:	07da      	lsls	r2, r3, #31
   d52be:	d414      	bmi.n	d52ea <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d52c0:	e016      	b.n	d52f0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6a>

  DeserializationError parseArray(CollectionData &array) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;
   d52c2:	f04f 0002 	mov.w	r0, #2
   d52c6:	e042      	b.n	d534e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
   d52c8:	7b23      	ldrb	r3, [r4, #12]
   d52ca:	3b01      	subs	r3, #1
   d52cc:	7323      	strb	r3, [r4, #12]
      err = parse(*value);
   d52ce:	4620      	mov	r0, r4
   d52d0:	f7ff ff79 	bl	d51c6 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
      _nestingLimit++;
   d52d4:	7b23      	ldrb	r3, [r4, #12]
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
      err = parse(*value);
   d52d6:	f88d 0004 	strb.w	r0, [sp, #4]
      _nestingLimit++;
   d52da:	3301      	adds	r3, #1
   d52dc:	7323      	strb	r3, [r4, #12]
      if (err) return err;
   d52de:	a901      	add	r1, sp, #4
   d52e0:	a804      	add	r0, sp, #16
   d52e2:	f7ff fbe7 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d52e6:	9b04      	ldr	r3, [sp, #16]
   d52e8:	b153      	cbz	r3, d5300 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x7a>
    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d52ea:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d52ee:	e02e      	b.n	d534e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d52f0:	4620      	mov	r0, r4
   d52f2:	f7ff fc46 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d52f6:	285d      	cmp	r0, #93	; 0x5d
   d52f8:	d120      	bne.n	d533c <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xb6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d52fa:	2000      	movs	r0, #0
   d52fc:	73a0      	strb	r0, [r4, #14]
   d52fe:	e026      	b.n	d534e <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>

      // 1 - Parse value
      _nestingLimit--;
      err = parse(*value);
      _nestingLimit++;
      if (err) return err;
   d5300:	9b05      	ldr	r3, [sp, #20]
   d5302:	07db      	lsls	r3, r3, #31
   d5304:	d4f1      	bmi.n	d52ea <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff fc46 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d530c:	a901      	add	r1, sp, #4
      err = parse(*value);
      _nestingLimit++;
      if (err) return err;

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d530e:	f88d 0004 	strb.w	r0, [sp, #4]
      if (err) return err;
   d5312:	a806      	add	r0, sp, #24
   d5314:	f7ff fbce 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d5318:	9b06      	ldr	r3, [sp, #24]
   d531a:	2b00      	cmp	r3, #0
   d531c:	d1e5      	bne.n	d52ea <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d531e:	9b07      	ldr	r3, [sp, #28]
   d5320:	f013 0501 	ands.w	r5, r3, #1
   d5324:	d1e1      	bne.n	d52ea <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d5326:	4620      	mov	r0, r4
   d5328:	f7ff fc2b 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d532c:	285d      	cmp	r0, #93	; 0x5d
   d532e:	d0e4      	beq.n	d52fa <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x74>
   d5330:	4620      	mov	r0, r4
   d5332:	f7ff fc26 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d5336:	282c      	cmp	r0, #44	; 0x2c
   d5338:	d1c3      	bne.n	d52c2 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d533a:	73a5      	strb	r5, [r4, #14]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
   d533c:	6821      	ldr	r1, [r4, #0]
   d533e:	4630      	mov	r0, r6
   d5340:	f7ff fb4d 	bl	d49de <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE>

    // Read each value
    for (;;) {
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;
   d5344:	4601      	mov	r1, r0
   d5346:	2800      	cmp	r0, #0
   d5348:	d1be      	bne.n	d52c8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x42>
   d534a:	f04f 0003 	mov.w	r0, #3

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }
   d534e:	b008      	add	sp, #32
   d5350:	bd70      	pop	{r4, r5, r6, pc}

000d5352 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:

  DeserializationError parseObject(CollectionData &object) {
   d5352:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d5354:	7b03      	ldrb	r3, [r0, #12]
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(CollectionData &object) {
   d5356:	b08f      	sub	sp, #60	; 0x3c
   d5358:	4604      	mov	r4, r0
   d535a:	460f      	mov	r7, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d535c:	b913      	cbnz	r3, d5364 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x12>
   d535e:	f04f 0005 	mov.w	r0, #5
   d5362:	e098      	b.n	d5496 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d5364:	f7ff fc0d 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d5368:	287b      	cmp	r0, #123	; 0x7b
   d536a:	d17b      	bne.n	d5464 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d536c:	2300      	movs	r3, #0
   d536e:	73a3      	strb	r3, [r4, #14]

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d5370:	4620      	mov	r0, r4
   d5372:	f7ff fc11 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d5376:	4669      	mov	r1, sp

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d5378:	f88d 0000 	strb.w	r0, [sp]
    if (err) return err;
   d537c:	a802      	add	r0, sp, #8
   d537e:	f7ff fb99 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d5382:	9b02      	ldr	r3, [sp, #8]
   d5384:	2b00      	cmp	r3, #0
   d5386:	d14d      	bne.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d5388:	9803      	ldr	r0, [sp, #12]
   d538a:	f010 0501 	ands.w	r5, r0, #1
   d538e:	d149      	bne.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d5390:	4620      	mov	r0, r4
   d5392:	f7ff fbf6 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d5396:	287d      	cmp	r0, #125	; 0x7d
   d5398:	d117      	bne.n	d53ca <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x78>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d539a:	73a5      	strb	r5, [r4, #14]
    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    // Empty object?
    if (eat('}')) return DeserializationError::Ok;
   d539c:	4628      	mov	r0, r5
   d539e:	e07a      	b.n	d5496 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d53a0:	4620      	mov	r0, r4
   d53a2:	f7ff fbee 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d53a6:	282c      	cmp	r0, #44	; 0x2c
   d53a8:	d15c      	bne.n	d5464 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d53aa:	2300      	movs	r3, #0
   d53ac:	73a3      	strb	r3, [r4, #14]
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d53ae:	4620      	mov	r0, r4
   d53b0:	f7ff fbf2 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d53b4:	4669      	mov	r1, sp
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d53b6:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d53ba:	a80c      	add	r0, sp, #48	; 0x30
   d53bc:	f7ff fb7a 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d53c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d53c2:	bb7b      	cbnz	r3, d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d53c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d53c6:	07db      	lsls	r3, r3, #31
   d53c8:	d42c      	bmi.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
    if (eat('}')) return DeserializationError::Ok;

    // Read each key value pair
    for (;;) {
      // Allocate slot in object
      VariantSlot *slot = object.addSlot(_pool);
   d53ca:	6821      	ldr	r1, [r4, #0]
   d53cc:	4638      	mov	r0, r7
   d53ce:	f7ff fb06 	bl	d49de <_ZN19ArduinoJson6100_11014CollectionData7addSlotEPNS_10MemoryPoolE>
      if (!slot) return DeserializationError::NoMemory;
   d53d2:	4605      	mov	r5, r0
   d53d4:	b910      	cbnz	r0, d53dc <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x8a>
   d53d6:	f04f 0003 	mov.w	r0, #3
   d53da:	e05c      	b.n	d5496 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>

      // Parse key
      const char *key;
      err = parseKey(key);
   d53dc:	a901      	add	r1, sp, #4
   d53de:	4620      	mov	r0, r4
   d53e0:	f7ff fc8a 	bl	d4cf8 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
      if (err) return err;
   d53e4:	4669      	mov	r1, sp
      VariantSlot *slot = object.addSlot(_pool);
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
   d53e6:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d53ea:	a804      	add	r0, sp, #16
   d53ec:	f7ff fb62 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d53f0:	9b04      	ldr	r3, [sp, #16]
   d53f2:	b9bb      	cbnz	r3, d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d53f4:	9b05      	ldr	r3, [sp, #20]
   d53f6:	07d8      	lsls	r0, r3, #31
   d53f8:	d414      	bmi.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
   d53fa:	7a2b      	ldrb	r3, [r5, #8]
   d53fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5400:	722b      	strb	r3, [r5, #8]
    _key = k.get();
   d5402:	9b01      	ldr	r3, [sp, #4]
   d5404:	60eb      	str	r3, [r5, #12]
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d5406:	4620      	mov	r0, r4
   d5408:	f7ff fbc6 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;  // Colon
   d540c:	4669      	mov	r1, sp
      err = parseKey(key);
      if (err) return err;
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d540e:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;  // Colon
   d5412:	a806      	add	r0, sp, #24
   d5414:	f7ff fb4e 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d5418:	9b06      	ldr	r3, [sp, #24]
   d541a:	b91b      	cbnz	r3, d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d541c:	9b07      	ldr	r3, [sp, #28]
   d541e:	f013 0601 	ands.w	r6, r3, #1
   d5422:	d002      	beq.n	d542a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd8>
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
      if (err) return err;
   d5424:	f89d 0000 	ldrb.w	r0, [sp]
   d5428:	e035      	b.n	d5496 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d542a:	4620      	mov	r0, r4
   d542c:	f7ff fba9 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d5430:	283a      	cmp	r0, #58	; 0x3a
   d5432:	d117      	bne.n	d5464 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d5434:	7b23      	ldrb	r3, [r4, #12]
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d5436:	73a6      	strb	r6, [r4, #14]
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d5438:	3b01      	subs	r3, #1
   d543a:	7323      	strb	r3, [r4, #12]
      err = parse(*slot->data());
   d543c:	4629      	mov	r1, r5
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff fec1 	bl	d51c6 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
      _nestingLimit++;
   d5444:	7b23      	ldrb	r3, [r4, #12]
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
      err = parse(*slot->data());
   d5446:	f88d 0000 	strb.w	r0, [sp]
      _nestingLimit++;
   d544a:	3301      	adds	r3, #1
   d544c:	7323      	strb	r3, [r4, #12]
      if (err) return err;
   d544e:	4669      	mov	r1, sp
   d5450:	a808      	add	r0, sp, #32
   d5452:	f7ff fb2f 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d5456:	9b08      	ldr	r3, [sp, #32]
   d5458:	2b00      	cmp	r3, #0
   d545a:	d1e3      	bne.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d545e:	07d9      	lsls	r1, r3, #31
   d5460:	d503      	bpl.n	d546a <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x118>
   d5462:	e7df      	b.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
   d5464:	f04f 0002 	mov.w	r0, #2
   d5468:	e015      	b.n	d5496 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
      err = parse(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff fb94 	bl	d4b98 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d5470:	4669      	mov	r1, sp
      err = parse(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d5472:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d5476:	a80a      	add	r0, sp, #40	; 0x28
   d5478:	f7ff fb1c 	bl	d4ab4 <_ZNK19ArduinoJson6100_11020DeserializationErrorcvMS0_KFvvEEv>
   d547c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d547e:	2b00      	cmp	r3, #0
   d5480:	d1d0      	bne.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d5482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5484:	07da      	lsls	r2, r3, #31
   d5486:	d4cd      	bmi.n	d5424 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d5488:	4620      	mov	r0, r4
   d548a:	f7ff fb7a 	bl	d4b82 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d548e:	287d      	cmp	r0, #125	; 0x7d
   d5490:	d186      	bne.n	d53a0 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x4e>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d5492:	2000      	movs	r0, #0
   d5494:	73a0      	strb	r0, [r4, #14]

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
   d5496:	b00f      	add	sp, #60	; 0x3c
   d5498:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d549a:	0000      	movs	r0, r0
   d549c:	0000      	movs	r0, r0
	...

000d54a0 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
};

// ---

template <typename T>
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
   d54a0:	b530      	push	{r4, r5, lr}
   d54a2:	b087      	sub	sp, #28
    const VariantData* _data) {
  return _data != 0 ? _data->asIntegral<T>() : T(0);
   d54a4:	2800      	cmp	r0, #0
   d54a6:	d04b      	beq.n	d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
   d54a8:	7a03      	ldrb	r3, [r0, #8]
   d54aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d54ae:	3b03      	subs	r3, #3
   d54b0:	2b05      	cmp	r3, #5
   d54b2:	d844      	bhi.n	d553e <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x9e>
   d54b4:	e8df f003 	tbb	[pc, r3]
   d54b8:	03030909 	.word	0x03030909
   d54bc:	2d06      	.short	0x2d06
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return convertPositiveInteger<T>(_content.asInteger);
   d54be:	e9d0 0100 	ldrd	r0, r1, [r0]
   d54c2:	e01a      	b.n	d54fa <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x5a>
    case VALUE_IS_NEGATIVE_INTEGER:
      return convertNegativeInteger<T>(_content.asInteger);
   d54c4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d54c8:	e00e      	b.n	d54e8 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x48>
template <typename T>
T parseInteger(const char *s) {
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
   d54ca:	6801      	ldr	r1, [r0, #0]
   d54cc:	4668      	mov	r0, sp
   d54ce:	f7ff fd1f 	bl	d4f10 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
    switch (_type) {
   d54d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d54d6:	2b07      	cmp	r3, #7
   d54d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d54dc:	d004      	beq.n	d54e8 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x48>
   d54de:	2b08      	cmp	r3, #8
   d54e0:	d014      	beq.n	d550c <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6c>
   d54e2:	2b06      	cmp	r3, #6
   d54e4:	d12b      	bne.n	d553e <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x9e>
   d54e6:	e008      	b.n	d54fa <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x5a>
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
}

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
   d54e8:	2300      	movs	r3, #0
   d54ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d54ee:	428b      	cmp	r3, r1
   d54f0:	bf08      	it	eq
   d54f2:	4282      	cmpeq	r2, r0
   d54f4:	d323      	bcc.n	d553e <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x9e>
   d54f6:	4240      	negs	r0, r0
   d54f8:	e022      	b.n	d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
   d54fa:	2300      	movs	r3, #0
   d54fc:	428b      	cmp	r3, r1
   d54fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5502:	bf08      	it	eq
   d5504:	4282      	cmpeq	r2, r0
   d5506:	bf38      	it	cc
   d5508:	2000      	movcc	r0, #0
   d550a:	e019      	b.n	d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
      case VALUE_IS_FLOAT:
        return convertFloat<T>(floatValue);
   d550c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   d5510:	e001      	b.n	d5516 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x76>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseInteger<T>(_content.asString);
    case VALUE_IS_FLOAT:
      return convertFloat<T>(_content.asFloat);
   d5512:	e9d0 4500 	ldrd	r4, r5, [r0]
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
             : 0;
   d5516:	2200      	movs	r2, #0
   d5518:	4b0d      	ldr	r3, [pc, #52]	; (d5550 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xb0>)
   d551a:	4620      	mov	r0, r4
   d551c:	4629      	mov	r1, r5
   d551e:	f003 facf 	bl	d8ac0 <__aeabi_dcmpge>
   d5522:	b168      	cbz	r0, d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>
   d5524:	a308      	add	r3, pc, #32	; (adr r3, d5548 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa8>)
   d5526:	e9d3 2300 	ldrd	r2, r3, [r3]
   d552a:	4620      	mov	r0, r4
   d552c:	4629      	mov	r1, r5
   d552e:	f003 fabd 	bl	d8aac <__aeabi_dcmple>
   d5532:	b128      	cbz	r0, d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>
   d5534:	4620      	mov	r0, r4
   d5536:	4629      	mov	r1, r5
   d5538:	f003 faec 	bl	d8b14 <__aeabi_d2iz>
   d553c:	e000      	b.n	d5540 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0xa0>
   d553e:	2000      	movs	r0, #0
}
   d5540:	b007      	add	sp, #28
   d5542:	bd30      	pop	{r4, r5, pc}
   d5544:	f3af 8000 	nop.w
   d5548:	ffc00000 	.word	0xffc00000
   d554c:	41dfffff 	.word	0x41dfffff
   d5550:	c1e00000 	.word	0xc1e00000

000d5554 <_Z11deserializePKc>:

    return jsonBuffer;
}

Settings* deserialize(const char* json)
{
   d5554:	b510      	push	{r4, lr}
   d5556:	b090      	sub	sp, #64	; 0x40
    const size_t bufferSize = SERIALIZED_SETTINGS_SIZE;
    DynamicJsonDocument jsonBuffer(bufferSize);
   d5558:	f04f 0200 	mov.w	r2, #0

    return jsonBuffer;
}

Settings* deserialize(const char* json)
{
   d555c:	4604      	mov	r4, r0
    const size_t bufferSize = SERIALIZED_SETTINGS_SIZE;
    DynamicJsonDocument jsonBuffer(bufferSize);
   d555e:	21de      	movs	r1, #222	; 0xde
   d5560:	a806      	add	r0, sp, #24
   d5562:	f7ff faf5 	bl	d4b50 <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
    s.size = newSize;
    checkInvariants();
  }

  void clear() {
    _left = _begin;
   d5566:	9b08      	ldr	r3, [sp, #32]
   d5568:	9309      	str	r3, [sp, #36]	; 0x24
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d556a:	2100      	movs	r1, #0
    _right = _end;
   d556c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d556e:	930a      	str	r3, [sp, #40]	; 0x28
   d5570:	a80e      	add	r0, sp, #56	; 0x38
   d5572:	f7ff fa0c 	bl	d498e <_ZN19ArduinoJson6100_11011VariantData7setTypeEh.isra.7>
class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
   d5576:	4b42      	ldr	r3, [pc, #264]	; (d5680 <_Z11deserializePKc+0x12c>)
   d5578:	2c00      	cmp	r4, #0
   d557a:	bf08      	it	eq
   d557c:	461c      	moveq	r4, r3
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   d557e:	ab08      	add	r3, sp, #32
   d5580:	e88d 0018 	stmia.w	sp, {r3, r4}
   d5584:	9302      	str	r3, [sp, #8]
   d5586:	2332      	movs	r3, #50	; 0x32
                                 NestingLimit nestingLimit) {
  doc.clear();
  return makeDeserializer<TDeserializer>(
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
   d5588:	a90c      	add	r1, sp, #48	; 0x30
   d558a:	f88d 300c 	strb.w	r3, [sp, #12]
   d558e:	4668      	mov	r0, sp
   d5590:	2300      	movs	r3, #0
   d5592:	f88d 300e 	strb.w	r3, [sp, #14]
   d5596:	f7ff fe16 	bl	d51c6 <_ZN19ArduinoJson6100_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
    deserializeJson(jsonBuffer, json);

    Settings* result = (Settings*)malloc(sizeof(Settings));
   d559a:	201c      	movs	r0, #28
   d559c:	f000 fffa 	bl	d6594 <malloc>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d55a0:	4938      	ldr	r1, [pc, #224]	; (d5684 <_Z11deserializePKc+0x130>)
   d55a2:	4604      	mov	r4, r0
   d55a4:	a80c      	add	r0, sp, #48	; 0x30
   d55a6:	f7ff fb36 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
   d55aa:	f7ff ff79 	bl	d54a0 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
   d55ae:	4936      	ldr	r1, [pc, #216]	; (d5688 <_Z11deserializePKc+0x134>)

    result->version = jsonBuffer["version"];
   d55b0:	6020      	str	r0, [r4, #0]
   d55b2:	a80c      	add	r0, sp, #48	; 0x30
   d55b4:	f7ff fb2f 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>

template <typename T>
inline typename enable_if<is_same<T, bool>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asBoolean() : false;
   d55b8:	b110      	cbz	r0, d55c0 <_Z11deserializePKc+0x6c>
   d55ba:	f7ff fa2f 	bl	d4a1c <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv>
   d55be:	e7ff      	b.n	d55c0 <_Z11deserializePKc+0x6c>
    result->brownout = jsonBuffer["brownout"];
   d55c0:	7120      	strb	r0, [r4, #4]
   d55c2:	4932      	ldr	r1, [pc, #200]	; (d568c <_Z11deserializePKc+0x138>)
   d55c4:	a80c      	add	r0, sp, #48	; 0x30
   d55c6:	f7ff fb26 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
}

template <typename T>
inline typename enable_if<is_floating_point<T>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asFloat<T>() : T(0);
   d55ca:	2800      	cmp	r0, #0
   d55cc:	d031      	beq.n	d5632 <_Z11deserializePKc+0xde>
}

// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
   d55ce:	7a03      	ldrb	r3, [r0, #8]
   d55d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d55d4:	3b03      	subs	r3, #3
   d55d6:	2b05      	cmp	r3, #5
   d55d8:	d82b      	bhi.n	d5632 <_Z11deserializePKc+0xde>
   d55da:	e8df f003 	tbb	[pc, r3]
   d55de:	0d0d      	.short	0x0d0d
   d55e0:	25060303 	.word	0x25060303
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asInteger);
   d55e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d55e8:	e018      	b.n	d561c <_Z11deserializePKc+0xc8>
    case VALUE_IS_NEGATIVE_INTEGER:
      return -static_cast<T>(_content.asInteger);
   d55ea:	e9d0 0100 	ldrd	r0, r1, [r0]
   d55ee:	f003 fbf1 	bl	d8dd4 <__aeabi_ul2f>
   d55f2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d55f6:	e01d      	b.n	d5634 <_Z11deserializePKc+0xe0>

template <typename T>
inline T parseFloat(const char* s) {
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<Float, T>::type TFloat;
  return parseNumber<TFloat, UInt>(s).template as<T>();
   d55f8:	6801      	ldr	r1, [r0, #0]
   d55fa:	4668      	mov	r0, sp
   d55fc:	f7ff fc88 	bl	d4f10 <_ZN19ArduinoJson6100_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
    switch (_type) {
   d5600:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d5604:	2b07      	cmp	r3, #7
   d5606:	e9dd 0100 	ldrd	r0, r1, [sp]
   d560a:	d004      	beq.n	d5616 <_Z11deserializePKc+0xc2>
   d560c:	2b08      	cmp	r3, #8
   d560e:	d008      	beq.n	d5622 <_Z11deserializePKc+0xce>
   d5610:	2b06      	cmp	r3, #6
   d5612:	d10e      	bne.n	d5632 <_Z11deserializePKc+0xde>
   d5614:	e002      	b.n	d561c <_Z11deserializePKc+0xc8>
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
}

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
   d5616:	4240      	negs	r0, r0
   d5618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
   d561c:	f003 fbda 	bl	d8dd4 <__aeabi_ul2f>
   d5620:	e008      	b.n	d5634 <_Z11deserializePKc+0xe0>
}

template <typename TOut, typename TIn>
typename enable_if<is_floating_point<TOut>::value, TOut>::type convertFloat(
    TIn value) {
  return TOut(value);
   d5622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5626:	e001      	b.n	d562c <_Z11deserializePKc+0xd8>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseFloat<T>(_content.asString);
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
   d5628:	e9d0 0100 	ldrd	r0, r1, [r0]
   d562c:	f003 faba 	bl	d8ba4 <__aeabi_d2f>
   d5630:	e000      	b.n	d5634 <_Z11deserializePKc+0xe0>
    default:
      return 0;
   d5632:	2000      	movs	r0, #0
   d5634:	4916      	ldr	r1, [pc, #88]	; (d5690 <_Z11deserializePKc+0x13c>)
    result->brownoutVoltage = jsonBuffer["brownoutVoltage"];
   d5636:	60a0      	str	r0, [r4, #8]
   d5638:	a80c      	add	r0, sp, #48	; 0x30
   d563a:	f7ff faec 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d563e:	f7ff ff2f 	bl	d54a0 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
   d5642:	4914      	ldr	r1, [pc, #80]	; (d5694 <_Z11deserializePKc+0x140>)
    result->brownoutMinutes = jsonBuffer["brownoutMinutes"];
   d5644:	60e0      	str	r0, [r4, #12]
   d5646:	a80c      	add	r0, sp, #48	; 0x30
   d5648:	f7ff fae5 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d564c:	f7ff ff28 	bl	d54a0 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
   d5650:	4911      	ldr	r1, [pc, #68]	; (d5698 <_Z11deserializePKc+0x144>)
    result->sleepTime = jsonBuffer["sleepTime"];
   d5652:	6120      	str	r0, [r4, #16]
   d5654:	a80c      	add	r0, sp, #48	; 0x30
   d5656:	f7ff fade 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d565a:	f7ff ff21 	bl	d54a0 <_ZN19ArduinoJson6100_1109variantAsIlEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
   d565e:	490f      	ldr	r1, [pc, #60]	; (d569c <_Z11deserializePKc+0x148>)
    result->diagnositicCycles = jsonBuffer["diagnositicCycles"];
   d5660:	6160      	str	r0, [r4, #20]
   d5662:	a80c      	add	r0, sp, #48	; 0x30
   d5664:	f7ff fad7 	bl	d4c16 <_ZNK19ArduinoJson6100_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
}

template <typename T>
inline typename enable_if<is_same<T, bool>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asBoolean() : false;
   d5668:	b110      	cbz	r0, d5670 <_Z11deserializePKc+0x11c>
   d566a:	f7ff f9d7 	bl	d4a1c <_ZNK19ArduinoJson6100_11011VariantData9asBooleanEv>
   d566e:	e7ff      	b.n	d5670 <_Z11deserializePKc+0x11c>
    result->useDeepSleep = jsonBuffer["useDeepSleep"];
   d5670:	7620      	strb	r0, [r4, #24]
  }

  void deallocate(void* p) {
    free(p);
   d5672:	9808      	ldr	r0, [sp, #32]
   d5674:	f000 ff96 	bl	d65a4 <free>

    return result;
}
   d5678:	4620      	mov	r0, r4
   d567a:	b010      	add	sp, #64	; 0x40
   d567c:	bd10      	pop	{r4, pc}
   d567e:	bf00      	nop
   d5680:	000d94f4 	.word	0x000d94f4
   d5684:	000d948c 	.word	0x000d948c
   d5688:	000d9494 	.word	0x000d9494
   d568c:	000d949d 	.word	0x000d949d
   d5690:	000d94ad 	.word	0x000d94ad
   d5694:	000d94bd 	.word	0x000d94bd
   d5698:	000d94c7 	.word	0x000d94c7
   d569c:	000d94d9 	.word	0x000d94d9

000d56a0 <_GLOBAL__sub_I_DefaultSettings>:
    Serial.print("SAVING SETTINGS ");
    Serial.print(settings->version);
    Serial.println();
    
    EEPROM.put(0,*settings);
   d56a0:	b510      	push	{r4, lr}
    30, //sleepTime
    1, //diagnositicCycles
    false //useDeepSleep
};

DynamicJsonDocument jsonBuffer(SERIALIZED_SETTINGS_SIZE);
   d56a2:	4c08      	ldr	r4, [pc, #32]	; (d56c4 <_GLOBAL__sub_I_DefaultSettings+0x24>)
   d56a4:	f000 fc92 	bl	d5fcc <HAL_Pin_Map>
   d56a8:	f04f 0200 	mov.w	r2, #0
   d56ac:	21de      	movs	r1, #222	; 0xde
   d56ae:	4620      	mov	r0, r4
   d56b0:	f7ff fa4e 	bl	d4b50 <_ZN19ArduinoJson6100_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
   d56b4:	4620      	mov	r0, r4
   d56b6:	4a04      	ldr	r2, [pc, #16]	; (d56c8 <_GLOBAL__sub_I_DefaultSettings+0x28>)
   d56b8:	4904      	ldr	r1, [pc, #16]	; (d56cc <_GLOBAL__sub_I_DefaultSettings+0x2c>)
    Serial.print("SAVING SETTINGS ");
    Serial.print(settings->version);
    Serial.println();
    
    EEPROM.put(0,*settings);
   d56ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    30, //sleepTime
    1, //diagnositicCycles
    false //useDeepSleep
};

DynamicJsonDocument jsonBuffer(SERIALIZED_SETTINGS_SIZE);
   d56be:	f002 bc71 	b.w	d7fa4 <__aeabi_atexit>
   d56c2:	bf00      	nop
   d56c4:	2003e338 	.word	0x2003e338
   d56c8:	2003e0d0 	.word	0x2003e0d0
   d56cc:	000d49d1 	.word	0x000d49d1

000d56d0 <_ZN15Adafruit_BME280C1Ev>:

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d56d0:	22ff      	movs	r2, #255	; 0xff
   d56d2:	7302      	strb	r2, [r0, #12]
   d56d4:	7342      	strb	r2, [r0, #13]
   d56d6:	7382      	strb	r2, [r0, #14]
   d56d8:	73c2      	strb	r2, [r0, #15]
{ }
   d56da:	4770      	bx	lr

000d56dc <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d56dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d56e0:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d56e4:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d56e6:	4605      	mov	r5, r0
   d56e8:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d56ea:	d104      	bne.n	d56f6 <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
   d56ec:	4816      	ldr	r0, [pc, #88]	; (d5748 <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
    }
    return reply;
}
   d56ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d56f2:	f001 b8d9 	b.w	d68a8 <_ZN8SPIClass8transferEh>
   d56f6:	2607      	movs	r6, #7
   d56f8:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d56fa:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d56fe:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d5702:	2100      	movs	r1, #0
   d5704:	b280      	uxth	r0, r0
   d5706:	f002 fb64 	bl	d7dd2 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d570a:	f995 000d 	ldrsb.w	r0, [r5, #13]
   d570e:	fa08 f106 	lsl.w	r1, r8, r6
   d5712:	4039      	ands	r1, r7
   d5714:	b280      	uxth	r0, r0
   d5716:	f002 fb5c 	bl	d7dd2 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d571a:	f995 000f 	ldrsb.w	r0, [r5, #15]
   d571e:	2101      	movs	r1, #1
   d5720:	b280      	uxth	r0, r0
   d5722:	f002 fb56 	bl	d7dd2 <digitalWrite>
        if (digitalRead(_miso))
   d5726:	f995 000e 	ldrsb.w	r0, [r5, #14]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d572a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d572c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d572e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d5730:	f002 fb68 	bl	d7e04 <digitalRead>
   d5734:	b108      	cbz	r0, d573a <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
   d5736:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d573a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d573e:	d2de      	bcs.n	d56fe <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
    }
    return reply;
}
   d5740:	4620      	mov	r0, r4
   d5742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5746:	bf00      	nop
   d5748:	2003e6f8 	.word	0x2003e6f8

000d574c <_ZN15Adafruit_BME2806write8Ehh>:



void Adafruit_BME280::write8(byte reg, byte value)
{
   d574c:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d574e:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5752:	3301      	adds	r3, #1
}



void Adafruit_BME280::write8(byte reg, byte value)
{
   d5754:	4604      	mov	r4, r0
   d5756:	460e      	mov	r6, r1
   d5758:	4615      	mov	r5, r2
  if (_cs == -1) {
   d575a:	d116      	bne.n	d578a <_ZN15Adafruit_BME2806write8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d575c:	f002 fbe2 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5760:	7821      	ldrb	r1, [r4, #0]
   d5762:	f002 f9c3 	bl	d7aec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d5766:	f002 fbdd 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d576a:	6803      	ldr	r3, [r0, #0]
   d576c:	4631      	mov	r1, r6
   d576e:	689b      	ldr	r3, [r3, #8]
   d5770:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d5772:	f002 fbd7 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5776:	6803      	ldr	r3, [r0, #0]
   d5778:	4629      	mov	r1, r5
   d577a:	689b      	ldr	r3, [r3, #8]
   d577c:	4798      	blx	r3
    Wire.endTransmission();
   d577e:	f002 fbd1 	bl	d7f24 <_Z19__fetch_global_Wirev>
    if (_sck == -1) {
      SPI.end();
      // SPI.endTransaction();              // release the SPI bus
    }
  }
}
   d5782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
   d5786:	f002 b9bc 	b.w	d7b02 <_ZN7TwoWire15endTransmissionEv>
  } else {
    if (_sck == -1) {
   d578a:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d578e:	3301      	adds	r3, #1
   d5790:	d10e      	bne.n	d57b0 <_ZN15Adafruit_BME2806write8Ehh+0x64>
      SPI.begin();
   d5792:	4817      	ldr	r0, [pc, #92]	; (d57f0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d5794:	f001 f816 	bl	d67c4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d5798:	2128      	movs	r1, #40	; 0x28
   d579a:	4815      	ldr	r0, [pc, #84]	; (d57f0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d579c:	f001 f870 	bl	d6880 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d57a0:	2101      	movs	r1, #1
   d57a2:	4813      	ldr	r0, [pc, #76]	; (d57f0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d57a4:	f001 f820 	bl	d67e8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d57a8:	2100      	movs	r1, #0
   d57aa:	4811      	ldr	r0, [pc, #68]	; (d57f0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   d57ac:	f001 f81f 	bl	d67ee <_ZN8SPIClass11setDataModeEh>
      //SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d57b0:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d57b4:	2100      	movs	r1, #0
   d57b6:	b280      	uxth	r0, r0
   d57b8:	f002 fb0b 	bl	d7dd2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d57bc:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d57c0:	4620      	mov	r0, r4
   d57c2:	f7ff ff8b 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
   d57c6:	4629      	mov	r1, r5
   d57c8:	4620      	mov	r0, r4
   d57ca:	f7ff ff87 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
   d57ce:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d57d2:	2101      	movs	r1, #1
   d57d4:	b280      	uxth	r0, r0
   d57d6:	f002 fafc 	bl	d7dd2 <digitalWrite>
    if (_sck == -1) {
   d57da:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d57de:	3301      	adds	r3, #1
   d57e0:	d104      	bne.n	d57ec <_ZN15Adafruit_BME2806write8Ehh+0xa0>
      SPI.end();
   d57e2:	4803      	ldr	r0, [pc, #12]	; (d57f0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
      // SPI.endTransaction();              // release the SPI bus
    }
  }
}
   d57e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1) {
      SPI.end();
   d57e8:	f000 bff1 	b.w	d67ce <_ZN8SPIClass3endEv>
   d57ec:	bd70      	pop	{r4, r5, r6, pc}
   d57ee:	bf00      	nop
   d57f0:	2003e6f8 	.word	0x2003e6f8

000d57f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d57f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d57f6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d57fa:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d57fe:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d5802:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d5806:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d580a:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d580e:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d5812:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d5816:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
        
    
    _humReg.osrs_h    = humSampling;
   d581a:	f366 1347 	bfi	r3, r6, #5, #3
   d581e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _configReg.filter = filter;
   d5822:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   d5826:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d582a:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d582c:	f367 0302 	bfi	r3, r7, #0, #3
   d5830:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d5834:	f006 0207 	and.w	r2, r6, #7
   d5838:	21f2      	movs	r1, #242	; 0xf2
   d583a:	f7ff ff87 	bl	d574c <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   d583e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5842:	f002 0107 	and.w	r1, r2, #7
   d5846:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d584a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d584e:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d5852:	4620      	mov	r0, r4
   d5854:	21f5      	movs	r1, #245	; 0xf5
   d5856:	f7ff ff79 	bl	d574c <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   d585a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d585e:	f002 0107 	and.w	r1, r2, #7
   d5862:	f002 0338 	and.w	r3, r2, #56	; 0x38
   d5866:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d586a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d586e:	4620      	mov	r0, r4
   d5870:	21f4      	movs	r1, #244	; 0xf4
}
   d5872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5876:	f7ff bf69 	b.w	d574c <_ZN15Adafruit_BME2806write8Ehh>
	...

000d587c <_ZN15Adafruit_BME2805read8Eh>:
/*!
    @brief  Read an 8 bit value over I2C or SPI
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg)
{
   d587c:	b538      	push	{r3, r4, r5, lr}
    uint8_t value;


    if (_cs == -1) {
   d587e:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d5882:	3301      	adds	r3, #1
/*!
    @brief  Read an 8 bit value over I2C or SPI
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg)
{
   d5884:	4604      	mov	r4, r0
   d5886:	460d      	mov	r5, r1
    uint8_t value;


    if (_cs == -1) {
   d5888:	d11f      	bne.n	d58ca <_ZN15Adafruit_BME2805read8Eh+0x4e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d588a:	f002 fb4b 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d588e:	7821      	ldrb	r1, [r4, #0]
   d5890:	f002 f92c 	bl	d7aec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d5894:	f002 fb46 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5898:	6803      	ldr	r3, [r0, #0]
   d589a:	4629      	mov	r1, r5
   d589c:	689b      	ldr	r3, [r3, #8]
   d589e:	4798      	blx	r3
    Wire.endTransmission();
   d58a0:	f002 fb40 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d58a4:	f002 f92d 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   d58a8:	f002 fb3c 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d58ac:	2201      	movs	r2, #1
   d58ae:	7821      	ldrb	r1, [r4, #0]
   d58b0:	f002 f90f 	bl	d7ad2 <_ZN7TwoWire11requestFromEhh>
    value = Wire.read();
   d58b4:	f002 fb36 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d58b8:	6803      	ldr	r3, [r0, #0]
   d58ba:	695b      	ldr	r3, [r3, #20]
   d58bc:	4798      	blx	r3
   d58be:	b2c5      	uxtb	r5, r0
    Wire.endTransmission();
   d58c0:	f002 fb30 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d58c4:	f002 f91d 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
   d58c8:	e02f      	b.n	d592a <_ZN15Adafruit_BME2805read8Eh+0xae>
  } else {
    if (_sck == -1) {
   d58ca:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d58ce:	3301      	adds	r3, #1
   d58d0:	d10e      	bne.n	d58f0 <_ZN15Adafruit_BME2805read8Eh+0x74>
      SPI.begin();
   d58d2:	4817      	ldr	r0, [pc, #92]	; (d5930 <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d58d4:	f000 ff76 	bl	d67c4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d58d8:	2128      	movs	r1, #40	; 0x28
   d58da:	4815      	ldr	r0, [pc, #84]	; (d5930 <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d58dc:	f000 ffd0 	bl	d6880 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d58e0:	2101      	movs	r1, #1
   d58e2:	4813      	ldr	r0, [pc, #76]	; (d5930 <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d58e4:	f000 ff80 	bl	d67e8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d58e8:	2100      	movs	r1, #0
   d58ea:	4811      	ldr	r0, [pc, #68]	; (d5930 <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d58ec:	f000 ff7f 	bl	d67ee <_ZN8SPIClass11setDataModeEh>
      // SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d58f0:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d58f4:	2100      	movs	r1, #0
   d58f6:	b280      	uxth	r0, r0
   d58f8:	f002 fa6b 	bl	d7dd2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d58fc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5900:	4620      	mov	r0, r4
   d5902:	f7ff feeb 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
   d5906:	2100      	movs	r1, #0
   d5908:	4620      	mov	r0, r4
   d590a:	f7ff fee7 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
   d590e:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d5910:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5914:	2101      	movs	r1, #1
   d5916:	b280      	uxth	r0, r0
   d5918:	f002 fa5b 	bl	d7dd2 <digitalWrite>
    if (_sck == -1) {
   d591c:	f994 300f 	ldrsb.w	r3, [r4, #15]
   d5920:	3301      	adds	r3, #1
   d5922:	d102      	bne.n	d592a <_ZN15Adafruit_BME2805read8Eh+0xae>
      SPI.end();
   d5924:	4802      	ldr	r0, [pc, #8]	; (d5930 <_ZN15Adafruit_BME2805read8Eh+0xb4>)
   d5926:	f000 ff52 	bl	d67ce <_ZN8SPIClass3endEv>
      // SPI.endTransaction();              // release the SPI bus
    }
  }
  return value;
}
   d592a:	4628      	mov	r0, r5
   d592c:	bd38      	pop	{r3, r4, r5, pc}
   d592e:	bf00      	nop
   d5930:	2003e6f8 	.word	0x2003e6f8

000d5934 <_ZN15Adafruit_BME2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C or SPI
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d5934:	b538      	push	{r3, r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
   d5936:	f990 300c 	ldrsb.w	r3, [r0, #12]
   d593a:	3301      	adds	r3, #1
/*!
    @brief  Reads a 16 bit value over I2C or SPI
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d593c:	4605      	mov	r5, r0
   d593e:	460c      	mov	r4, r1
  uint16_t value;

  if (_cs == -1) {
   d5940:	d127      	bne.n	d5992 <_ZN15Adafruit_BME2806read16Eh+0x5e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d5942:	f002 faef 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5946:	7829      	ldrb	r1, [r5, #0]
   d5948:	f002 f8d0 	bl	d7aec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d594c:	f002 faea 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5950:	6803      	ldr	r3, [r0, #0]
   d5952:	4621      	mov	r1, r4
   d5954:	689b      	ldr	r3, [r3, #8]
   d5956:	4798      	blx	r3
    Wire.endTransmission();
   d5958:	f002 fae4 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d595c:	f002 f8d1 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   d5960:	f002 fae0 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5964:	2202      	movs	r2, #2
   d5966:	7829      	ldrb	r1, [r5, #0]
   d5968:	f002 f8b3 	bl	d7ad2 <_ZN7TwoWire11requestFromEhh>
    value = (Wire.read() << 8) | Wire.read();
   d596c:	f002 fada 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5970:	6803      	ldr	r3, [r0, #0]
   d5972:	695b      	ldr	r3, [r3, #20]
   d5974:	4798      	blx	r3
   d5976:	4604      	mov	r4, r0
   d5978:	f002 fad4 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d597c:	6803      	ldr	r3, [r0, #0]
   d597e:	695b      	ldr	r3, [r3, #20]
   d5980:	4798      	blx	r3
   d5982:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5986:	b284      	uxth	r4, r0
    Wire.endTransmission();
   d5988:	f002 facc 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d598c:	f002 f8b9 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
   d5990:	e036      	b.n	d5a00 <_ZN15Adafruit_BME2806read16Eh+0xcc>
  } else {
    if (_sck == -1) {
   d5992:	f990 300f 	ldrsb.w	r3, [r0, #15]
   d5996:	3301      	adds	r3, #1
   d5998:	d10e      	bne.n	d59b8 <_ZN15Adafruit_BME2806read16Eh+0x84>
      SPI.begin();
   d599a:	481a      	ldr	r0, [pc, #104]	; (d5a04 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d599c:	f000 ff12 	bl	d67c4 <_ZN8SPIClass5beginEv>
      SPI.setClockDivider(SPI_CLOCK_DIV64);
   d59a0:	2128      	movs	r1, #40	; 0x28
   d59a2:	4818      	ldr	r0, [pc, #96]	; (d5a04 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d59a4:	f000 ff6c 	bl	d6880 <_ZN8SPIClass15setClockDividerEh>
      SPI.setBitOrder(MSBFIRST);
   d59a8:	2101      	movs	r1, #1
   d59aa:	4816      	ldr	r0, [pc, #88]	; (d5a04 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d59ac:	f000 ff1c 	bl	d67e8 <_ZN8SPIClass11setBitOrderEh>
      SPI.setDataMode(SPI_MODE0);
   d59b0:	2100      	movs	r1, #0
   d59b2:	4814      	ldr	r0, [pc, #80]	; (d5a04 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d59b4:	f000 ff1b 	bl	d67ee <_ZN8SPIClass11setDataModeEh>
      // SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
    }
    digitalWrite(_cs, LOW);
   d59b8:	f995 000c 	ldrsb.w	r0, [r5, #12]
   d59bc:	2100      	movs	r1, #0
   d59be:	b280      	uxth	r0, r0
   d59c0:	f002 fa07 	bl	d7dd2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d59c4:	f044 0180 	orr.w	r1, r4, #128	; 0x80
   d59c8:	4628      	mov	r0, r5
   d59ca:	f7ff fe87 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   d59ce:	2100      	movs	r1, #0
   d59d0:	4628      	mov	r0, r5
   d59d2:	f7ff fe83 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
   d59d6:	2100      	movs	r1, #0
   d59d8:	4604      	mov	r4, r0
   d59da:	4628      	mov	r0, r5
   d59dc:	f7ff fe7e 	bl	d56dc <_ZN15Adafruit_BME2807spixferEh>
   d59e0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d59e4:	b284      	uxth	r4, r0
    digitalWrite(_cs, HIGH);
   d59e6:	f995 000c 	ldrsb.w	r0, [r5, #12]
   d59ea:	2101      	movs	r1, #1
   d59ec:	b280      	uxth	r0, r0
   d59ee:	f002 f9f0 	bl	d7dd2 <digitalWrite>
    if (_sck == -1) {
   d59f2:	f995 300f 	ldrsb.w	r3, [r5, #15]
   d59f6:	3301      	adds	r3, #1
   d59f8:	d102      	bne.n	d5a00 <_ZN15Adafruit_BME2806read16Eh+0xcc>
      SPI.end();
   d59fa:	4802      	ldr	r0, [pc, #8]	; (d5a04 <_ZN15Adafruit_BME2806read16Eh+0xd0>)
   d59fc:	f000 fee7 	bl	d67ce <_ZN8SPIClass3endEv>
      // SPI.endTransaction();              // release the SPI bus
    }
  }
  return value;
}
   d5a00:	4620      	mov	r0, r4
   d5a02:	bd38      	pop	{r3, r4, r5, pc}
   d5a04:	2003e6f8 	.word	0x2003e6f8

000d5a08 <_ZN15Adafruit_BME2809read16_LEEh>:
/**************************************************************************/
/*!
    
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d5a08:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d5a0a:	f7ff ff93 	bl	d5934 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d5a0e:	ba40      	rev16	r0, r0
}
   d5a10:	b280      	uxth	r0, r0
   d5a12:	bd08      	pop	{r3, pc}

000d5a14 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5a14:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5a16:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d5a18:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5a1a:	f7ff fff5 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a1e:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5a20:	8220      	strh	r0, [r4, #16]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a22:	4620      	mov	r0, r4
   d5a24:	f7ff fff0 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a28:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5a2a:	8260      	strh	r0, [r4, #18]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	f7ff ffeb 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5a32:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5a34:	82a0      	strh	r0, [r4, #20]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5a36:	4620      	mov	r0, r4
   d5a38:	f7ff ffe6 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a3c:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5a3e:	82e0      	strh	r0, [r4, #22]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a40:	4620      	mov	r0, r4
   d5a42:	f7ff ffe1 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a46:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5a48:	8320      	strh	r0, [r4, #24]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	f7ff ffdc 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a50:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5a52:	8360      	strh	r0, [r4, #26]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a54:	4620      	mov	r0, r4
   d5a56:	f7ff ffd7 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a5a:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5a5c:	83a0      	strh	r0, [r4, #28]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a5e:	4620      	mov	r0, r4
   d5a60:	f7ff ffd2 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a64:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5a66:	83e0      	strh	r0, [r4, #30]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a68:	4620      	mov	r0, r4
   d5a6a:	f7ff ffcd 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a6e:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5a70:	8420      	strh	r0, [r4, #32]
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a72:	4620      	mov	r0, r4
   d5a74:	f7ff ffc8 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a78:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5a7a:	8460      	strh	r0, [r4, #34]	; 0x22
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	f7ff ffc3 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
   d5a82:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5a84:	84a0      	strh	r0, [r4, #36]	; 0x24
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a86:	4620      	mov	r0, r4
   d5a88:	f7ff ffbe 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5a8c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5a8e:	84e0      	strh	r0, [r4, #38]	; 0x26

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5a90:	4620      	mov	r0, r4
   d5a92:	f7ff fef3 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a96:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5a98:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff ffb3 	bl	d5a08 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5aa2:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5aa4:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	f7ff fee8 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5aac:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5aae:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	f7ff fee2 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5ab8:	21e5      	movs	r1, #229	; 0xe5
   d5aba:	4605      	mov	r5, r0
   d5abc:	4620      	mov	r0, r4
   d5abe:	f7ff fedd 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5ac2:	f000 000f 	and.w	r0, r0, #15
   d5ac6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5aca:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d5acc:	21e6      	movs	r1, #230	; 0xe6
   d5ace:	4620      	mov	r0, r4
   d5ad0:	f7ff fed4 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5ad4:	21e5      	movs	r1, #229	; 0xe5
   d5ad6:	4605      	mov	r5, r0
   d5ad8:	4620      	mov	r0, r4
   d5ada:	f7ff fecf 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5ade:	1100      	asrs	r0, r0, #4
   d5ae0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d5ae4:	8620      	strh	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5ae6:	21e7      	movs	r1, #231	; 0xe7
   d5ae8:	4620      	mov	r0, r4
   d5aea:	f7ff fec7 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5aee:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
   d5af2:	bd38      	pop	{r3, r4, r5, pc}

000d5af4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
    @brief return true if chip is busy reading cal data
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d5af4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d5af6:	21f3      	movs	r1, #243	; 0xf3
   d5af8:	f7ff fec0 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d5afc:	f000 0001 	and.w	r0, r0, #1
   d5b00:	bd08      	pop	{r3, pc}
	...

000d5b04 <_ZN15Adafruit_BME2805beginEh>:
/*!
    @brief  Initialise sensor with given parameters / settings
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t           addr)
{
   d5b04:	b530      	push	{r4, r5, lr}
   d5b06:	4604      	mov	r4, r0
    _i2caddr = addr;
   d5b08:	7001      	strb	r1, [r0, #0]

    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5b0a:	f990 000c 	ldrsb.w	r0, [r0, #12]
   d5b0e:	1c42      	adds	r2, r0, #1
/*!
    @brief  Initialise sensor with given parameters / settings
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t           addr)
{
   d5b10:	b085      	sub	sp, #20
    _i2caddr = addr;

    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d5b12:	d104      	bne.n	d5b1e <_ZN15Adafruit_BME2805beginEh+0x1a>
        // I2C
        Wire.begin();
   d5b14:	f002 fa06 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5b18:	f001 ffcc 	bl	d7ab4 <_ZN7TwoWire5beginEv>
   d5b1c:	e021      	b.n	d5b62 <_ZN15Adafruit_BME2805beginEh+0x5e>
    } else {
        digitalWrite(_cs, HIGH);
   d5b1e:	2101      	movs	r1, #1
   d5b20:	b280      	uxth	r0, r0
   d5b22:	f002 f956 	bl	d7dd2 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5b26:	f994 000c 	ldrsb.w	r0, [r4, #12]
   d5b2a:	2101      	movs	r1, #1
   d5b2c:	b280      	uxth	r0, r0
   d5b2e:	f002 f93f 	bl	d7db0 <pinMode>
        if (_sck == -1) {
   d5b32:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d5b36:	1c43      	adds	r3, r0, #1
   d5b38:	d103      	bne.n	d5b42 <_ZN15Adafruit_BME2805beginEh+0x3e>
            // hardware SPI
            SPI.begin();
   d5b3a:	481d      	ldr	r0, [pc, #116]	; (d5bb0 <_ZN15Adafruit_BME2805beginEh+0xac>)
   d5b3c:	f000 fe42 	bl	d67c4 <_ZN8SPIClass5beginEv>
   d5b40:	e00f      	b.n	d5b62 <_ZN15Adafruit_BME2805beginEh+0x5e>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d5b42:	2101      	movs	r1, #1
   d5b44:	b280      	uxth	r0, r0
   d5b46:	f002 f933 	bl	d7db0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5b4a:	f994 000d 	ldrsb.w	r0, [r4, #13]
   d5b4e:	2101      	movs	r1, #1
   d5b50:	b280      	uxth	r0, r0
   d5b52:	f002 f92d 	bl	d7db0 <pinMode>
            pinMode(_miso, INPUT);
   d5b56:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5b5a:	2100      	movs	r1, #0
   d5b5c:	b280      	uxth	r0, r0
   d5b5e:	f002 f927 	bl	d7db0 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   d5b62:	21d0      	movs	r1, #208	; 0xd0
   d5b64:	4620      	mov	r0, r4
   d5b66:	f7ff fe89 	bl	d587c <_ZN15Adafruit_BME2805read8Eh>
   d5b6a:	2860      	cmp	r0, #96	; 0x60
   d5b6c:	d11d      	bne.n	d5baa <_ZN15Adafruit_BME2805beginEh+0xa6>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5b6e:	4620      	mov	r0, r4
   d5b70:	22b6      	movs	r2, #182	; 0xb6
   d5b72:	21e0      	movs	r1, #224	; 0xe0
   d5b74:	f7ff fdea 	bl	d574c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d5b78:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5b7c:	f001 f998 	bl	d6eb0 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d5b80:	4620      	mov	r0, r4
   d5b82:	f7ff ffb7 	bl	d5af4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5b86:	4605      	mov	r5, r0
   d5b88:	b108      	cbz	r0, d5b8e <_ZN15Adafruit_BME2805beginEh+0x8a>
          delay(100);
   d5b8a:	2064      	movs	r0, #100	; 0x64
   d5b8c:	e7f6      	b.n	d5b7c <_ZN15Adafruit_BME2805beginEh+0x78>


    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5b8e:	4620      	mov	r0, r4
   d5b90:	f7ff ff40 	bl	d5a14 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d5b94:	2305      	movs	r3, #5
   d5b96:	4620      	mov	r0, r4
   d5b98:	9502      	str	r5, [sp, #8]
   d5b9a:	9501      	str	r5, [sp, #4]
   d5b9c:	9300      	str	r3, [sp, #0]
   d5b9e:	461a      	mov	r2, r3
   d5ba0:	2103      	movs	r1, #3
   d5ba2:	f7ff fe27 	bl	d57f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    return true;
   d5ba6:	2001      	movs	r0, #1
   d5ba8:	e000      	b.n	d5bac <_ZN15Adafruit_BME2805beginEh+0xa8>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
        return false;
   d5baa:	2000      	movs	r0, #0
    readCoefficients(); // read trimming parameters, see DS 4.2.2

    setSampling(); // use defaults

    return true;
}
   d5bac:	b005      	add	sp, #20
   d5bae:	bd30      	pop	{r4, r5, pc}
   d5bb0:	2003e6f8 	.word	0x2003e6f8

000d5bb4 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d5bb4:	f000 ba0a 	b.w	d5fcc <HAL_Pin_Map>

000d5bb8 <_ZN13LaCrosse_TX23C1Ei>:
  BSD license, all text above must be included in any redistribution
*************************************************************************************************/

#include <LaCrosse_TX23.h>

LaCrosse_TX23::LaCrosse_TX23(int pin)
   d5bb8:	b538      	push	{r3, r4, r5, lr}
   d5bba:	4604      	mov	r4, r0
   d5bbc:	460d      	mov	r5, r1
{
pinMode(pin, INPUT);
   d5bbe:	b2a8      	uxth	r0, r5
   d5bc0:	2100      	movs	r1, #0
   d5bc2:	f002 f8f5 	bl	d7db0 <pinMode>
_pin = pin;
   d5bc6:	6025      	str	r5, [r4, #0]
}
   d5bc8:	4620      	mov	r0, r4
   d5bca:	bd38      	pop	{r3, r4, r5, pc}

000d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>:

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
   d5bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d5bce:	2400      	movs	r4, #0
	{
		d[i/8] |= src[i]<<(i%8);
   d5bd0:	2708      	movs	r7, #8
}

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d5bd2:	4294      	cmp	r4, r2
   d5bd4:	da12      	bge.n	d5bfc <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x30>
	{
		d[i/8] |= src[i]<<(i%8);
   d5bd6:	fb94 f6f7 	sdiv	r6, r4, r7
   d5bda:	4b09      	ldr	r3, [pc, #36]	; (d5c00 <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x34>)
   d5bdc:	5d0d      	ldrb	r5, [r1, r4]
   d5bde:	4023      	ands	r3, r4
   d5be0:	2b00      	cmp	r3, #0
   d5be2:	bfbe      	ittt	lt
   d5be4:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5be8:	f063 0307 	ornlt	r3, r3, #7
   d5bec:	3301      	addlt	r3, #1
   d5bee:	fa05 f303 	lsl.w	r3, r5, r3
   d5bf2:	5d85      	ldrb	r5, [r0, r6]
   d5bf4:	432b      	orrs	r3, r5
   d5bf6:	5583      	strb	r3, [r0, r6]
}

void LaCrosse_TX23::pullBits(void *dst, bool *src, int count)
{
	uint8_t * d = (uint8_t*) dst;
	for (int i=0; i<count; i++)
   d5bf8:	3401      	adds	r4, #1
   d5bfa:	e7ea      	b.n	d5bd2 <_ZN13LaCrosse_TX238pullBitsEPvPbi+0x6>
   d5bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bfe:	bf00      	nop
   d5c00:	80000007 	.word	0x80000007

000d5c04 <_ZN13LaCrosse_TX234readERfRi>:
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d5c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	speed = 0;
   d5c08:	2300      	movs	r3, #0
	direction = 0;
   d5c0a:	2400      	movs	r4, #0
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
	speed = 0;
   d5c0c:	600b      	str	r3, [r1, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d5c0e:	4680      	mov	r8, r0
	speed = 0;
	direction = 0;
   d5c10:	6014      	str	r4, [r2, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d5c12:	b093      	sub	sp, #76	; 0x4c
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d5c14:	8800      	ldrh	r0, [r0, #0]
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d5c16:	460e      	mov	r6, r1
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d5c18:	4621      	mov	r1, r4
		d[i/8] |= src[i]<<(i%8);
	}	
}

bool LaCrosse_TX23::read(float &speed, int &direction)
{
   d5c1a:	4615      	mov	r5, r2
	speed = 0;
	direction = 0;

	digitalWrite(_pin,LOW);
   d5c1c:	f002 f8d9 	bl	d7dd2 <digitalWrite>
	pinMode(_pin,OUTPUT);
   d5c20:	2101      	movs	r1, #1
   d5c22:	f8b8 0000 	ldrh.w	r0, [r8]
   d5c26:	f002 f8c3 	bl	d7db0 <pinMode>
	delay(500);
   d5c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5c2e:	f001 f93f 	bl	d6eb0 <delay>
	pinMode(_pin,INPUT);
   d5c32:	4621      	mov	r1, r4
   d5c34:	f8b8 0000 	ldrh.w	r0, [r8]
   d5c38:	f002 f8ba 	bl	d7db0 <pinMode>
	pulseIn(_pin,LOW);
   d5c3c:	4621      	mov	r1, r4
   d5c3e:	f8b8 0000 	ldrh.w	r0, [r8]
   d5c42:	f002 f8f2 	bl	d7e2a <pulseIn>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5c46:	f000 fa51 	bl	d60ec <HAL_Timer_Get_Micro_Seconds>
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d5c4a:	f44f 6996 	mov.w	r9, #1200	; 0x4b0
   d5c4e:	4607      	mov	r7, r0
	pulseIn(_pin,LOW);

	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
   d5c50:	2201      	movs	r2, #1
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d5c52:	f24c 3a4f 	movw	sl, #49999	; 0xc34f
	{
		bool state = digitalRead(_pin);
   d5c56:	f8b8 0000 	ldrh.w	r0, [r8]
   d5c5a:	9201      	str	r2, [sp, #4]
   d5c5c:	f002 f8d2 	bl	d7e04 <digitalRead>
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d5c60:	fbb4 f3f9 	udiv	r3, r4, r9
	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
   d5c64:	f110 0b00 	adds.w	fp, r0, #0
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d5c68:	fb09 4413 	mls	r4, r9, r3, r4
	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
	{
		bool state = digitalRead(_pin);
   d5c6c:	bf18      	it	ne
   d5c6e:	f04f 0b01 	movne.w	fp, #1
		unsigned bitNum = t/bitLen;
		if(t%bitLen>bitLen/2) data[bitNum] = state;
   d5c72:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
   d5c76:	bf84      	itt	hi
   d5c78:	a912      	addhi	r1, sp, #72	; 0x48
   d5c7a:	185b      	addhi	r3, r3, r1
   d5c7c:	9a01      	ldr	r2, [sp, #4]
   d5c7e:	bf88      	it	hi
   d5c80:	f803 bc34 	strbhi.w	fp, [r3, #-52]
		if(state!=lastState)
   d5c84:	4593      	cmp	fp, r2
   d5c86:	d007      	beq.n	d5c98 <_ZN13LaCrosse_TX234readERfRi+0x94>
		{
			unsigned delta = t%bitLen;
			if(delta<100)
   d5c88:	2c63      	cmp	r4, #99	; 0x63
   d5c8a:	d801      	bhi.n	d5c90 <_ZN13LaCrosse_TX234readERfRi+0x8c>
				start -= delta;
   d5c8c:	1b3f      	subs	r7, r7, r4
   d5c8e:	e003      	b.n	d5c98 <_ZN13LaCrosse_TX234readERfRi+0x94>
			else if(delta>900)
   d5c90:	f5b4 7f61 	cmp.w	r4, #900	; 0x384
				start += delta;
   d5c94:	bf88      	it	hi
   d5c96:	193f      	addhi	r7, r7, r4
   d5c98:	f000 fa28 	bl	d60ec <HAL_Timer_Get_Micro_Seconds>
	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d5c9c:	1bc4      	subs	r4, r0, r7
   d5c9e:	4554      	cmp	r4, sl
	{
		bool state = digitalRead(_pin);
   d5ca0:	465a      	mov	r2, fp
	unsigned bitLen = 1200;

	bool data[50];
	bool lastState = 1;
	unsigned long start = micros();
	for(unsigned long t = 0; t<50000; t = micros()-start)
   d5ca2:	d9d8      	bls.n	d5c56 <_ZN13LaCrosse_TX234readERfRi+0x52>
				start += delta;
			lastState = state;
		}
	}

	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
   d5ca4:	2400      	movs	r4, #0
   d5ca6:	2205      	movs	r2, #5
   d5ca8:	a905      	add	r1, sp, #20
   d5caa:	a803      	add	r0, sp, #12
   d5cac:	f88d 400c 	strb.w	r4, [sp, #12]
   d5cb0:	f7ff ff8c 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t dir = 0; pullBits(&dir,data+5,4);
   d5cb4:	2204      	movs	r2, #4
   d5cb6:	f10d 0119 	add.w	r1, sp, #25
   d5cba:	f10d 000d 	add.w	r0, sp, #13
   d5cbe:	f88d 400d 	strb.w	r4, [sp, #13]
   d5cc2:	f7ff ff83 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint16_t spd = 0; pullBits(&spd,data+9,12);
   d5cc6:	220c      	movs	r2, #12
   d5cc8:	f10d 011d 	add.w	r1, sp, #29
   d5ccc:	a804      	add	r0, sp, #16
   d5cce:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5cd2:	f7ff ff7b 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t sum = 0; pullBits(&sum,data+21,4);
   d5cd6:	2204      	movs	r2, #4
   d5cd8:	f10d 0129 	add.w	r1, sp, #41	; 0x29
   d5cdc:	f10d 000e 	add.w	r0, sp, #14
   d5ce0:	f88d 400e 	strb.w	r4, [sp, #14]
   d5ce4:	f7ff ff72 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
   d5ce8:	2204      	movs	r2, #4
   d5cea:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   d5cee:	f10d 000f 	add.w	r0, sp, #15
   d5cf2:	f88d 400f 	strb.w	r4, [sp, #15]
   d5cf6:	f7ff ff69 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	ndir ^= 0x0f;
   d5cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d5cfe:	f8ad 4012 	strh.w	r4, [sp, #18]
	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
	uint8_t dir = 0; pullBits(&dir,data+5,4);
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
   d5d02:	f083 030f 	eor.w	r3, r3, #15
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d5d06:	f10d 0012 	add.w	r0, sp, #18
   d5d0a:	220c      	movs	r2, #12
   d5d0c:	f10d 0131 	add.w	r1, sp, #49	; 0x31
	uint8_t ctr = 0; pullBits(&ctr,data+0,5);
	uint8_t dir = 0; pullBits(&dir,data+5,4);
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
   d5d10:	f88d 300f 	strb.w	r3, [sp, #15]
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
   d5d14:	f7ff ff5a 	bl	d5bcc <_ZN13LaCrosse_TX238pullBitsEPvPbi>
	nspd ^= 0x0fff;
   d5d18:	f8bd 0012 	ldrh.w	r0, [sp, #18]

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5d1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;
   d5d20:	f480 607f 	eor.w	r0, r0, #4080	; 0xff0

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5d24:	2b1b      	cmp	r3, #27
	uint16_t spd = 0; pullBits(&spd,data+9,12);
	uint8_t sum = 0; pullBits(&sum,data+21,4);
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;
   d5d26:	f080 000f 	eor.w	r0, r0, #15

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5d2a:	d122      	bne.n	d5d72 <_ZN13LaCrosse_TX234readERfRi+0x16e>
	uint8_t ndir = 0; pullBits(&ndir,data+25,4);
	ndir ^= 0x0f;
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));
   d5d2c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   d5d30:	f89d 100d 	ldrb.w	r1, [sp, #13]

	if(ctr!=27) return false;
	if(csum!=sum) return false;
   d5d34:	f89d 700e 	ldrb.w	r7, [sp, #14]
   d5d38:	f002 030f 	and.w	r3, r2, #15
   d5d3c:	440b      	add	r3, r1
   d5d3e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
   d5d42:	eb03 1312 	add.w	r3, r3, r2, lsr #4
   d5d46:	f003 030f 	and.w	r3, r3, #15
   d5d4a:	429f      	cmp	r7, r3
   d5d4c:	d111      	bne.n	d5d72 <_ZN13LaCrosse_TX234readERfRi+0x16e>
	if(spd!=nspd || dir!=ndir) return false;
   d5d4e:	4290      	cmp	r0, r2
   d5d50:	d10f      	bne.n	d5d72 <_ZN13LaCrosse_TX234readERfRi+0x16e>
   d5d52:	f89d 700f 	ldrb.w	r7, [sp, #15]
   d5d56:	428f      	cmp	r7, r1
   d5d58:	d10b      	bne.n	d5d72 <_ZN13LaCrosse_TX234readERfRi+0x16e>

	speed = spd/10.0;
   d5d5a:	f002 fbc5 	bl	d84e8 <__aeabi_i2d>
   d5d5e:	2200      	movs	r2, #0
   d5d60:	4b06      	ldr	r3, [pc, #24]	; (d5d7c <_ZN13LaCrosse_TX234readERfRi+0x178>)
   d5d62:	f002 fd51 	bl	d8808 <__aeabi_ddiv>
   d5d66:	f002 ff1d 	bl	d8ba4 <__aeabi_d2f>
   d5d6a:	6030      	str	r0, [r6, #0]
	direction = dir;
   d5d6c:	602f      	str	r7, [r5, #0]

	return true;
   d5d6e:	2001      	movs	r0, #1
   d5d70:	e000      	b.n	d5d74 <_ZN13LaCrosse_TX234readERfRi+0x170>
	uint16_t nspd = 0; pullBits(&nspd,data+29,12);
	nspd ^= 0x0fff;

	uint8_t csum = 0x0f & (dir + (spd&0x0f) + ((spd>>4)&0x0f) + ((spd>>8)&0x0f));

	if(ctr!=27) return false;
   d5d72:	4620      	mov	r0, r4

	speed = spd/10.0;
	direction = dir;

	return true;
   d5d74:	b013      	add	sp, #76	; 0x4c
   d5d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d7a:	bf00      	nop
   d5d7c:	40240000 	.word	0x40240000

000d5d80 <_GLOBAL__sub_I__ZN13LaCrosse_TX23C2Ei>:
   d5d80:	f000 b924 	b.w	d5fcc <HAL_Pin_Map>

000d5d84 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d5d84:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5d86:	6803      	ldr	r3, [r0, #0]
   d5d88:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d5d8a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5d8c:	d904      	bls.n	d5d98 <nrf_gpio_pin_port_decode+0x14>
   d5d8e:	4a07      	ldr	r2, [pc, #28]	; (d5dac <nrf_gpio_pin_port_decode+0x28>)
   d5d90:	2100      	movs	r1, #0
   d5d92:	200a      	movs	r0, #10
   d5d94:	f000 fb32 	bl	d63fc <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d5d98:	6823      	ldr	r3, [r4, #0]
   d5d9a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5d9c:	bf83      	ittte	hi
   d5d9e:	f003 031f 	andhi.w	r3, r3, #31
   d5da2:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d5da4:	4802      	ldrhi	r0, [pc, #8]	; (d5db0 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5da6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d5daa:	bd10      	pop	{r4, pc}
   d5dac:	000d60dd 	.word	0x000d60dd
   d5db0:	50000300 	.word	0x50000300

000d5db4 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d5db4:	b507      	push	{r0, r1, r2, lr}
   d5db6:	ab02      	add	r3, sp, #8
   d5db8:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5dbc:	4618      	mov	r0, r3
   d5dbe:	f7ff ffe1 	bl	d5d84 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5dc2:	9a01      	ldr	r2, [sp, #4]
   d5dc4:	2301      	movs	r3, #1
   d5dc6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d5dc8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d5dcc:	b003      	add	sp, #12
   d5dce:	f85d fb04 	ldr.w	pc, [sp], #4

000d5dd2 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d5dd2:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d5dd4:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d5dd6:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
   d5dd8:	7181      	strb	r1, [r0, #6]
	_type = type;
   d5dda:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
   d5ddc:	7403      	strb	r3, [r0, #16]
}
   d5dde:	bd10      	pop	{r4, pc}

000d5de0 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d5de0:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d5de2:	2100      	movs	r1, #0
	_type = type;
	_count = count;
	firstreading = true;
}

void DHT::begin(void) {
   d5de4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d5de6:	7980      	ldrb	r0, [r0, #6]
   d5de8:	f001 ffe2 	bl	d7db0 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5dec:	4a07      	ldr	r2, [pc, #28]	; (d5e0c <_ZN3DHT5beginEv+0x2c>)
   d5dee:	79a3      	ldrb	r3, [r4, #6]
   d5df0:	6812      	ldr	r2, [r2, #0]
   d5df2:	011b      	lsls	r3, r3, #4
   d5df4:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d5df6:	5cd0      	ldrb	r0, [r2, r3]
   d5df8:	784b      	ldrb	r3, [r1, #1]
   d5dfa:	f003 031f 	and.w	r3, r3, #31
   d5dfe:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5e02:	f7ff ffd7 	bl	d5db4 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d5e06:	2300      	movs	r3, #0
   d5e08:	60e3      	str	r3, [r4, #12]
   d5e0a:	bd10      	pop	{r4, pc}
   d5e0c:	2003e360 	.word	0x2003e360

000d5e10 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
		return true;
	}
 
	return false;

}
   d5e10:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5e12:	f000 f8db 	bl	d5fcc <HAL_Pin_Map>
   d5e16:	4b01      	ldr	r3, [pc, #4]	; (d5e1c <_GLOBAL__sub_I__ZN3DHTC2Ehhh+0xc>)
   d5e18:	6018      	str	r0, [r3, #0]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	2003e360 	.word	0x2003e360

000d5e20 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d5e20:	6803      	ldr	r3, [r0, #0]
   d5e22:	b2c9      	uxtb	r1, r1
   d5e24:	689b      	ldr	r3, [r3, #8]
   d5e26:	4718      	bx	r3

000d5e28 <_ZN8QMC5883LC1Ev>:
#include "QMC5883L.h"

QMC5883L::QMC5883L()
{
  
}
   d5e28:	4770      	bx	lr

000d5e2a <_ZN8QMC5883L5WriteEii>:
     return 0;
}


void QMC5883L::Write(int address, int data)
{
   d5e2a:	b538      	push	{r3, r4, r5, lr}
   d5e2c:	4614      	mov	r4, r2
   d5e2e:	460d      	mov	r5, r1
  Wire.beginTransmission(QMC5883L_Address);
   d5e30:	f002 f878 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5e34:	210d      	movs	r1, #13
   d5e36:	f001 fe5d 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   d5e3a:	f002 f873 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5e3e:	4629      	mov	r1, r5
   d5e40:	f7ff ffee 	bl	d5e20 <_ZN7TwoWire5writeEi>
  Wire.write(data);
   d5e44:	f002 f86e 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5e48:	4621      	mov	r1, r4
   d5e4a:	f7ff ffe9 	bl	d5e20 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5e4e:	f002 f869 	bl	d7f24 <_Z19__fetch_global_Wirev>
}
   d5e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void QMC5883L::Write(int address, int data)
{
  Wire.beginTransmission(QMC5883L_Address);
  Wire.write(address);
  Wire.write(data);
  Wire.endTransmission();
   d5e56:	f001 be54 	b.w	d7b02 <_ZN7TwoWire15endTransmissionEv>

000d5e5a <_ZN8QMC5883L9ConfigureE12QMC5883L_ODR>:
  scaled.ZAxis = raw.ZAxis * m_Scale;
  return scaled;
}

int QMC5883L::Configure(QMC5883L_ODR dataRegister)
{
   d5e5a:	b530      	push	{r4, r5, lr}
   d5e5c:	b085      	sub	sp, #20
   d5e5e:	ad04      	add	r5, sp, #16
   d5e60:	e905 000e 	stmdb	r5, {r1, r2, r3}
   d5e64:	f89d 500d 	ldrb.w	r5, [sp, #13]
   d5e68:	4604      	mov	r4, r0
	Write(ControlRegister1, dataRegister.OSR_RNG_ODR_MODE);
   d5e6a:	462a      	mov	r2, r5
   d5e6c:	2109      	movs	r1, #9
   d5e6e:	f7ff ffdc 	bl	d5e2a <_ZN8QMC5883L5WriteEii>
	Write(ControlRegister2, dataRegister.CR2_INT_ENABLE);
   d5e72:	f89d 200e 	ldrb.w	r2, [sp, #14]
   d5e76:	4620      	mov	r0, r4
   d5e78:	210a      	movs	r1, #10
   d5e7a:	f7ff ffd6 	bl	d5e2a <_ZN8QMC5883L5WriteEii>
	Write(SetResetPeriodRegister, dataRegister.SET_RESET_PERIOD);
   d5e7e:	4620      	mov	r0, r4
   d5e80:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5e84:	210b      	movs	r1, #11
   d5e86:	f7ff ffd0 	bl	d5e2a <_ZN8QMC5883L5WriteEii>

// as its 2's complement, fullsscale range is either 2 or 8 gauss per 15 bits (32768) 
switch (dataRegister.OSR_RNG_ODR_MODE & 0b00010000) {
   d5e8a:	06eb      	lsls	r3, r5, #27
 case 0b00010000: 
     m_Scale = (float) 8 / (float) 32768;
   d5e8c:	bf4c      	ite	mi
   d5e8e:	f04f 5366 	movmi.w	r3, #964689920	; 0x39800000
     break;
  default:
     m_Scale = (float) 2 / (float) 32768;
   d5e92:	f04f 5362 	movpl.w	r3, #947912704	; 0x38800000
  break;
}

     return 0;
}
   d5e96:	2000      	movs	r0, #0
switch (dataRegister.OSR_RNG_ODR_MODE & 0b00010000) {
 case 0b00010000: 
     m_Scale = (float) 8 / (float) 32768;
     break;
  default:
     m_Scale = (float) 2 / (float) 32768;
   d5e98:	60e3      	str	r3, [r4, #12]
  break;
}

     return 0;
}
   d5e9a:	b005      	add	sp, #20
   d5e9c:	bd30      	pop	{r4, r5, pc}

000d5e9e <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>:
  Wire.write(data);
  Wire.endTransmission();
}

void QMC5883L::Read(int address, int length, QMC5883L_ODR* dataRegister)
{
   d5e9e:	b570      	push	{r4, r5, r6, lr}
   d5ea0:	461e      	mov	r6, r3
   d5ea2:	4615      	mov	r5, r2
   d5ea4:	460c      	mov	r4, r1
  Wire.beginTransmission(QMC5883L_Address);
   d5ea6:	f002 f83d 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5eaa:	210d      	movs	r1, #13
   d5eac:	f001 fe22 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   d5eb0:	f002 f838 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5eb4:	4621      	mov	r1, r4
   d5eb6:	f7ff ffb3 	bl	d5e20 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5eba:	f002 f833 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5ebe:	f001 fe20 	bl	d7b02 <_ZN7TwoWire15endTransmissionEv>
  

  Wire.beginTransmission(QMC5883L_Address);
   d5ec2:	f002 f82f 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5ec6:	210d      	movs	r1, #13
   d5ec8:	f001 fe14 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(QMC5883L_Address, length);
   d5ecc:	f002 f82a 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5ed0:	462a      	mov	r2, r5
   d5ed2:	210d      	movs	r1, #13
   d5ed4:	f001 fe00 	bl	d7ad8 <_ZN7TwoWire11requestFromEii>

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
   d5ed8:	f002 f824 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5edc:	6803      	ldr	r3, [r0, #0]
   d5ede:	691b      	ldr	r3, [r3, #16]
   d5ee0:	4798      	blx	r3
   d5ee2:	4285      	cmp	r5, r0
   d5ee4:	d10b      	bne.n	d5efe <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
   d5ee6:	4634      	mov	r4, r6
  {
 for(int i = 0; i < length; i++)
   d5ee8:	1ba3      	subs	r3, r4, r6
   d5eea:	429d      	cmp	r5, r3
   d5eec:	dd07      	ble.n	d5efe <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
	  {
		reg[i] = Wire.read();
   d5eee:	f002 f819 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d5ef2:	6803      	ldr	r3, [r0, #0]
   d5ef4:	695b      	ldr	r3, [r3, #20]
   d5ef6:	4798      	blx	r3
   d5ef8:	f804 0b01 	strb.w	r0, [r4], #1

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
  {
 for(int i = 0; i < length; i++)
   d5efc:	e7f4      	b.n	d5ee8 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x4a>
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d5efe:	f002 f811 	bl	d7f24 <_Z19__fetch_global_Wirev>

  return;
}
   d5f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d5f06:	f001 bdfc 	b.w	d7b02 <_ZN7TwoWire15endTransmissionEv>

000d5f0a <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>:
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d5f0a:	b538      	push	{r3, r4, r5, lr}
   d5f0c:	4615      	mov	r5, r2
   d5f0e:	4604      	mov	r4, r0
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d5f10:	4613      	mov	r3, r2
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d5f12:	4608      	mov	r0, r1
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d5f14:	2209      	movs	r2, #9
   d5f16:	2100      	movs	r1, #0
   d5f18:	f7ff ffc1 	bl	d5e9e <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>
  MagnetometerRaw raw = MagnetometerRaw();
  // QMC5883L is the other way around and comes X,Y,Z
  // answer is in 2's complement becuase XAxis etc are ints...
  raw.XAxis = (dataRegister->X_MSB << 8) | (dataRegister->X_LSB);
   d5f1c:	882b      	ldrh	r3, [r5, #0]
   d5f1e:	6023      	str	r3, [r4, #0]
  raw.YAxis = (dataRegister->Y_MSB << 8) | (dataRegister->Y_LSB);
   d5f20:	886b      	ldrh	r3, [r5, #2]
   d5f22:	6063      	str	r3, [r4, #4]
  raw.ZAxis = (dataRegister->Z_MSB << 8) | (dataRegister->Z_LSB);
   d5f24:	88ab      	ldrh	r3, [r5, #4]
   d5f26:	60a3      	str	r3, [r4, #8]
return raw;
}
   d5f28:	4620      	mov	r0, r4
   d5f2a:	bd38      	pop	{r3, r4, r5, pc}

000d5f2c <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>:

MagnetometerScaled QMC5883L::ReadScaledAxis(QMC5883L_ODR* dataRegister)
{
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	b08a      	sub	sp, #40	; 0x28
   d5f30:	4604      	mov	r4, r0
  MagnetometerRaw raw = ReadRawAxis(dataRegister);
   d5f32:	460a      	mov	r2, r1
   d5f34:	4601      	mov	r1, r0
   d5f36:	a804      	add	r0, sp, #16
   d5f38:	f7ff ffe7 	bl	d5f0a <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
  scaled.YAxis = raw.YAxis * m_Scale;
   d5f3c:	ed9d 7a05 	vldr	s14, [sp, #20]
Serial.print(" raw.Zaxis ");
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
   d5f40:	edd4 7a03 	vldr	s15, [r4, #12]
  scaled.YAxis = raw.YAxis * m_Scale;
   d5f44:	eef8 0ac7 	vcvt.f32.s32	s1, s14
  scaled.ZAxis = raw.ZAxis * m_Scale;
   d5f48:	ed9d 7a06 	vldr	s14, [sp, #24]
   d5f4c:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
  return scaled;
   d5f50:	ed9d 7a04 	vldr	s14, [sp, #16]
   d5f54:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
   d5f58:	ee60 0aa7 	vmul.f32	s1, s1, s15
   d5f5c:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5f60:	ee21 1a27 	vmul.f32	s2, s2, s15
   d5f64:	b00a      	add	sp, #40	; 0x28
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <_ZN8QMC5883L12GetErrorTextEi>:

  return;
}

String QMC5883L::GetErrorText(int errorCode)
{
   d5f68:	b530      	push	{r4, r5, lr}
   d5f6a:	b089      	sub	sp, #36	; 0x24
   d5f6c:	4604      	mov	r4, r0
   d5f6e:	4615      	mov	r5, r2

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5f70:	490c      	ldr	r1, [pc, #48]	; (d5fa4 <_ZN8QMC5883L12GetErrorTextEi+0x3c>)
   d5f72:	a804      	add	r0, sp, #16
   d5f74:	f000 fd64 	bl	d6a40 <_ZN6StringC1EPK19__FlashStringHelper>
	return String("Error code "+String(errorCode));
   d5f78:	220a      	movs	r2, #10
   d5f7a:	4629      	mov	r1, r5
   d5f7c:	4668      	mov	r0, sp
   d5f7e:	f000 fd9d 	bl	d6abc <_ZN6StringC1Eih>
   d5f82:	4669      	mov	r1, sp
   d5f84:	a804      	add	r0, sp, #16
   d5f86:	f000 fdc3 	bl	d6b10 <_ZplRK15StringSumHelperRK6String>
   d5f8a:	4601      	mov	r1, r0
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	f000 fd79 	bl	d6a84 <_ZN6StringC1ERKS_>
   d5f92:	4668      	mov	r0, sp
   d5f94:	f000 fd0d 	bl	d69b2 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5f98:	a804      	add	r0, sp, #16
   d5f9a:	f000 fd0a 	bl	d69b2 <_ZN6StringD1Ev>
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	b009      	add	sp, #36	; 0x24
   d5fa2:	bd30      	pop	{r4, r5, pc}
   d5fa4:	000d94f5 	.word	0x000d94f5

000d5fa8 <_GLOBAL__sub_I__ZN8QMC5883LC2Ev>:
   d5fa8:	f000 b810 	b.w	d5fcc <HAL_Pin_Map>

000d5fac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <netdb_freeaddrinfo+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	689b      	ldr	r3, [r3, #8]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030268 	.word	0x00030268

000d5fbc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <netdb_getaddrinfo+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	68db      	ldr	r3, [r3, #12]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030268 	.word	0x00030268

000d5fcc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_Pin_Map+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	681b      	ldr	r3, [r3, #0]
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	0003022c 	.word	0x0003022c

000d5fdc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_Pin_Mode+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	689b      	ldr	r3, [r3, #8]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	0003022c 	.word	0x0003022c

000d5fec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_Get_Pin_Mode+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	68db      	ldr	r3, [r3, #12]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	0003022c 	.word	0x0003022c

000d5ffc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_GPIO_Write+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	691b      	ldr	r3, [r3, #16]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	0003022c 	.word	0x0003022c

000d600c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_GPIO_Read+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	0003022c 	.word	0x0003022c

000d601c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_Pulse_In+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	0003022c 	.word	0x0003022c

000d602c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_SPI_Begin+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	681b      	ldr	r3, [r3, #0]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030230 	.word	0x00030230

000d603c <HAL_SPI_End>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_SPI_End+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	685b      	ldr	r3, [r3, #4]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030230 	.word	0x00030230

000d604c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_SPI_Set_Bit_Order+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	689b      	ldr	r3, [r3, #8]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030230 	.word	0x00030230

000d605c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_SPI_Set_Data_Mode+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	68db      	ldr	r3, [r3, #12]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030230 	.word	0x00030230

000d606c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	691b      	ldr	r3, [r3, #16]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030230 	.word	0x00030230

000d607c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_SPI_Send_Receive_Data+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	695b      	ldr	r3, [r3, #20]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030230 	.word	0x00030230

000d608c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_SPI_Init+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	69db      	ldr	r3, [r3, #28]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030230 	.word	0x00030230

000d609c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_SPI_Is_Enabled+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	6a1b      	ldr	r3, [r3, #32]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030230 	.word	0x00030230

000d60ac <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_SPI_Info+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	00030230 	.word	0x00030230

000d60bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_RNG_GetRandomNumber+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	685b      	ldr	r3, [r3, #4]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030218 	.word	0x00030218

000d60cc <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_Delay_Milliseconds+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	689b      	ldr	r3, [r3, #8]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	00030218 	.word	0x00030218

000d60dc <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <HAL_Delay_Microseconds+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	68db      	ldr	r3, [r3, #12]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	00030218 	.word	0x00030218

000d60ec <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	691b      	ldr	r3, [r3, #16]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	00030218 	.word	0x00030218

000d60fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	695b      	ldr	r3, [r3, #20]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030218 	.word	0x00030218

000d610c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_EEPROM_Init+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	00030218 	.word	0x00030218

000d611c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_EEPROM_Get+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	00030218 	.word	0x00030218

000d612c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_EEPROM_Put+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030218 	.word	0x00030218

000d613c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_Core_System_Reset_Ex+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030234 	.word	0x00030234

000d614c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <os_thread_create+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	685b      	ldr	r3, [r3, #4]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030248 	.word	0x00030248

000d615c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <os_thread_is_current+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	689b      	ldr	r3, [r3, #8]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030248 	.word	0x00030248

000d616c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <os_thread_join+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	691b      	ldr	r3, [r3, #16]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030248 	.word	0x00030248

000d617c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <os_thread_cleanup+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	695b      	ldr	r3, [r3, #20]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030248 	.word	0x00030248

000d618c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <os_mutex_create+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030248 	.word	0x00030248

000d619c <os_mutex_trylock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <os_mutex_trylock+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030248 	.word	0x00030248

000d61ac <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <os_mutex_unlock+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030248 	.word	0x00030248

000d61bc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <os_mutex_recursive_create+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030248 	.word	0x00030248

000d61cc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <os_thread_exit+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030248 	.word	0x00030248

000d61dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <inet_inet_ntop+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	695b      	ldr	r3, [r3, #20]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030264 	.word	0x00030264

000d61ec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_USART_Init+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	681b      	ldr	r3, [r3, #0]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	0003023c 	.word	0x0003023c

000d61fc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_USART_Write_Data+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	68db      	ldr	r3, [r3, #12]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	0003023c 	.word	0x0003023c

000d620c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <HAL_USART_Available_Data+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	691b      	ldr	r3, [r3, #16]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	0003023c 	.word	0x0003023c

000d621c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <HAL_USART_Read_Data+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	695b      	ldr	r3, [r3, #20]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	0003023c 	.word	0x0003023c

000d622c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <HAL_USART_Peek_Data+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	699b      	ldr	r3, [r3, #24]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	0003023c 	.word	0x0003023c

000d623c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <HAL_USART_Flush_Data+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	69db      	ldr	r3, [r3, #28]
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	0003023c 	.word	0x0003023c

000d624c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <HAL_USART_Is_Enabled+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	6a1b      	ldr	r3, [r3, #32]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	0003023c 	.word	0x0003023c

000d625c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <HAL_USART_Available_Data_For_Write+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	0003023c 	.word	0x0003023c

000d626c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <HAL_I2C_Begin+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	68db      	ldr	r3, [r3, #12]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030228 	.word	0x00030228

000d627c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <HAL_I2C_Request_Data+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	695b      	ldr	r3, [r3, #20]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030228 	.word	0x00030228

000d628c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <HAL_I2C_Begin_Transmission+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	699b      	ldr	r3, [r3, #24]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030228 	.word	0x00030228

000d629c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <HAL_I2C_End_Transmission+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	69db      	ldr	r3, [r3, #28]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	00030228 	.word	0x00030228

000d62ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <HAL_I2C_Write_Data+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	6a1b      	ldr	r3, [r3, #32]
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	00030228 	.word	0x00030228

000d62bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <HAL_I2C_Available_Data+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	00030228 	.word	0x00030228

000d62cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <HAL_I2C_Read_Data+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	00030228 	.word	0x00030228

000d62dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <HAL_I2C_Peek_Data+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	00030228 	.word	0x00030228

000d62ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <HAL_I2C_Flush_Data+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	00030228 	.word	0x00030228

000d62fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <HAL_I2C_Is_Enabled+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	00030228 	.word	0x00030228

000d630c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <HAL_I2C_Init+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	00030228 	.word	0x00030228

000d631c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <HAL_I2C_Acquire+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	00030228 	.word	0x00030228

000d632c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <HAL_I2C_Release+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	00030228 	.word	0x00030228

000d633c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <HAL_USB_USART_Init+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	681b      	ldr	r3, [r3, #0]
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	0003024c 	.word	0x0003024c

000d634c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <HAL_USB_USART_Begin+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	685b      	ldr	r3, [r3, #4]
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	0003024c 	.word	0x0003024c

000d635c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <HAL_USB_USART_Available_Data+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	691b      	ldr	r3, [r3, #16]
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	0003024c 	.word	0x0003024c

000d636c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	695b      	ldr	r3, [r3, #20]
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	0003024c 	.word	0x0003024c

000d637c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <HAL_USB_USART_Receive_Data+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	699b      	ldr	r3, [r3, #24]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	0003024c 	.word	0x0003024c

000d638c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <HAL_USB_USART_Send_Data+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	69db      	ldr	r3, [r3, #28]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	0003024c 	.word	0x0003024c

000d639c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <HAL_USB_USART_Flush_Data+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	6a1b      	ldr	r3, [r3, #32]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	0003024c 	.word	0x0003024c

000d63ac <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <LED_SetSignalingColor+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	685b      	ldr	r3, [r3, #4]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030260 	.word	0x00030260

000d63bc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <LED_Signaling_Start+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	689b      	ldr	r3, [r3, #8]
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030260 	.word	0x00030260

000d63cc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <LED_Signaling_Stop+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	68db      	ldr	r3, [r3, #12]
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030260 	.word	0x00030260

000d63dc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <LED_RGB_IsOverRidden+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	699b      	ldr	r3, [r3, #24]
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030260 	.word	0x00030260

000d63ec <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <LED_On+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	69db      	ldr	r3, [r3, #28]
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030260 	.word	0x00030260

000d63fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <panic_+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030260 	.word	0x00030260

000d640c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <set_system_mode+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	685b      	ldr	r3, [r3, #4]
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	00030220 	.word	0x00030220

000d641c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <system_delay_ms+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	695b      	ldr	r3, [r3, #20]
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	00030220 	.word	0x00030220

000d642c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <system_sleep+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	699b      	ldr	r3, [r3, #24]
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	00030220 	.word	0x00030220

000d643c <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <system_version_info+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	00030220 	.word	0x00030220

000d644c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <application_thread_current+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	00030220 	.word	0x00030220

000d645c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <application_thread_invoke+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	00030220 	.word	0x00030220

000d646c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b03      	ldr	r3, [pc, #12]	; (d647c <system_ctrl_set_app_request_handler+0x10>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6476:	9301      	str	r3, [sp, #4]
   d6478:	bd08      	pop	{r3, pc}
   d647a:	0000      	.short	0x0000
   d647c:	00030220 	.word	0x00030220

000d6480 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b03      	ldr	r3, [pc, #12]	; (d6490 <system_ctrl_set_result+0x10>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d648a:	9301      	str	r3, [sp, #4]
   d648c:	bd08      	pop	{r3, pc}
   d648e:	0000      	.short	0x0000
   d6490:	00030220 	.word	0x00030220

000d6494 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <network_connect+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	685b      	ldr	r3, [r3, #4]
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030240 	.word	0x00030240

000d64a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <network_connecting+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	689b      	ldr	r3, [r3, #8]
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	00030240 	.word	0x00030240

000d64b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <network_disconnect+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	68db      	ldr	r3, [r3, #12]
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	00030240 	.word	0x00030240

000d64c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <network_ready+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	691b      	ldr	r3, [r3, #16]
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	00030240 	.word	0x00030240

000d64d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <network_on+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	695b      	ldr	r3, [r3, #20]
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	00030240 	.word	0x00030240

000d64e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <network_off+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	699b      	ldr	r3, [r3, #24]
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	00030240 	.word	0x00030240

000d64f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <network_listen+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	69db      	ldr	r3, [r3, #28]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	00030240 	.word	0x00030240

000d6504 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <network_listening+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	6a1b      	ldr	r3, [r3, #32]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	00030240 	.word	0x00030240

000d6514 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <network_set_listen_timeout+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	00030240 	.word	0x00030240

000d6524 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <network_get_listen_timeout+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030240 	.word	0x00030240

000d6534 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <spark_process+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	689b      	ldr	r3, [r3, #8]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030244 	.word	0x00030244

000d6544 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <spark_cloud_flag_connect+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	68db      	ldr	r3, [r3, #12]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030244 	.word	0x00030244

000d6554 <spark_deviceID>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <spark_deviceID+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	69db      	ldr	r3, [r3, #28]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	00030244 	.word	0x00030244

000d6564 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <spark_send_event+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	6a1b      	ldr	r3, [r3, #32]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	00030244 	.word	0x00030244

000d6574 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <spark_subscribe+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030244 	.word	0x00030244

000d6584 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030244 	.word	0x00030244

000d6594 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <malloc+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	681b      	ldr	r3, [r3, #0]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	0003021c 	.word	0x0003021c

000d65a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <free+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	685b      	ldr	r3, [r3, #4]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	0003021c 	.word	0x0003021c

000d65b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <realloc+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	689b      	ldr	r3, [r3, #8]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	0003021c 	.word	0x0003021c

000d65c4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <sprintf+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	68db      	ldr	r3, [r3, #12]
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	0003021c 	.word	0x0003021c

000d65d4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <vsnprintf+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	0003021c 	.word	0x0003021c

000d65e4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <abort+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	0003021c 	.word	0x0003021c

000d65f4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <_malloc_r+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	0003021c 	.word	0x0003021c

000d6604 <_ZN4PMIC20getInputVoltageLimitEv>:
byte PMIC::getInputVoltageLimit(void) {

    //TODO
    return 1;

}
   d6604:	2001      	movs	r0, #1
   d6606:	4770      	bx	lr

000d6608 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6608:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d660a:	f001 fcab 	bl	d7f64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d660e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d6612:	f001 ba7d 	b.w	d7b10 <_ZN7TwoWire4lockEv>

000d6616 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d6616:	b510      	push	{r4, lr}
   d6618:	4604      	mov	r4, r0
    lock_(_lock)
   d661a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d661c:	b109      	cbz	r1, d6622 <_ZN4PMICC1Eb+0xc>
        lock();
   d661e:	f7ff fff3 	bl	d6608 <_ZN4PMIC4lockEv>
    }
}
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}

000d6626 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d6626:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6628:	f001 fc9c 	bl	d7f64 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d662c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d6630:	f001 ba77 	b.w	d7b22 <_ZN7TwoWire6unlockEv>

000d6634 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6634:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6636:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6638:	4604      	mov	r4, r0
{
    if (lock_) {
   d663a:	b10b      	cbz	r3, d6640 <_ZN4PMICD1Ev+0xc>
        unlock();
   d663c:	f7ff fff3 	bl	d6626 <_ZN4PMIC6unlockEv>
    }
}
   d6640:	4620      	mov	r0, r4
   d6642:	bd10      	pop	{r4, pc}

000d6644 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6644:	b510      	push	{r4, lr}
   d6646:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6648:	6800      	ldr	r0, [r0, #0]
   d664a:	f7ff ffec 	bl	d6626 <_ZN4PMIC6unlockEv>
   d664e:	4620      	mov	r0, r4
   d6650:	bd10      	pop	{r4, pc}

000d6652 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d6652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6654:	ac02      	add	r4, sp, #8
   d6656:	460d      	mov	r5, r1
   d6658:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d665c:	f7ff ffd4 	bl	d6608 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6660:	f001 fc80 	bl	d7f64 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d6664:	216b      	movs	r1, #107	; 0x6b
   d6666:	f001 fa45 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d666a:	f001 fc7b 	bl	d7f64 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d666e:	6803      	ldr	r3, [r0, #0]
   d6670:	4629      	mov	r1, r5
   d6672:	689b      	ldr	r3, [r3, #8]
   d6674:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6676:	f001 fc75 	bl	d7f64 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d667a:	2101      	movs	r1, #1
   d667c:	f001 fa3d 	bl	d7afa <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6680:	f001 fc70 	bl	d7f64 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d6684:	2301      	movs	r3, #1
   d6686:	461a      	mov	r2, r3
   d6688:	216b      	movs	r1, #107	; 0x6b
   d668a:	f001 fa2a 	bl	d7ae2 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d668e:	f001 fc69 	bl	d7f64 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d6692:	6803      	ldr	r3, [r0, #0]
   d6694:	695b      	ldr	r3, [r3, #20]
   d6696:	4798      	blx	r3
   d6698:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d669a:	4620      	mov	r0, r4
   d669c:	f7ff ffd2 	bl	d6644 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d66a0:	b2e8      	uxtb	r0, r5
   d66a2:	b003      	add	sp, #12
   d66a4:	bd30      	pop	{r4, r5, pc}

000d66a6 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
   d66a6:	2100      	movs	r1, #0
   d66a8:	f7ff bfd3 	b.w	d6652 <_ZN4PMIC12readRegisterEh>

000d66ac <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
   d66ac:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
   d66ae:	f7ff fffa 	bl	d66a6 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x03;
    return mapping[raw];
}
   d66b2:	4b03      	ldr	r3, [pc, #12]	; (d66c0 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x03;
    return mapping[raw];
   d66b4:	f000 0003 	and.w	r0, r0, #3
}
   d66b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d66bc:	bd08      	pop	{r3, pc}
   d66be:	bf00      	nop
   d66c0:	000d9502 	.word	0x000d9502

000d66c4 <_ZN4PMIC23getMinimumSystemVoltageEv>:
 * Function Name  : getMinimumSystemVoltage
 * Description    : Returns the set minimum system voltage
 * Input          : NONE
 * Return         : The set system voltage in millivolts or 0 if ERROR
*******************************************************************************/
uint16_t PMIC::getMinimumSystemVoltage() {
   d66c4:	b508      	push	{r3, lr}

    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d66c6:	2101      	movs	r1, #1
   d66c8:	f7ff ffc3 	bl	d6652 <_ZN4PMIC12readRegisterEh>

        default:
        return 0; // return error since the value didn't match
    }

}
   d66cc:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <_ZN4PMIC23getMinimumSystemVoltageEv+0x14>)
   d66ce:	f000 000e 	and.w	r0, r0, #14
   d66d2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	000d9512 	.word	0x000d9512

000d66dc <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d66dc:	2102      	movs	r1, #2
   d66de:	f7ff bfb8 	b.w	d6652 <_ZN4PMIC12readRegisterEh>

000d66e2 <_ZN4PMIC16getChargeVoltageEv>:
 * Return         :
 *******************************************************************************/

byte PMIC::getChargeVoltage(void) {

    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d66e2:	2104      	movs	r1, #4
   d66e4:	f7ff bfb5 	b.w	d6652 <_ZN4PMIC12readRegisterEh>

000d66e8 <_ZN4PMIC21getChargeVoltageValueEv>:
}

uint16_t PMIC::getChargeVoltageValue() {
   d66e8:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d66ea:	f7ff fffa 	bl	d66e2 <_ZN4PMIC16getChargeVoltageEv>
   d66ee:	2302      	movs	r3, #2
    unsigned baseVoltage = 16;
    unsigned v = 3504;
   d66f0:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
}

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
   d66f4:	2110      	movs	r1, #16
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d66f6:	fa40 f403 	asr.w	r4, r0, r3
   d66fa:	3301      	adds	r3, #1
   d66fc:	f004 0401 	and.w	r4, r4, #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d6700:	2b08      	cmp	r3, #8
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d6702:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d6706:	ea4f 0141 	mov.w	r1, r1, lsl #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d670a:	d1f4      	bne.n	d66f6 <_ZN4PMIC21getChargeVoltageValueEv+0xe>
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
        baseVoltage *= 2;
    }
    return v;
}
   d670c:	b290      	uxth	r0, r2
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6710:	2200      	movs	r2, #0
   d6712:	4611      	mov	r1, r2
   d6714:	6840      	ldr	r0, [r0, #4]
   d6716:	f7ff bef5 	b.w	d6504 <network_listening>

000d671a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d671a:	2200      	movs	r2, #0
   d671c:	4611      	mov	r1, r2
   d671e:	6840      	ldr	r0, [r0, #4]
   d6720:	f7ff bf00 	b.w	d6524 <network_get_listen_timeout>

000d6724 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6724:	2200      	movs	r2, #0
   d6726:	6840      	ldr	r0, [r0, #4]
   d6728:	f7ff bef4 	b.w	d6514 <network_set_listen_timeout>

000d672c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d672c:	2200      	movs	r2, #0
   d672e:	f081 0101 	eor.w	r1, r1, #1
   d6732:	6840      	ldr	r0, [r0, #4]
   d6734:	f7ff bede 	b.w	d64f4 <network_listen>

000d6738 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6738:	2300      	movs	r3, #0
   d673a:	461a      	mov	r2, r3
   d673c:	4619      	mov	r1, r3
   d673e:	6840      	ldr	r0, [r0, #4]
   d6740:	f7ff bed0 	b.w	d64e4 <network_off>

000d6744 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6744:	2300      	movs	r3, #0
   d6746:	461a      	mov	r2, r3
   d6748:	4619      	mov	r1, r3
   d674a:	6840      	ldr	r0, [r0, #4]
   d674c:	f7ff bec2 	b.w	d64d4 <network_on>

000d6750 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6750:	2200      	movs	r2, #0
   d6752:	4611      	mov	r1, r2
   d6754:	6840      	ldr	r0, [r0, #4]
   d6756:	f7ff beb5 	b.w	d64c4 <network_ready>

000d675a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d675a:	2200      	movs	r2, #0
   d675c:	4611      	mov	r1, r2
   d675e:	6840      	ldr	r0, [r0, #4]
   d6760:	f7ff bea0 	b.w	d64a4 <network_connecting>

000d6764 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6764:	2200      	movs	r2, #0
   d6766:	2102      	movs	r1, #2
   d6768:	6840      	ldr	r0, [r0, #4]
   d676a:	f7ff bea3 	b.w	d64b4 <network_disconnect>

000d676e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d676e:	2300      	movs	r3, #0
   d6770:	461a      	mov	r2, r3
   d6772:	6840      	ldr	r0, [r0, #4]
   d6774:	f7ff be8e 	b.w	d6494 <network_connect>

000d6778 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6778:	4b02      	ldr	r3, [pc, #8]	; (d6784 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d677a:	2203      	movs	r2, #3
   d677c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d677e:	4a02      	ldr	r2, [pc, #8]	; (d6788 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6780:	601a      	str	r2, [r3, #0]
   d6782:	4770      	bx	lr
   d6784:	2003e364 	.word	0x2003e364
   d6788:	000d9538 	.word	0x000d9538

000d678c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d678c:	4770      	bx	lr

000d678e <_ZN8SPIClassD0Ev>:
   d678e:	b510      	push	{r4, lr}
   d6790:	4604      	mov	r4, r0
   d6792:	f7fd fc82 	bl	d409a <_ZdlPv>
   d6796:	4620      	mov	r0, r4
   d6798:	bd10      	pop	{r4, pc}
	...

000d679c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d679c:	b570      	push	{r4, r5, r6, lr}
   d679e:	4b08      	ldr	r3, [pc, #32]	; (d67c0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d67a0:	6003      	str	r3, [r0, #0]
   d67a2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d67a4:	2500      	movs	r5, #0
   d67a6:	460e      	mov	r6, r1
   d67a8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d67ac:	f7ff fcee 	bl	d618c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d67b0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d67b2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d67b4:	f7ff fc6a 	bl	d608c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d67b8:	60a5      	str	r5, [r4, #8]
}
   d67ba:	4620      	mov	r0, r4
   d67bc:	bd70      	pop	{r4, r5, r6, pc}
   d67be:	bf00      	nop
   d67c0:	000d956c 	.word	0x000d956c

000d67c4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d67c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d67c8:	7900      	ldrb	r0, [r0, #4]
   d67ca:	f7ff bc2f 	b.w	d602c <HAL_SPI_Begin>

000d67ce <_ZN8SPIClass3endEv>:

  HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
}

void SPIClass::end()
{
   d67ce:	b510      	push	{r4, lr}
   d67d0:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
   d67d2:	68c0      	ldr	r0, [r0, #12]
   d67d4:	f7ff fce2 	bl	d619c <os_mutex_trylock>
    void unlock() { os_mutex_unlock(handle_); }
   d67d8:	68e0      	ldr	r0, [r4, #12]
   d67da:	f7ff fce7 	bl	d61ac <os_mutex_unlock>
  trylock();
  unlock();
  HAL_SPI_End(_spi);
   d67de:	7920      	ldrb	r0, [r4, #4]
}
   d67e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SPIClass::end()
{
  trylock();
  unlock();
  HAL_SPI_End(_spi);
   d67e4:	f7ff bc2a 	b.w	d603c <HAL_SPI_End>

000d67e8 <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d67e8:	7900      	ldrb	r0, [r0, #4]
   d67ea:	f7ff bc2f 	b.w	d604c <HAL_SPI_Set_Bit_Order>

000d67ee <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d67ee:	7900      	ldrb	r0, [r0, #4]
   d67f0:	f7ff bc34 	b.w	d605c <HAL_SPI_Set_Data_Mode>

000d67f4 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d67f4:	4a05      	ldr	r2, [pc, #20]	; (d680c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d67f6:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d67f8:	5c99      	ldrb	r1, [r3, r2]
   d67fa:	4281      	cmp	r1, r0
   d67fc:	d002      	beq.n	d6804 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d67fe:	3301      	adds	r3, #1
   d6800:	2b08      	cmp	r3, #8
   d6802:	d1f9      	bne.n	d67f8 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d6804:	1c58      	adds	r0, r3, #1
}
   d6806:	b2c0      	uxtb	r0, r0
   d6808:	4770      	bx	lr
   d680a:	bf00      	nop
   d680c:	000d9574 	.word	0x000d9574

000d6810 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6810:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d6812:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6814:	6018      	str	r0, [r3, #0]
   d6816:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d6818:	6818      	ldr	r0, [r3, #0]
   d681a:	4288      	cmp	r0, r1
   d681c:	b2e5      	uxtb	r5, r4
   d681e:	d906      	bls.n	d682e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6820:	3401      	adds	r4, #1
   d6822:	2c08      	cmp	r4, #8
   d6824:	d002      	beq.n	d682c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d6826:	0840      	lsrs	r0, r0, #1
   d6828:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d682a:	e7f5      	b.n	d6818 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d682c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6830:	5d5b      	ldrb	r3, [r3, r5]
   d6832:	7013      	strb	r3, [r2, #0]
   d6834:	bd30      	pop	{r4, r5, pc}
   d6836:	bf00      	nop
   d6838:	000d9574 	.word	0x000d9574

000d683c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d683c:	b570      	push	{r4, r5, r6, lr}
   d683e:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d6840:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d6842:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6846:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d6848:	2214      	movs	r2, #20
   d684a:	2100      	movs	r1, #0
   d684c:	a803      	add	r0, sp, #12
   d684e:	f002 fcac 	bl	d91aa <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d6852:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6854:	a903      	add	r1, sp, #12
   d6856:	4630      	mov	r0, r6
   d6858:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d685a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d685e:	f7ff fc25 	bl	d60ac <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d6862:	ab02      	add	r3, sp, #8
   d6864:	f10d 0207 	add.w	r2, sp, #7
   d6868:	4629      	mov	r1, r5
   d686a:	9804      	ldr	r0, [sp, #16]
   d686c:	f7ff ffd0 	bl	d6810 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6870:	7920      	ldrb	r0, [r4, #4]
   d6872:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6876:	f7ff fbf9 	bl	d606c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d687a:	9802      	ldr	r0, [sp, #8]
   d687c:	b008      	add	sp, #32
   d687e:	bd70      	pop	{r4, r5, r6, pc}

000d6880 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6880:	b538      	push	{r3, r4, r5, lr}
   d6882:	4604      	mov	r4, r0
   d6884:	4608      	mov	r0, r1
    if (dividerReference)
   d6886:	68a5      	ldr	r5, [r4, #8]
   d6888:	b14d      	cbz	r5, d689e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d688a:	f7ff ffb3 	bl	d67f4 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d688e:	2201      	movs	r2, #1
   d6890:	fa25 f100 	lsr.w	r1, r5, r0
   d6894:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d6896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d689a:	f7ff bfcf 	b.w	d683c <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d689e:	7920      	ldrb	r0, [r4, #4]
    }
}
   d68a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d68a4:	f7ff bbe2 	b.w	d606c <HAL_SPI_Set_Clock_Divider>

000d68a8 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d68a8:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d68aa:	7900      	ldrb	r0, [r0, #4]
   d68ac:	f7ff fbe6 	bl	d607c <HAL_SPI_Send_Receive_Data>
}
   d68b0:	b2c0      	uxtb	r0, r0
   d68b2:	bd08      	pop	{r3, pc}

000d68b4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d68b4:	7900      	ldrb	r0, [r0, #4]
   d68b6:	f7ff bbf1 	b.w	d609c <HAL_SPI_Is_Enabled>

000d68ba <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d68ba:	4601      	mov	r1, r0
   d68bc:	2200      	movs	r2, #0
   d68be:	208c      	movs	r0, #140	; 0x8c
   d68c0:	f7ff bc3c 	b.w	d613c <HAL_Core_System_Reset_Ex>

000d68c4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d68c4:	2000      	movs	r0, #0
   d68c6:	f7ff bff8 	b.w	d68ba <_ZN11SystemClass5resetEm>
	...

000d68cc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d68cc:	b510      	push	{r4, lr}
   d68ce:	4604      	mov	r4, r0
   d68d0:	4608      	mov	r0, r1
   d68d2:	4611      	mov	r1, r2
   d68d4:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d68d6:	2300      	movs	r3, #0
   d68d8:	f7ff fda8 	bl	d642c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d68dc:	4b06      	ldr	r3, [pc, #24]	; (d68f8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d68de:	2200      	movs	r2, #0
   d68e0:	701a      	strb	r2, [r3, #0]
   d68e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d68e6:	8058      	strh	r0, [r3, #2]
   d68e8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d68ea:	681a      	ldr	r2, [r3, #0]
   d68ec:	889b      	ldrh	r3, [r3, #4]
   d68ee:	6022      	str	r2, [r4, #0]
   d68f0:	80a3      	strh	r3, [r4, #4]
}
   d68f2:	4620      	mov	r0, r4
   d68f4:	bd10      	pop	{r4, pc}
   d68f6:	bf00      	nop
   d68f8:	2003e36c 	.word	0x2003e36c

000d68fc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d68fc:	4b04      	ldr	r3, [pc, #16]	; (d6910 <_GLOBAL__sub_I_System+0x14>)
   d68fe:	2000      	movs	r0, #0
   d6900:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6904:	7018      	strb	r0, [r3, #0]
   d6906:	8058      	strh	r0, [r3, #2]
   d6908:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d690a:	f7ff bd7f 	b.w	d640c <set_system_mode>
   d690e:	bf00      	nop
   d6910:	2003e36c 	.word	0x2003e36c

000d6914 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6914:	b510      	push	{r4, lr}
   d6916:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6918:	f002 fca5 	bl	d9266 <strlen>
   d691c:	3801      	subs	r0, #1
   d691e:	1823      	adds	r3, r4, r0
   d6920:	4620      	mov	r0, r4
	while(i<j){
   d6922:	4298      	cmp	r0, r3
   d6924:	d206      	bcs.n	d6934 <_Z11str_reversePc+0x20>
		c = *i;
   d6926:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6928:	7819      	ldrb	r1, [r3, #0]
   d692a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d692e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6932:	e7f6      	b.n	d6922 <_Z11str_reversePc+0xe>
   d6934:	bd10      	pop	{r4, pc}

000d6936 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6936:	b570      	push	{r4, r5, r6, lr}
   d6938:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d693a:	1e91      	subs	r1, r2, #2
   d693c:	2922      	cmp	r1, #34	; 0x22
   d693e:	d820      	bhi.n	d6982 <ultoa+0x4c>
   d6940:	4625      	mov	r5, r4
   d6942:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6944:	b910      	cbnz	r0, d694c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6946:	4423      	add	r3, r4
            *ptr++ = '0';
   d6948:	2230      	movs	r2, #48	; 0x30
   d694a:	e00e      	b.n	d696a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d694c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6950:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6954:	b2c1      	uxtb	r1, r0
   d6956:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d695a:	2809      	cmp	r0, #9
                *ptr += '0';
   d695c:	bf94      	ite	ls
   d695e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6960:	3157      	addhi	r1, #87	; 0x57
   d6962:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6966:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6968:	e7eb      	b.n	d6942 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d696a:	4299      	cmp	r1, r3
   d696c:	d202      	bcs.n	d6974 <ultoa+0x3e>
            *ptr++ = '0';
   d696e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6972:	e7fa      	b.n	d696a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6974:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6976:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6978:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d697a:	f7ff ffcb 	bl	d6914 <_Z11str_reversePc>
	return buffer;
   d697e:	4620      	mov	r0, r4
   d6980:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6982:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6984:	bd70      	pop	{r4, r5, r6, pc}

000d6986 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6986:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6988:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d698a:	460c      	mov	r4, r1
   d698c:	4615      	mov	r5, r2
	if(a<0){
   d698e:	da0b      	bge.n	d69a8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6994:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6998:	bf14      	ite	ne
   d699a:	4258      	negne	r0, r3
   d699c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d699e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d69a0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d69a2:	462a      	mov	r2, r5
   d69a4:	4419      	add	r1, r3
   d69a6:	e000      	b.n	d69aa <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d69a8:	2301      	movs	r3, #1
   d69aa:	f7ff ffc4 	bl	d6936 <ultoa>
	}
	return buffer;
}
   d69ae:	4620      	mov	r0, r4
   d69b0:	bd38      	pop	{r3, r4, r5, pc}

000d69b2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d69b2:	b510      	push	{r4, lr}
   d69b4:	4604      	mov	r4, r0
{
	free(buffer);
   d69b6:	6800      	ldr	r0, [r0, #0]
   d69b8:	f7ff fdf4 	bl	d65a4 <free>
}
   d69bc:	4620      	mov	r0, r4
   d69be:	bd10      	pop	{r4, pc}

000d69c0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d69c0:	b510      	push	{r4, lr}
   d69c2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d69c4:	6800      	ldr	r0, [r0, #0]
   d69c6:	b108      	cbz	r0, d69cc <_ZN6String10invalidateEv+0xc>
   d69c8:	f7ff fdec 	bl	d65a4 <free>
	buffer = NULL;
   d69cc:	2300      	movs	r3, #0
   d69ce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d69d0:	60a3      	str	r3, [r4, #8]
   d69d2:	6063      	str	r3, [r4, #4]
   d69d4:	bd10      	pop	{r4, pc}

000d69d6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d69d6:	b538      	push	{r3, r4, r5, lr}
   d69d8:	4604      	mov	r4, r0
   d69da:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d69dc:	6800      	ldr	r0, [r0, #0]
   d69de:	3101      	adds	r1, #1
   d69e0:	f7ff fde8 	bl	d65b4 <realloc>
	if (newbuffer) {
   d69e4:	b110      	cbz	r0, d69ec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d69e6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d69ea:	2001      	movs	r0, #1
	}
	return 0;
}
   d69ec:	bd38      	pop	{r3, r4, r5, pc}

000d69ee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d69ee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d69f0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d69f2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d69f4:	b113      	cbz	r3, d69fc <_ZN6String7reserveEj+0xe>
   d69f6:	6843      	ldr	r3, [r0, #4]
   d69f8:	428b      	cmp	r3, r1
   d69fa:	d207      	bcs.n	d6a0c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d69fc:	4620      	mov	r0, r4
   d69fe:	f7ff ffea 	bl	d69d6 <_ZN6String12changeBufferEj>
   d6a02:	b120      	cbz	r0, d6a0e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6a04:	68a3      	ldr	r3, [r4, #8]
   d6a06:	b90b      	cbnz	r3, d6a0c <_ZN6String7reserveEj+0x1e>
   d6a08:	6822      	ldr	r2, [r4, #0]
   d6a0a:	7013      	strb	r3, [r2, #0]
   d6a0c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6a0e:	bd10      	pop	{r4, pc}

000d6a10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a10:	b570      	push	{r4, r5, r6, lr}
   d6a12:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6a14:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a16:	4604      	mov	r4, r0
   d6a18:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6a1a:	f7ff ffe8 	bl	d69ee <_ZN6String7reserveEj>
   d6a1e:	b918      	cbnz	r0, d6a28 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6a20:	4620      	mov	r0, r4
   d6a22:	f7ff ffcd 	bl	d69c0 <_ZN6String10invalidateEv>
		return *this;
   d6a26:	e009      	b.n	d6a3c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6a28:	462a      	mov	r2, r5
   d6a2a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6a2c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6a2e:	6820      	ldr	r0, [r4, #0]
   d6a30:	f002 fbb0 	bl	d9194 <memcpy>
	buffer[len] = 0;
   d6a34:	6822      	ldr	r2, [r4, #0]
   d6a36:	68a3      	ldr	r3, [r4, #8]
   d6a38:	2100      	movs	r1, #0
   d6a3a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6a3c:	4620      	mov	r0, r4
   d6a3e:	bd70      	pop	{r4, r5, r6, pc}

000d6a40 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6a40:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a42:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6a44:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a46:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a48:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a4a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a4c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6a4e:	460d      	mov	r5, r1
   d6a50:	b139      	cbz	r1, d6a62 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6a52:	4608      	mov	r0, r1
   d6a54:	f002 fc07 	bl	d9266 <strlen>
   d6a58:	4629      	mov	r1, r5
   d6a5a:	4602      	mov	r2, r0
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	f7ff ffd7 	bl	d6a10 <_ZN6String4copyEPKcj>
}
   d6a62:	4620      	mov	r0, r4
   d6a64:	bd38      	pop	{r3, r4, r5, pc}

000d6a66 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6a66:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6a68:	b510      	push	{r4, lr}
   d6a6a:	460b      	mov	r3, r1
   d6a6c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6a6e:	d007      	beq.n	d6a80 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6a70:	6809      	ldr	r1, [r1, #0]
   d6a72:	b119      	cbz	r1, d6a7c <_ZN6StringaSERKS_+0x16>
   d6a74:	689a      	ldr	r2, [r3, #8]
   d6a76:	f7ff ffcb 	bl	d6a10 <_ZN6String4copyEPKcj>
   d6a7a:	e001      	b.n	d6a80 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6a7c:	f7ff ffa0 	bl	d69c0 <_ZN6String10invalidateEv>

	return *this;
}
   d6a80:	4620      	mov	r0, r4
   d6a82:	bd10      	pop	{r4, pc}

000d6a84 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a84:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a86:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a88:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a8a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a8c:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a8e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a90:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6a92:	f7ff ffe8 	bl	d6a66 <_ZN6StringaSERKS_>
}
   d6a96:	4620      	mov	r0, r4
   d6a98:	bd10      	pop	{r4, pc}

000d6a9a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6a9a:	b538      	push	{r3, r4, r5, lr}
   d6a9c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6a9e:	460c      	mov	r4, r1
   d6aa0:	b141      	cbz	r1, d6ab4 <_ZN6StringaSEPKc+0x1a>
   d6aa2:	4608      	mov	r0, r1
   d6aa4:	f002 fbdf 	bl	d9266 <strlen>
   d6aa8:	4621      	mov	r1, r4
   d6aaa:	4602      	mov	r2, r0
   d6aac:	4628      	mov	r0, r5
   d6aae:	f7ff ffaf 	bl	d6a10 <_ZN6String4copyEPKcj>
   d6ab2:	e001      	b.n	d6ab8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6ab4:	f7ff ff84 	bl	d69c0 <_ZN6String10invalidateEv>

	return *this;
}
   d6ab8:	4628      	mov	r0, r5
   d6aba:	bd38      	pop	{r3, r4, r5, pc}

000d6abc <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6abc:	b510      	push	{r4, lr}
   d6abe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ac0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6ac2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ac4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6ac6:	6063      	str	r3, [r4, #4]
	len = 0;
   d6ac8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6aca:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6acc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d6ace:	a901      	add	r1, sp, #4
   d6ad0:	f7ff ff59 	bl	d6986 <itoa>
	*this = buf;
   d6ad4:	a901      	add	r1, sp, #4
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	f7ff ffdf 	bl	d6a9a <_ZN6StringaSEPKc>
}
   d6adc:	4620      	mov	r0, r4
   d6ade:	b00a      	add	sp, #40	; 0x28
   d6ae0:	bd10      	pop	{r4, pc}

000d6ae2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6ae2:	b570      	push	{r4, r5, r6, lr}
   d6ae4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6ae6:	460e      	mov	r6, r1
   d6ae8:	b909      	cbnz	r1, d6aee <_ZN6String6concatEPKcj+0xc>
   d6aea:	2000      	movs	r0, #0
   d6aec:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6aee:	b16a      	cbz	r2, d6b0c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6af0:	6883      	ldr	r3, [r0, #8]
   d6af2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6af4:	4629      	mov	r1, r5
   d6af6:	f7ff ff7a 	bl	d69ee <_ZN6String7reserveEj>
   d6afa:	2800      	cmp	r0, #0
   d6afc:	d0f5      	beq.n	d6aea <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6afe:	6820      	ldr	r0, [r4, #0]
   d6b00:	68a3      	ldr	r3, [r4, #8]
   d6b02:	4631      	mov	r1, r6
   d6b04:	4418      	add	r0, r3
   d6b06:	f002 fb8b 	bl	d9220 <strcpy>
	len = newlen;
   d6b0a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6b0c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6b0e:	bd70      	pop	{r4, r5, r6, pc}

000d6b10 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6b10:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b12:	688a      	ldr	r2, [r1, #8]
   d6b14:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6b16:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b18:	f7ff ffe3 	bl	d6ae2 <_ZN6String6concatEPKcj>
   d6b1c:	b910      	cbnz	r0, d6b24 <_ZplRK15StringSumHelperRK6String+0x14>
   d6b1e:	4620      	mov	r0, r4
   d6b20:	f7ff ff4e 	bl	d69c0 <_ZN6String10invalidateEv>
	return a;
}
   d6b24:	4620      	mov	r0, r4
   d6b26:	bd10      	pop	{r4, pc}

000d6b28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b2a:	4606      	mov	r6, r0
   d6b2c:	460d      	mov	r5, r1
   d6b2e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6b30:	2400      	movs	r4, #0
  while (size--) {
   d6b32:	42bd      	cmp	r5, r7
   d6b34:	d00c      	beq.n	d6b50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6b36:	6833      	ldr	r3, [r6, #0]
   d6b38:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b3c:	689b      	ldr	r3, [r3, #8]
   d6b3e:	4630      	mov	r0, r6
   d6b40:	4798      	blx	r3
     if (chunk>=0)
   d6b42:	2800      	cmp	r0, #0
   d6b44:	db01      	blt.n	d6b4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6b46:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6b48:	e7f3      	b.n	d6b32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6b4a:	2c00      	cmp	r4, #0
   d6b4c:	bf08      	it	eq
   d6b4e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b50:	4620      	mov	r0, r4
   d6b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6b54:	b570      	push	{r4, r5, r6, lr}
   d6b56:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6b58:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6b5a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6b5c:	b149      	cbz	r1, d6b72 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6b5e:	f002 fb82 	bl	d9266 <strlen>
   d6b62:	682b      	ldr	r3, [r5, #0]
   d6b64:	4602      	mov	r2, r0
   d6b66:	4621      	mov	r1, r4
   d6b68:	4628      	mov	r0, r5
   d6b6a:	68db      	ldr	r3, [r3, #12]
    }
   d6b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b70:	4718      	bx	r3
    }
   d6b72:	bd70      	pop	{r4, r5, r6, pc}

000d6b74 <_ZN5Print5printEPKc>:
   d6b74:	b508      	push	{r3, lr}
   d6b76:	f7ff ffed 	bl	d6b54 <_ZN5Print5writeEPKc>
   d6b7a:	bd08      	pop	{r3, pc}

000d6b7c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b7c:	6803      	ldr	r3, [r0, #0]
   d6b7e:	689b      	ldr	r3, [r3, #8]
   d6b80:	4718      	bx	r3

000d6b82 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b82:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b84:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b86:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b88:	f7ff fff8 	bl	d6b7c <_ZN5Print5printEc>
  n += print('\n');
   d6b8c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6b8e:	4604      	mov	r4, r0
  n += print('\n');
   d6b90:	4628      	mov	r0, r5
   d6b92:	f7ff fff3 	bl	d6b7c <_ZN5Print5printEc>
  return n;
}
   d6b96:	4420      	add	r0, r4
   d6b98:	bd38      	pop	{r3, r4, r5, pc}

000d6b9a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b9a:	b538      	push	{r3, r4, r5, lr}
   d6b9c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6b9e:	f7ff ffd9 	bl	d6b54 <_ZN5Print5writeEPKc>
   d6ba2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6ba4:	4628      	mov	r0, r5
   d6ba6:	f7ff ffec 	bl	d6b82 <_ZN5Print7printlnEv>
  return n;
}
   d6baa:	4420      	add	r0, r4
   d6bac:	bd38      	pop	{r3, r4, r5, pc}

000d6bae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6bae:	b530      	push	{r4, r5, lr}
   d6bb0:	b08b      	sub	sp, #44	; 0x2c
   d6bb2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6bb4:	2100      	movs	r1, #0
   d6bb6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6bba:	2a01      	cmp	r2, #1
   d6bbc:	bf98      	it	ls
   d6bbe:	220a      	movls	r2, #10
   d6bc0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6bc4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6bc8:	fb05 3312 	mls	r3, r5, r2, r3
   d6bcc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6bd0:	2b09      	cmp	r3, #9
   d6bd2:	bf94      	ite	ls
   d6bd4:	3330      	addls	r3, #48	; 0x30
   d6bd6:	3337      	addhi	r3, #55	; 0x37
   d6bd8:	b2db      	uxtb	r3, r3
   d6bda:	4621      	mov	r1, r4
   d6bdc:	f804 3901 	strb.w	r3, [r4], #-1
   d6be0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6be2:	2d00      	cmp	r5, #0
   d6be4:	d1ee      	bne.n	d6bc4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6be6:	f7ff ffb5 	bl	d6b54 <_ZN5Print5writeEPKc>
}
   d6bea:	b00b      	add	sp, #44	; 0x2c
   d6bec:	bd30      	pop	{r4, r5, pc}

000d6bee <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6bee:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6bf0:	b92a      	cbnz	r2, d6bfe <_ZN5Print5printEmi+0x10>
   d6bf2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6bf8:	689b      	ldr	r3, [r3, #8]
   d6bfa:	b2c9      	uxtb	r1, r1
   d6bfc:	4718      	bx	r3
  else return printNumber(n, base);
   d6bfe:	b2d2      	uxtb	r2, r2
}
   d6c00:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6c04:	f7ff bfd3 	b.w	d6bae <_ZN5Print11printNumberEmh>

000d6c08 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6c08:	f7ff bff1 	b.w	d6bee <_ZN5Print5printEmi>

000d6c0c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d6c0c:	b538      	push	{r3, r4, r5, lr}
   d6c0e:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d6c10:	f7ff ffed 	bl	d6bee <_ZN5Print5printEmi>
   d6c14:	4604      	mov	r4, r0
  n += println();
   d6c16:	4628      	mov	r0, r5
   d6c18:	f7ff ffb3 	bl	d6b82 <_ZN5Print7printlnEv>
  return n;
}
   d6c1c:	4420      	add	r0, r4
   d6c1e:	bd38      	pop	{r3, r4, r5, pc}

000d6c20 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c24:	4607      	mov	r7, r0
   d6c26:	460e      	mov	r6, r1
  if (base == 0) {
   d6c28:	4615      	mov	r5, r2
   d6c2a:	b92a      	cbnz	r2, d6c38 <_ZN5Print5printEli+0x18>
    return write(n);
   d6c2c:	6803      	ldr	r3, [r0, #0]
   d6c2e:	b2c9      	uxtb	r1, r1
   d6c30:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6c36:	4718      	bx	r3
  } else if (base == 10) {
   d6c38:	2a0a      	cmp	r2, #10
   d6c3a:	d102      	bne.n	d6c42 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6c3c:	2900      	cmp	r1, #0
   d6c3e:	da01      	bge.n	d6c44 <_ZN5Print5printEli+0x24>
   d6c40:	e004      	b.n	d6c4c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6c42:	b2d2      	uxtb	r2, r2
  }
}
   d6c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6c48:	f7ff bfb1 	b.w	d6bae <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6c4c:	212d      	movs	r1, #45	; 0x2d
   d6c4e:	f7ff ff95 	bl	d6b7c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6c52:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6c54:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6c56:	4271      	negs	r1, r6
   d6c58:	4638      	mov	r0, r7
   d6c5a:	f7ff ffa8 	bl	d6bae <_ZN5Print11printNumberEmh>
   d6c5e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6c64 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6c64:	f7ff bfdc 	b.w	d6c20 <_ZN5Print5printEli>

000d6c68 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d6c68:	b538      	push	{r3, r4, r5, lr}
   d6c6a:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6c6c:	f7ff ffd8 	bl	d6c20 <_ZN5Print5printEli>
   d6c70:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7ff ff85 	bl	d6b82 <_ZN5Print7printlnEv>
  return n;
}
   d6c78:	4420      	add	r0, r4
   d6c7a:	bd38      	pop	{r3, r4, r5, pc}

000d6c7c <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
   d6c7c:	b538      	push	{r3, r4, r5, lr}
   d6c7e:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d6c80:	f7ff ffce 	bl	d6c20 <_ZN5Print5printEli>
   d6c84:	4604      	mov	r4, r0
  n += println();
   d6c86:	4628      	mov	r0, r5
   d6c88:	f7ff ff7b 	bl	d6b82 <_ZN5Print7printlnEv>
  return n;
}
   d6c8c:	4420      	add	r0, r4
   d6c8e:	bd38      	pop	{r3, r4, r5, pc}

000d6c90 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c94:	ec57 6b10 	vmov	r6, r7, d0
   d6c98:	4682      	mov	sl, r0
   d6c9a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6c9c:	ee10 2a10 	vmov	r2, s0
   d6ca0:	463b      	mov	r3, r7
   d6ca2:	ee10 0a10 	vmov	r0, s0
   d6ca6:	4639      	mov	r1, r7
   d6ca8:	f001 ff1e 	bl	d8ae8 <__aeabi_dcmpun>
   d6cac:	b108      	cbz	r0, d6cb2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6cae:	4948      	ldr	r1, [pc, #288]	; (d6dd0 <_ZN5Print10printFloatEdh+0x140>)
   d6cb0:	e012      	b.n	d6cd8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6cb2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6cb6:	f04f 32ff 	mov.w	r2, #4294967295
   d6cba:	4b46      	ldr	r3, [pc, #280]	; (d6dd4 <_ZN5Print10printFloatEdh+0x144>)
   d6cbc:	4630      	mov	r0, r6
   d6cbe:	4649      	mov	r1, r9
   d6cc0:	f001 ff12 	bl	d8ae8 <__aeabi_dcmpun>
   d6cc4:	b968      	cbnz	r0, d6ce2 <_ZN5Print10printFloatEdh+0x52>
   d6cc6:	f04f 32ff 	mov.w	r2, #4294967295
   d6cca:	4b42      	ldr	r3, [pc, #264]	; (d6dd4 <_ZN5Print10printFloatEdh+0x144>)
   d6ccc:	4630      	mov	r0, r6
   d6cce:	4649      	mov	r1, r9
   d6cd0:	f001 feec 	bl	d8aac <__aeabi_dcmple>
   d6cd4:	b928      	cbnz	r0, d6ce2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6cd6:	4940      	ldr	r1, [pc, #256]	; (d6dd8 <_ZN5Print10printFloatEdh+0x148>)
   d6cd8:	4650      	mov	r0, sl
   d6cda:	f7ff ff3b 	bl	d6b54 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6ce2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6ce6:	4b3d      	ldr	r3, [pc, #244]	; (d6ddc <_ZN5Print10printFloatEdh+0x14c>)
   d6ce8:	4630      	mov	r0, r6
   d6cea:	4639      	mov	r1, r7
   d6cec:	f001 fef2 	bl	d8ad4 <__aeabi_dcmpgt>
   d6cf0:	b108      	cbz	r0, d6cf6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6cf2:	493b      	ldr	r1, [pc, #236]	; (d6de0 <_ZN5Print10printFloatEdh+0x150>)
   d6cf4:	e7f0      	b.n	d6cd8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6cf6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6cfa:	4b3a      	ldr	r3, [pc, #232]	; (d6de4 <_ZN5Print10printFloatEdh+0x154>)
   d6cfc:	4630      	mov	r0, r6
   d6cfe:	4639      	mov	r1, r7
   d6d00:	f001 feca 	bl	d8a98 <__aeabi_dcmplt>
   d6d04:	2800      	cmp	r0, #0
   d6d06:	d1f4      	bne.n	d6cf2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6d08:	2200      	movs	r2, #0
   d6d0a:	2300      	movs	r3, #0
   d6d0c:	4630      	mov	r0, r6
   d6d0e:	4639      	mov	r1, r7
   d6d10:	f001 fec2 	bl	d8a98 <__aeabi_dcmplt>
   d6d14:	b140      	cbz	r0, d6d28 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6d16:	212d      	movs	r1, #45	; 0x2d
   d6d18:	4650      	mov	r0, sl
   d6d1a:	f7ff ff2f 	bl	d6b7c <_ZN5Print5printEc>
     number = -number;
   d6d1e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6d22:	4604      	mov	r4, r0
     number = -number;
   d6d24:	461f      	mov	r7, r3
   d6d26:	e000      	b.n	d6d2a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6d28:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6d2a:	492f      	ldr	r1, [pc, #188]	; (d6de8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6d2c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6d30:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6d32:	fa5f f388 	uxtb.w	r3, r8
   d6d36:	429d      	cmp	r5, r3
   d6d38:	d906      	bls.n	d6d48 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6d3a:	2200      	movs	r2, #0
   d6d3c:	4b2b      	ldr	r3, [pc, #172]	; (d6dec <_ZN5Print10printFloatEdh+0x15c>)
   d6d3e:	f001 fd63 	bl	d8808 <__aeabi_ddiv>
   d6d42:	f108 0801 	add.w	r8, r8, #1
   d6d46:	e7f4      	b.n	d6d32 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6d48:	4632      	mov	r2, r6
   d6d4a:	463b      	mov	r3, r7
   d6d4c:	f001 fa80 	bl	d8250 <__adddf3>
   d6d50:	460f      	mov	r7, r1
   d6d52:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6d54:	f001 ff06 	bl	d8b64 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6d58:	220a      	movs	r2, #10
   d6d5a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6d5c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6d5e:	4650      	mov	r0, sl
   d6d60:	f7ff ff25 	bl	d6bae <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6d64:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6d66:	b37d      	cbz	r5, d6dc8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6d68:	4640      	mov	r0, r8
   d6d6a:	f001 fbad 	bl	d84c8 <__aeabi_ui2d>
   d6d6e:	4602      	mov	r2, r0
   d6d70:	460b      	mov	r3, r1
   d6d72:	4630      	mov	r0, r6
   d6d74:	4639      	mov	r1, r7
   d6d76:	f001 fa69 	bl	d824c <__aeabi_dsub>
   d6d7a:	4606      	mov	r6, r0
   d6d7c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d7e:	4650      	mov	r0, sl
   d6d80:	491b      	ldr	r1, [pc, #108]	; (d6df0 <_ZN5Print10printFloatEdh+0x160>)
   d6d82:	f7ff fee7 	bl	d6b54 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6d86:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6d88:	4b18      	ldr	r3, [pc, #96]	; (d6dec <_ZN5Print10printFloatEdh+0x15c>)
   d6d8a:	2200      	movs	r2, #0
   d6d8c:	4630      	mov	r0, r6
   d6d8e:	4639      	mov	r1, r7
   d6d90:	f001 fc10 	bl	d85b4 <__aeabi_dmul>
   d6d94:	460f      	mov	r7, r1
   d6d96:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6d98:	f001 febc 	bl	d8b14 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6d9c:	220a      	movs	r2, #10
   d6d9e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6da0:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6da2:	4650      	mov	r0, sl
   d6da4:	f7ff ff3c 	bl	d6c20 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6da8:	4404      	add	r4, r0
    remainder -= toPrint;
   d6daa:	4640      	mov	r0, r8
   d6dac:	f001 fb9c 	bl	d84e8 <__aeabi_i2d>
   d6db0:	4602      	mov	r2, r0
   d6db2:	460b      	mov	r3, r1
   d6db4:	4630      	mov	r0, r6
   d6db6:	4639      	mov	r1, r7
   d6db8:	f001 fa48 	bl	d824c <__aeabi_dsub>
   d6dbc:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6dbe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6dc2:	4606      	mov	r6, r0
   d6dc4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6dc6:	d1df      	bne.n	d6d88 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6dc8:	4620      	mov	r0, r4
   d6dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dce:	bf00      	nop
   d6dd0:	000d957c 	.word	0x000d957c
   d6dd4:	7fefffff 	.word	0x7fefffff
   d6dd8:	000d9584 	.word	0x000d9584
   d6ddc:	41efffff 	.word	0x41efffff
   d6de0:	000d9580 	.word	0x000d9580
   d6de4:	c1efffff 	.word	0xc1efffff
   d6de8:	3fe00000 	.word	0x3fe00000
   d6dec:	40240000 	.word	0x40240000
   d6df0:	000d929d 	.word	0x000d929d

000d6df4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6df4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6df6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6df8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6dfa:	f7ff ff49 	bl	d6c90 <_ZN5Print10printFloatEdh>
   d6dfe:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6e00:	4628      	mov	r0, r5
   d6e02:	f7ff febe 	bl	d6b82 <_ZN5Print7printlnEv>
  return n;
}
   d6e06:	4420      	add	r0, r4
   d6e08:	bd38      	pop	{r3, r4, r5, pc}

000d6e0a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6e0a:	b40c      	push	{r2, r3}
   d6e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e10:	b087      	sub	sp, #28
   d6e12:	af00      	add	r7, sp, #0
   d6e14:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6e18:	4605      	mov	r5, r0
   d6e1a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6e1e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6e20:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6e22:	4623      	mov	r3, r4
   d6e24:	464a      	mov	r2, r9
   d6e26:	2114      	movs	r1, #20
   d6e28:	1d38      	adds	r0, r7, #4
   d6e2a:	f7ff fbd3 	bl	d65d4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6e2e:	2813      	cmp	r0, #19
   d6e30:	d805      	bhi.n	d6e3e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e32:	1d39      	adds	r1, r7, #4
   d6e34:	4628      	mov	r0, r5
   d6e36:	f7ff fe8d 	bl	d6b54 <_ZN5Print5writeEPKc>
   d6e3a:	4604      	mov	r4, r0
   d6e3c:	e013      	b.n	d6e66 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e3e:	f100 0308 	add.w	r3, r0, #8
   d6e42:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6e46:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e48:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6e4c:	1c41      	adds	r1, r0, #1
   d6e4e:	4623      	mov	r3, r4
   d6e50:	464a      	mov	r2, r9
   d6e52:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6e54:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6e56:	f7ff fbbd 	bl	d65d4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e5a:	4669      	mov	r1, sp
   d6e5c:	4628      	mov	r0, r5
   d6e5e:	f7ff fe79 	bl	d6b54 <_ZN5Print5writeEPKc>
   d6e62:	4604      	mov	r4, r0
   d6e64:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6e66:	b11e      	cbz	r6, d6e70 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6e68:	4628      	mov	r0, r5
   d6e6a:	f7ff fe8a 	bl	d6b82 <_ZN5Print7printlnEv>
   d6e6e:	4404      	add	r4, r0
    return n;
}
   d6e70:	4620      	mov	r0, r4
   d6e72:	371c      	adds	r7, #28
   d6e74:	46bd      	mov	sp, r7
   d6e76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e7a:	b002      	add	sp, #8
   d6e7c:	4770      	bx	lr

000d6e7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6e7e:	680b      	ldr	r3, [r1, #0]
   d6e80:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6e82:	b113      	cbz	r3, d6e8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6e84:	685a      	ldr	r2, [r3, #4]
   d6e86:	3201      	adds	r2, #1
   d6e88:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6e8a:	4770      	bx	lr

000d6e8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6e8c:	4b01      	ldr	r3, [pc, #4]	; (d6e94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6e8e:	4a02      	ldr	r2, [pc, #8]	; (d6e98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6e90:	601a      	str	r2, [r3, #0]
   d6e92:	4770      	bx	lr
   d6e94:	2003e374 	.word	0x2003e374
   d6e98:	000d963b 	.word	0x000d963b

000d6e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6e9c:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6e9e:	681a      	ldr	r2, [r3, #0]
   d6ea0:	4b02      	ldr	r3, [pc, #8]	; (d6eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ea2:	601a      	str	r2, [r3, #0]
   d6ea4:	4770      	bx	lr
   d6ea6:	bf00      	nop
   d6ea8:	2003e064 	.word	0x2003e064
   d6eac:	2003e378 	.word	0x2003e378

000d6eb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6eb0:	2100      	movs	r1, #0
   d6eb2:	f7ff bab3 	b.w	d641c <system_delay_ms>

000d6eb6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6eb6:	b510      	push	{r4, lr}
   d6eb8:	4604      	mov	r4, r0
   d6eba:	f7fd f940 	bl	d413e <_ZNSt14_Function_baseD1Ev>
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	bd10      	pop	{r4, pc}

000d6ec2 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d6ec2:	b510      	push	{r4, lr}
   d6ec4:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6ec6:	f7ff fa89 	bl	d63dc <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d6eca:	4284      	cmp	r4, r0
   d6ecc:	d008      	beq.n	d6ee0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d6ece:	b11c      	cbz	r4, d6ed8 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d6ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d6ed4:	f7ff ba72 	b.w	d63bc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d6ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d6edc:	f7ff ba76 	b.w	d63cc <LED_Signaling_Stop>
   d6ee0:	bd10      	pop	{r4, pc}

000d6ee2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6ee2:	b570      	push	{r4, r5, r6, lr}
   d6ee4:	4605      	mov	r5, r0
   d6ee6:	460e      	mov	r6, r1
   d6ee8:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6eea:	f7ff fa77 	bl	d63dc <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d6eee:	b150      	cbz	r0, d6f06 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6ef0:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d6ef4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d6ef8:	f7ff fa58 	bl	d63ac <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d6efc:	20e7      	movs	r0, #231	; 0xe7
}
   d6efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d6f02:	f7ff ba73 	b.w	d63ec <LED_On>
   d6f06:	bd70      	pop	{r4, r5, r6, pc}

000d6f08 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6f08:	b513      	push	{r0, r1, r4, lr}
   d6f0a:	460b      	mov	r3, r1
   d6f0c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f0e:	c803      	ldmia	r0, {r0, r1}
   d6f10:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6f14:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6f18:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6f1c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6f20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6f24:	b002      	add	sp, #8
   d6f26:	bd10      	pop	{r4, pc}

000d6f28 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f28:	4803      	ldr	r0, [pc, #12]	; (d6f38 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f2a:	4a04      	ldr	r2, [pc, #16]	; (d6f3c <_GLOBAL__sub_I_RGB+0x14>)
   d6f2c:	4904      	ldr	r1, [pc, #16]	; (d6f40 <_GLOBAL__sub_I_RGB+0x18>)
   d6f2e:	2300      	movs	r3, #0
   d6f30:	6083      	str	r3, [r0, #8]
   d6f32:	f001 b837 	b.w	d7fa4 <__aeabi_atexit>
   d6f36:	bf00      	nop
   d6f38:	2003e37c 	.word	0x2003e37c
   d6f3c:	2003e0d0 	.word	0x2003e0d0
   d6f40:	000d6eb7 	.word	0x000d6eb7

000d6f44 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d6f44:	0909      	lsrs	r1, r1, #4
   d6f46:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d6f4a:	ee07 0a90 	vmov	s15, r0
   d6f4e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d6f52:	eddf 7a02 	vldr	s15, [pc, #8]	; d6f5c <_ZN6detail9_getVCellEhh+0x18>
   d6f56:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6f5a:	4770      	bx	lr
   d6f5c:	44480000 	.word	0x44480000

000d6f60 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6f60:	6800      	ldr	r0, [r0, #0]
   d6f62:	f000 bdd5 	b.w	d7b10 <_ZN7TwoWire4lockEv>

000d6f66 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6f66:	b510      	push	{r4, lr}
   d6f68:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6f6a:	6001      	str	r1, [r0, #0]
   d6f6c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6f6e:	b10a      	cbz	r2, d6f74 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6f70:	f7ff fff6 	bl	d6f60 <_ZN9FuelGauge4lockEv>
    }
}
   d6f74:	4620      	mov	r0, r4
   d6f76:	bd10      	pop	{r4, pc}

000d6f78 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6f78:	b538      	push	{r3, r4, r5, lr}
   d6f7a:	4604      	mov	r4, r0
   d6f7c:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6f7e:	f000 fff1 	bl	d7f64 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6f82:	462a      	mov	r2, r5
   d6f84:	4601      	mov	r1, r0
   d6f86:	4620      	mov	r0, r4
   d6f88:	f7ff ffed 	bl	d6f66 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	bd38      	pop	{r3, r4, r5, pc}

000d6f90 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6f90:	6800      	ldr	r0, [r0, #0]
   d6f92:	f000 bdc6 	b.w	d7b22 <_ZN7TwoWire6unlockEv>

000d6f96 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6f96:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6f98:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d6f9a:	4604      	mov	r4, r0
{
    if (lock_) {
   d6f9c:	b10b      	cbz	r3, d6fa2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6f9e:	f7ff fff7 	bl	d6f90 <_ZN9FuelGauge6unlockEv>
    }
}
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	bd10      	pop	{r4, pc}

000d6fa6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fa8:	4604      	mov	r4, r0
   d6faa:	4616      	mov	r6, r2
   d6fac:	461d      	mov	r5, r3
   d6fae:	460f      	mov	r7, r1
   d6fb0:	f7ff ffd6 	bl	d6f60 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d6fb4:	6820      	ldr	r0, [r4, #0]
   d6fb6:	2136      	movs	r1, #54	; 0x36
   d6fb8:	f000 fd9c 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d6fbc:	6820      	ldr	r0, [r4, #0]
   d6fbe:	6803      	ldr	r3, [r0, #0]
   d6fc0:	4639      	mov	r1, r7
   d6fc2:	689b      	ldr	r3, [r3, #8]
   d6fc4:	4798      	blx	r3
    i2c_.endTransmission(true);
   d6fc6:	2101      	movs	r1, #1
   d6fc8:	6820      	ldr	r0, [r4, #0]
   d6fca:	f000 fd96 	bl	d7afa <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d6fce:	2202      	movs	r2, #2
   d6fd0:	2136      	movs	r1, #54	; 0x36
   d6fd2:	2301      	movs	r3, #1
   d6fd4:	6820      	ldr	r0, [r4, #0]
   d6fd6:	f000 fd84 	bl	d7ae2 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d6fda:	6820      	ldr	r0, [r4, #0]
   d6fdc:	6803      	ldr	r3, [r0, #0]
   d6fde:	695b      	ldr	r3, [r3, #20]
   d6fe0:	4798      	blx	r3
   d6fe2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d6fe4:	6820      	ldr	r0, [r4, #0]
   d6fe6:	6803      	ldr	r3, [r0, #0]
   d6fe8:	695b      	ldr	r3, [r3, #20]
   d6fea:	4798      	blx	r3
   d6fec:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6fee:	4620      	mov	r0, r4
}
   d6ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6ff4:	f7ff bfcc 	b.w	d6f90 <_ZN9FuelGauge6unlockEv>

000d6ff8 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d6ff8:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6ffa:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d6ffc:	2200      	movs	r2, #0
   d6ffe:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d7002:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d7006:	2102      	movs	r1, #2
   d7008:	f10d 0206 	add.w	r2, sp, #6
   d700c:	f7ff ffcb 	bl	d6fa6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d7010:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d7014:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d7018:	b003      	add	sp, #12
   d701a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d701e:	f7ff bf91 	b.w	d6f44 <_ZN6detail9_getVCellEhh>
	...

000d7024 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d7024:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d7026:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7028:	2200      	movs	r2, #0
	byte LSB = 0;
   d702a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d702e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d7032:	2104      	movs	r1, #4
   d7034:	f10d 0206 	add.w	r2, sp, #6
   d7038:	f7ff ffb5 	bl	d6fa6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d703c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d7040:	f001 fa52 	bl	d84e8 <__aeabi_i2d>
   d7044:	2200      	movs	r2, #0
   d7046:	4b09      	ldr	r3, [pc, #36]	; (d706c <_ZN9FuelGauge6getSoCEv+0x48>)
   d7048:	f001 fab4 	bl	d85b4 <__aeabi_dmul>
   d704c:	f001 fdaa 	bl	d8ba4 <__aeabi_d2f>
   d7050:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d7054:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7058:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d705c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7060:	ee37 0a80 	vadd.f32	s0, s15, s0
   d7064:	b003      	add	sp, #12
   d7066:	f85d fb04 	ldr.w	pc, [sp], #4
   d706a:	bf00      	nop
   d706c:	3f700000 	.word	0x3f700000

000d7070 <_ZN9FuelGauge18readConfigRegisterERhS0_>:

}


void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
   d7070:	4613      	mov	r3, r2
   d7072:	460a      	mov	r2, r1
   d7074:	210c      	movs	r1, #12
   d7076:	f7ff bf96 	b.w	d6fa6 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d707a <_ZN9FuelGauge13writeRegisterEhhh>:
    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
    MSB = i2c_.read();
    LSB = i2c_.read();
}

void FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d707c:	4604      	mov	r4, r0
   d707e:	4616      	mov	r6, r2
   d7080:	461d      	mov	r5, r3
   d7082:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7084:	f7ff ff6c 	bl	d6f60 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7088:	6820      	ldr	r0, [r4, #0]
   d708a:	2136      	movs	r1, #54	; 0x36
   d708c:	f000 fd32 	bl	d7af4 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(address);
   d7090:	6820      	ldr	r0, [r4, #0]
   d7092:	6803      	ldr	r3, [r0, #0]
   d7094:	4639      	mov	r1, r7
   d7096:	689b      	ldr	r3, [r3, #8]
   d7098:	4798      	blx	r3
    i2c_.write(MSB);
   d709a:	6820      	ldr	r0, [r4, #0]
   d709c:	6803      	ldr	r3, [r0, #0]
   d709e:	4631      	mov	r1, r6
   d70a0:	689b      	ldr	r3, [r3, #8]
   d70a2:	4798      	blx	r3
    i2c_.write(LSB);
   d70a4:	6820      	ldr	r0, [r4, #0]
   d70a6:	6803      	ldr	r3, [r0, #0]
   d70a8:	4629      	mov	r1, r5
   d70aa:	689a      	ldr	r2, [r3, #8]
   d70ac:	4790      	blx	r2
    i2c_.endTransmission(true);
   d70ae:	6820      	ldr	r0, [r4, #0]
   d70b0:	2101      	movs	r1, #1
   d70b2:	f000 fd22 	bl	d7afa <_ZN7TwoWire15endTransmissionEh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d70b6:	4620      	mov	r0, r4
}
   d70b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d70bc:	f7ff bf68 	b.w	d6f90 <_ZN9FuelGauge6unlockEv>

000d70c0 <_ZN9FuelGauge5sleepEv>:
void FuelGauge::quickStart() {

	writeRegister(MODE_REGISTER, 0x40, 0x00);
}

void FuelGauge::sleep() {
   d70c0:	b513      	push	{r0, r1, r4, lr}
   d70c2:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d70c4:	f7ff ff4c 	bl	d6f60 <_ZN9FuelGauge4lockEv>

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
	byte LSB = 0;
   d70c8:	aa02      	add	r2, sp, #8
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d70ca:	2300      	movs	r3, #0
	byte LSB = 0;
   d70cc:	f802 3d01 	strb.w	r3, [r2, #-1]!

	readConfigRegister(MSB, LSB);
   d70d0:	f10d 0106 	add.w	r1, sp, #6
   d70d4:	4620      	mov	r0, r4
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d70d6:	f88d 3006 	strb.w	r3, [sp, #6]
	byte LSB = 0;

	readConfigRegister(MSB, LSB);
   d70da:	f7ff ffc9 	bl	d7070 <_ZN9FuelGauge18readConfigRegisterERhS0_>

	writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000));
   d70de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d70e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d70e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d70ea:	210c      	movs	r1, #12
   d70ec:	4620      	mov	r0, r4
   d70ee:	f7ff ffc4 	bl	d707a <_ZN9FuelGauge13writeRegisterEhhh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d70f2:	4620      	mov	r0, r4
   d70f4:	f7ff ff4c 	bl	d6f90 <_ZN9FuelGauge6unlockEv>

}
   d70f8:	b002      	add	sp, #8
   d70fa:	bd10      	pop	{r4, pc}

000d70fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d70fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d70fe:	4b0c      	ldr	r3, [pc, #48]	; (d7130 <serialEventRun+0x34>)
   d7100:	b133      	cbz	r3, d7110 <serialEventRun+0x14>
   d7102:	f000 fba3 	bl	d784c <_Z16_fetch_usbserialv>
   d7106:	6803      	ldr	r3, [r0, #0]
   d7108:	691b      	ldr	r3, [r3, #16]
   d710a:	4798      	blx	r3
   d710c:	2800      	cmp	r0, #0
   d710e:	dc09      	bgt.n	d7124 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7110:	4b08      	ldr	r3, [pc, #32]	; (d7134 <serialEventRun+0x38>)
   d7112:	b163      	cbz	r3, d712e <serialEventRun+0x32>
   d7114:	f000 fc58 	bl	d79c8 <_Z22__fetch_global_Serial1v>
   d7118:	6803      	ldr	r3, [r0, #0]
   d711a:	691b      	ldr	r3, [r3, #16]
   d711c:	4798      	blx	r3
   d711e:	2800      	cmp	r0, #0
   d7120:	dc03      	bgt.n	d712a <serialEventRun+0x2e>
   d7122:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7124:	f3af 8000 	nop.w
   d7128:	e7f2      	b.n	d7110 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d712a:	f3af 8000 	nop.w
   d712e:	bd08      	pop	{r3, pc}
	...

000d7138 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7138:	b508      	push	{r3, lr}
	serialEventRun();
   d713a:	f7ff ffdf 	bl	d70fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d713e:	f7fe ffdd 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7142:	4b01      	ldr	r3, [pc, #4]	; (d7148 <_post_loop+0x10>)
   d7144:	6018      	str	r0, [r3, #0]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	2003e718 	.word	0x2003e718

000d714c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d714c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d714e:	2300      	movs	r3, #0
   d7150:	9300      	str	r3, [sp, #0]
   d7152:	461a      	mov	r2, r3
   d7154:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7158:	f7ff f992 	bl	d6480 <system_ctrl_set_result>
}
   d715c:	b003      	add	sp, #12
   d715e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7164 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7164:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7166:	8843      	ldrh	r3, [r0, #2]
   d7168:	2b0a      	cmp	r3, #10
   d716a:	d008      	beq.n	d717e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d716c:	2b50      	cmp	r3, #80	; 0x50
   d716e:	d109      	bne.n	d7184 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7170:	4b09      	ldr	r3, [pc, #36]	; (d7198 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7172:	681b      	ldr	r3, [r3, #0]
   d7174:	b13b      	cbz	r3, d7186 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7176:	b003      	add	sp, #12
   d7178:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d717c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d717e:	f7ff ffe5 	bl	d714c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7182:	e006      	b.n	d7192 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7184:	2300      	movs	r3, #0
   d7186:	9300      	str	r3, [sp, #0]
   d7188:	461a      	mov	r2, r3
   d718a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d718e:	f7ff f977 	bl	d6480 <system_ctrl_set_result>
        break;
    }
}
   d7192:	b003      	add	sp, #12
   d7194:	f85d fb04 	ldr.w	pc, [sp], #4
   d7198:	2003e38c 	.word	0x2003e38c

000d719c <module_user_init_hook>:

void module_user_init_hook()
{
   d719c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d719e:	f7fe ff8d 	bl	d60bc <HAL_RNG_GetRandomNumber>
   d71a2:	4604      	mov	r4, r0
    srand(seed);
   d71a4:	f002 f80a 	bl	d91bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d71a8:	4b07      	ldr	r3, [pc, #28]	; (d71c8 <module_user_init_hook+0x2c>)
   d71aa:	b113      	cbz	r3, d71b2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d71ac:	4620      	mov	r0, r4
   d71ae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d71b2:	2100      	movs	r1, #0
   d71b4:	4804      	ldr	r0, [pc, #16]	; (d71c8 <module_user_init_hook+0x2c>)
   d71b6:	f7ff f9e5 	bl	d6584 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d71ba:	2100      	movs	r1, #0
   d71bc:	4803      	ldr	r0, [pc, #12]	; (d71cc <module_user_init_hook+0x30>)
}
   d71be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d71c2:	f7ff b953 	b.w	d646c <system_ctrl_set_app_request_handler>
   d71c6:	bf00      	nop
   d71c8:	00000000 	.word	0x00000000
   d71cc:	000d7165 	.word	0x000d7165

000d71d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d71d0:	4770      	bx	lr

000d71d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d71d2:	2000      	movs	r0, #0
   d71d4:	4770      	bx	lr

000d71d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d71d6:	b510      	push	{r4, lr}
   d71d8:	4604      	mov	r4, r0
   d71da:	f7fc ff5e 	bl	d409a <_ZdlPv>
   d71de:	4620      	mov	r0, r4
   d71e0:	bd10      	pop	{r4, pc}

000d71e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d71e2:	b508      	push	{r3, lr}
      { delete this; }
   d71e4:	b108      	cbz	r0, d71ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d71e6:	f7ff fff6 	bl	d71d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d71ea:	bd08      	pop	{r3, pc}

000d71ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d71ec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d71ee:	68c4      	ldr	r4, [r0, #12]
   d71f0:	b1d4      	cbz	r4, d7228 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d71f2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d71f4:	2b02      	cmp	r3, #2
   d71f6:	d102      	bne.n	d71fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d71f8:	68e0      	ldr	r0, [r4, #12]
   d71fa:	f7ff f9d3 	bl	d65a4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d71fe:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7200:	b12d      	cbz	r5, d720e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7202:	4628      	mov	r0, r5
   d7204:	f7fc ff9b 	bl	d413e <_ZNSt14_Function_baseD1Ev>
   d7208:	4628      	mov	r0, r5
   d720a:	f7fc ff46 	bl	d409a <_ZdlPv>
   d720e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7210:	b12d      	cbz	r5, d721e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d7212:	4628      	mov	r0, r5
   d7214:	f7fc ff93 	bl	d413e <_ZNSt14_Function_baseD1Ev>
   d7218:	4628      	mov	r0, r5
   d721a:	f7fc ff3e 	bl	d409a <_ZdlPv>
   d721e:	4620      	mov	r0, r4
   d7220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7224:	f7fc bf39 	b.w	d409a <_ZdlPv>
   d7228:	bd38      	pop	{r3, r4, r5, pc}

000d722a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d722a:	b513      	push	{r0, r1, r4, lr}
   d722c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d722e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7232:	2300      	movs	r3, #0
   d7234:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7236:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7238:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d723a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d723c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d723e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7240:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7242:	f7fd f9f7 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7246:	4620      	mov	r0, r4
   d7248:	b002      	add	sp, #8
   d724a:	bd10      	pop	{r4, pc}

000d724c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d724c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d724e:	460c      	mov	r4, r1
   d7250:	ad02      	add	r5, sp, #8
   d7252:	f854 3b04 	ldr.w	r3, [r4], #4
   d7256:	f845 3d08 	str.w	r3, [r5, #-8]!
   d725a:	4606      	mov	r6, r0
   d725c:	460f      	mov	r7, r1
   d725e:	a801      	add	r0, sp, #4
   d7260:	4621      	mov	r1, r4
   d7262:	f7ff fe0c 	bl	d6e7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7266:	4629      	mov	r1, r5
   d7268:	4630      	mov	r0, r6
   d726a:	f7ff ffde 	bl	d722a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d726e:	a801      	add	r0, sp, #4
   d7270:	f7fd f9e0 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7274:	4620      	mov	r0, r4
   d7276:	f7fd f9dd 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d727a:	4638      	mov	r0, r7
   d727c:	f7fc ff0d 	bl	d409a <_ZdlPv>
        return p;
    }
   d7280:	4630      	mov	r0, r6
   d7282:	b003      	add	sp, #12
   d7284:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7286 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7286:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7288:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d728a:	b90a      	cbnz	r2, d7290 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d728c:	f000 fe8f 	bl	d7fae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7290:	68c3      	ldr	r3, [r0, #12]
    }
   d7292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7296:	4718      	bx	r3

000d7298 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7298:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d729a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d729c:	f100 0110 	add.w	r1, r0, #16
   d72a0:	f7ff fff1 	bl	d7286 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d72a4:	bd08      	pop	{r3, pc}

000d72a6 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72a6:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d72a8:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72aa:	b90a      	cbnz	r2, d72b0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d72ac:	f000 fe7f 	bl	d7fae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72b0:	68c3      	ldr	r3, [r0, #12]
    }
   d72b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72b6:	4718      	bx	r3

000d72b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d72b8:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d72ba:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d72bc:	f100 0110 	add.w	r1, r0, #16
   d72c0:	f7ff fff1 	bl	d72a6 <_ZNKSt8functionIFvRKbEEclES1_>
   d72c4:	bd08      	pop	{r3, pc}

000d72c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d72c6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d72c8:	2300      	movs	r3, #0
   d72ca:	6083      	str	r3, [r0, #8]
   d72cc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d72ce:	4604      	mov	r4, r0
   d72d0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d72d2:	b12b      	cbz	r3, d72e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d72d4:	2202      	movs	r2, #2
   d72d6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d72d8:	68eb      	ldr	r3, [r5, #12]
   d72da:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d72dc:	68ab      	ldr	r3, [r5, #8]
   d72de:	60a3      	str	r3, [r4, #8]
	}
    }
   d72e0:	4620      	mov	r0, r4
   d72e2:	bd38      	pop	{r3, r4, r5, pc}

000d72e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d72e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d72e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d72ec:	b086      	sub	sp, #24
   d72ee:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d72f0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d72f4:	808b      	strh	r3, [r1, #4]
   d72f6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d72f8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d72fa:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d72fe:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7300:	f04f 0002 	mov.w	r0, #2
   d7304:	e8d4 1f4f 	ldrexb	r1, [r4]
   d7308:	4299      	cmp	r1, r3
   d730a:	d103      	bne.n	d7314 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d730c:	e8c4 0f45 	strexb	r5, r0, [r4]
   d7310:	2d00      	cmp	r5, #0
   d7312:	d1f7      	bne.n	d7304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7314:	d002      	beq.n	d731c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d7316:	f88d 1000 	strb.w	r1, [sp]
   d731a:	e06a      	b.n	d73f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d731c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7320:	bf1e      	ittt	ne
   d7322:	60e7      	strne	r7, [r4, #12]
   d7324:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7326:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7328:	2301      	movs	r3, #1
   d732a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d732e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7330:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7332:	f104 0308 	add.w	r3, r4, #8
   d7336:	f3bf 8f5f 	dmb	sy
   d733a:	e853 6f00 	ldrex	r6, [r3]
   d733e:	e843 0200 	strex	r2, r0, [r3]
   d7342:	2a00      	cmp	r2, #0
   d7344:	d1f9      	bne.n	d733a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d7346:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d734a:	2e00      	cmp	r6, #0
   d734c:	d051      	beq.n	d73f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d734e:	f7ff f87d 	bl	d644c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7352:	b120      	cbz	r0, d735e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7354:	4629      	mov	r1, r5
   d7356:	4630      	mov	r0, r6
   d7358:	f7ff ff95 	bl	d7286 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d735c:	e043      	b.n	d73e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d735e:	4631      	mov	r1, r6
   d7360:	4668      	mov	r0, sp
   d7362:	f7ff ffb0 	bl	d72c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7366:	68e0      	ldr	r0, [r4, #12]
   d7368:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d736c:	b108      	cbz	r0, d7372 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d736e:	f001 ff5f 	bl	d9230 <strdup>
   d7372:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7374:	2010      	movs	r0, #16
   d7376:	f8ad 5014 	strh.w	r5, [sp, #20]
   d737a:	f7fc fe8c 	bl	d4096 <_Znwj>
   d737e:	4605      	mov	r5, r0
   d7380:	b330      	cbz	r0, d73d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7382:	f04f 0800 	mov.w	r8, #0
   d7386:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d738a:	2018      	movs	r0, #24
   d738c:	f7fc fe83 	bl	d4096 <_Znwj>
   d7390:	4604      	mov	r4, r0
   d7392:	b1c0      	cbz	r0, d73c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7394:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7398:	4601      	mov	r1, r0
   d739a:	4668      	mov	r0, sp
   d739c:	f7ff fdb4 	bl	d6f08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73a0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d73a2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d73a4:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73a6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d73a8:	9202      	str	r2, [sp, #8]
   d73aa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d73ac:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d73ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d73b2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d73b4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d73b8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d73bc:	9b04      	ldr	r3, [sp, #16]
   d73be:	9203      	str	r2, [sp, #12]
   d73c0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d73c2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d73c6:	4b0e      	ldr	r3, [pc, #56]	; (d7400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d73c8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d73ca:	4b0e      	ldr	r3, [pc, #56]	; (d7404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73cc:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d73ce:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d73d0:	9804      	ldr	r0, [sp, #16]
   d73d2:	f7ff f8e7 	bl	d65a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d73d6:	4668      	mov	r0, sp
   d73d8:	f7fc feb1 	bl	d413e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d73dc:	2200      	movs	r2, #0
   d73de:	4629      	mov	r1, r5
   d73e0:	4809      	ldr	r0, [pc, #36]	; (d7408 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d73e2:	f7ff f83b 	bl	d645c <application_thread_invoke>
   d73e6:	4630      	mov	r0, r6
   d73e8:	f7fc fea9 	bl	d413e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d73ec:	4630      	mov	r0, r6
   d73ee:	f7fc fe54 	bl	d409a <_ZdlPv>
   d73f2:	4638      	mov	r0, r7
   d73f4:	f7ff f8d6 	bl	d65a4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d73f8:	b006      	add	sp, #24
   d73fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73fe:	bf00      	nop
   d7400:	000d7299 	.word	0x000d7299
   d7404:	000d74f5 	.word	0x000d74f5
   d7408:	000d7a15 	.word	0x000d7a15

000d740c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7410:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7412:	ad07      	add	r5, sp, #28
   d7414:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7418:	4606      	mov	r6, r0
   d741a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d741c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d741e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7420:	460f      	mov	r7, r1
   d7422:	4690      	mov	r8, r2
   d7424:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7428:	f8c5 b004 	str.w	fp, [r5, #4]
   d742c:	f8c5 b008 	str.w	fp, [r5, #8]
   d7430:	9307      	str	r3, [sp, #28]
   d7432:	f7fc fe30 	bl	d4096 <_Znwj>
   d7436:	4604      	mov	r4, r0
   d7438:	b138      	cbz	r0, d744a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d743a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d743e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7442:	f8c0 b004 	str.w	fp, [r0, #4]
   d7446:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d744a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d744c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d744e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7450:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7452:	f7fc fe20 	bl	d4096 <_Znwj>
   d7456:	b128      	cbz	r0, d7464 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7458:	2301      	movs	r3, #1
   d745a:	6043      	str	r3, [r0, #4]
   d745c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d745e:	4b23      	ldr	r3, [pc, #140]	; (d74ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d7460:	6003      	str	r3, [r0, #0]
   d7462:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7464:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7466:	4b22      	ldr	r3, [pc, #136]	; (d74f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d7468:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d746a:	2008      	movs	r0, #8
   d746c:	f7fc fe13 	bl	d4096 <_Znwj>
   d7470:	4604      	mov	r4, r0
   d7472:	b128      	cbz	r0, d7480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7474:	9b03      	ldr	r3, [sp, #12]
   d7476:	f840 3b04 	str.w	r3, [r0], #4
   d747a:	a904      	add	r1, sp, #16
   d747c:	f7ff fcff 	bl	d6e7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7480:	9500      	str	r5, [sp, #0]
   d7482:	fa5f f38a 	uxtb.w	r3, sl
   d7486:	464a      	mov	r2, r9
   d7488:	4641      	mov	r1, r8
   d748a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d748c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d748e:	f7ff f869 	bl	d6564 <spark_send_event>
   d7492:	b9b8      	cbnz	r0, d74c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7494:	9b03      	ldr	r3, [sp, #12]
   d7496:	785b      	ldrb	r3, [r3, #1]
   d7498:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d749c:	b993      	cbnz	r3, d74c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d749e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d74a2:	a905      	add	r1, sp, #20
   d74a4:	a803      	add	r0, sp, #12
   d74a6:	9205      	str	r2, [sp, #20]
   d74a8:	f8ad 3018 	strh.w	r3, [sp, #24]
   d74ac:	f7ff ff1a 	bl	d72e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d74b0:	9805      	ldr	r0, [sp, #20]
   d74b2:	f7ff f877 	bl	d65a4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d74b6:	a805      	add	r0, sp, #20
   d74b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d74ba:	f7ff fec7 	bl	d724c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74be:	a806      	add	r0, sp, #24
   d74c0:	f7fd f8b8 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d74c4:	9b03      	ldr	r3, [sp, #12]
   d74c6:	9305      	str	r3, [sp, #20]
   d74c8:	a904      	add	r1, sp, #16
   d74ca:	a806      	add	r0, sp, #24
   d74cc:	f7ff fcd7 	bl	d6e7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d74d0:	a905      	add	r1, sp, #20
   d74d2:	4630      	mov	r0, r6
   d74d4:	f7ff fea9 	bl	d722a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74d8:	a806      	add	r0, sp, #24
   d74da:	f7fd f8ab 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74de:	a804      	add	r0, sp, #16
   d74e0:	f7fd f8a8 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d74e4:	4630      	mov	r0, r6
   d74e6:	b00b      	add	sp, #44	; 0x2c
   d74e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74ec:	000d9698 	.word	0x000d9698
   d74f0:	000d765d 	.word	0x000d765d

000d74f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d74f4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d74f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74f8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d74fa:	d006      	beq.n	d750a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d74fc:	2a03      	cmp	r2, #3
   d74fe:	d017      	beq.n	d7530 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7500:	2a01      	cmp	r2, #1
   d7502:	d120      	bne.n	d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7504:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7506:	6003      	str	r3, [r0, #0]
	      break;
   d7508:	e01d      	b.n	d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d750a:	2018      	movs	r0, #24
   d750c:	680e      	ldr	r6, [r1, #0]
   d750e:	f7fc fdc2 	bl	d4096 <_Znwj>
   d7512:	4605      	mov	r5, r0
   d7514:	b150      	cbz	r0, d752c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7516:	4631      	mov	r1, r6
   d7518:	f7ff fed5 	bl	d72c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d751c:	6930      	ldr	r0, [r6, #16]
   d751e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7522:	b108      	cbz	r0, d7528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7524:	f001 fe84 	bl	d9230 <strdup>
   d7528:	6128      	str	r0, [r5, #16]
   d752a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d752c:	6025      	str	r5, [r4, #0]
   d752e:	e00a      	b.n	d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7530:	6804      	ldr	r4, [r0, #0]
   d7532:	b144      	cbz	r4, d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7534:	6920      	ldr	r0, [r4, #16]
   d7536:	f7ff f835 	bl	d65a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d753a:	4620      	mov	r0, r4
   d753c:	f7fc fdff 	bl	d413e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7540:	4620      	mov	r0, r4
   d7542:	f7fc fdaa 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7546:	2000      	movs	r0, #0
   d7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d754a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d754a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d754c:	2300      	movs	r3, #0
   d754e:	6083      	str	r3, [r0, #8]
   d7550:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7552:	4604      	mov	r4, r0
   d7554:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7556:	b12b      	cbz	r3, d7564 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7558:	2202      	movs	r2, #2
   d755a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d755c:	68eb      	ldr	r3, [r5, #12]
   d755e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7560:	68ab      	ldr	r3, [r5, #8]
   d7562:	60a3      	str	r3, [r4, #8]
	}
    }
   d7564:	4620      	mov	r0, r4
   d7566:	bd38      	pop	{r3, r4, r5, pc}

000d7568 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7568:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d756a:	b570      	push	{r4, r5, r6, lr}
   d756c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d756e:	d006      	beq.n	d757e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7570:	2a03      	cmp	r2, #3
   d7572:	d011      	beq.n	d7598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7574:	2a01      	cmp	r2, #1
   d7576:	d117      	bne.n	d75a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7578:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d757a:	6003      	str	r3, [r0, #0]
	      break;
   d757c:	e014      	b.n	d75a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d757e:	2014      	movs	r0, #20
   d7580:	680e      	ldr	r6, [r1, #0]
   d7582:	f7fc fd88 	bl	d4096 <_Znwj>
   d7586:	4605      	mov	r5, r0
   d7588:	b120      	cbz	r0, d7594 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d758a:	4631      	mov	r1, r6
   d758c:	f7ff ffdd 	bl	d754a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7590:	7c33      	ldrb	r3, [r6, #16]
   d7592:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7594:	6025      	str	r5, [r4, #0]
   d7596:	e007      	b.n	d75a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7598:	6804      	ldr	r4, [r0, #0]
   d759a:	b12c      	cbz	r4, d75a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d759c:	4620      	mov	r0, r4
   d759e:	f7fc fdce 	bl	d413e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d75a2:	4620      	mov	r0, r4
   d75a4:	f7fc fd79 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d75a8:	2000      	movs	r0, #0
   d75aa:	bd70      	pop	{r4, r5, r6, pc}

000d75ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d75ac:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d75ae:	2300      	movs	r3, #0
   d75b0:	b087      	sub	sp, #28
   d75b2:	460c      	mov	r4, r1
   d75b4:	f3bf 8f5f 	dmb	sy
   d75b8:	e850 6f00 	ldrex	r6, [r0]
   d75bc:	e840 3200 	strex	r2, r3, [r0]
   d75c0:	2a00      	cmp	r2, #0
   d75c2:	d1f9      	bne.n	d75b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d75c4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d75c8:	2e00      	cmp	r6, #0
   d75ca:	d03e      	beq.n	d764a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d75cc:	4618      	mov	r0, r3
   d75ce:	f7fe ff3d 	bl	d644c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d75d2:	4607      	mov	r7, r0
   d75d4:	b120      	cbz	r0, d75e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75d6:	4621      	mov	r1, r4
   d75d8:	4630      	mov	r0, r6
   d75da:	f7ff fe64 	bl	d72a6 <_ZNKSt8functionIFvRKbEEclES1_>
   d75de:	e02e      	b.n	d763e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d75e0:	4631      	mov	r1, r6
   d75e2:	a801      	add	r0, sp, #4
   d75e4:	f7ff ffb1 	bl	d754a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d75e8:	7823      	ldrb	r3, [r4, #0]
   d75ea:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d75ee:	2010      	movs	r0, #16
   d75f0:	f7fc fd51 	bl	d4096 <_Znwj>
   d75f4:	4605      	mov	r5, r0
   d75f6:	b1d0      	cbz	r0, d762e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75f8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75fa:	2014      	movs	r0, #20
   d75fc:	f7fc fd4b 	bl	d4096 <_Znwj>
   d7600:	4604      	mov	r4, r0
   d7602:	b178      	cbz	r0, d7624 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7604:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7606:	4601      	mov	r1, r0
   d7608:	a801      	add	r0, sp, #4
   d760a:	f7ff fc7d 	bl	d6f08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d760e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7610:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7612:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7614:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7616:	9203      	str	r2, [sp, #12]
   d7618:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d761a:	60e3      	str	r3, [r4, #12]
   d761c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7620:	9204      	str	r2, [sp, #16]
   d7622:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7624:	4b0a      	ldr	r3, [pc, #40]	; (d7650 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7626:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7628:	4b0a      	ldr	r3, [pc, #40]	; (d7654 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d762a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d762c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d762e:	a801      	add	r0, sp, #4
   d7630:	f7fc fd85 	bl	d413e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7634:	2200      	movs	r2, #0
   d7636:	4629      	mov	r1, r5
   d7638:	4807      	ldr	r0, [pc, #28]	; (d7658 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d763a:	f7fe ff0f 	bl	d645c <application_thread_invoke>
   d763e:	4630      	mov	r0, r6
   d7640:	f7fc fd7d 	bl	d413e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7644:	4630      	mov	r0, r6
   d7646:	f7fc fd28 	bl	d409a <_ZdlPv>
        }
    }
   d764a:	b007      	add	sp, #28
   d764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d764e:	bf00      	nop
   d7650:	000d72b9 	.word	0x000d72b9
   d7654:	000d7569 	.word	0x000d7569
   d7658:	000d7a15 	.word	0x000d7a15

000d765c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d765c:	b530      	push	{r4, r5, lr}
   d765e:	b085      	sub	sp, #20
   d7660:	4604      	mov	r4, r0
   d7662:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7664:	4668      	mov	r0, sp
   d7666:	4611      	mov	r1, r2
   d7668:	f7ff fdf0 	bl	d724c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d766c:	b17c      	cbz	r4, d768e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d766e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7670:	4628      	mov	r0, r5
   d7672:	b10d      	cbz	r5, d7678 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7674:	f001 fddc 	bl	d9230 <strdup>
   d7678:	9002      	str	r0, [sp, #8]
   d767a:	a902      	add	r1, sp, #8
   d767c:	4668      	mov	r0, sp
   d767e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7682:	f7ff fe2f 	bl	d72e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7686:	9802      	ldr	r0, [sp, #8]
   d7688:	f7fe ff8c 	bl	d65a4 <free>
   d768c:	e01d      	b.n	d76ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d768e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7690:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7694:	f04f 0201 	mov.w	r2, #1
   d7698:	e8d0 3f4f 	ldrexb	r3, [r0]
   d769c:	42a3      	cmp	r3, r4
   d769e:	d103      	bne.n	d76a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d76a0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d76a4:	2900      	cmp	r1, #0
   d76a6:	d1f7      	bne.n	d7698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d76a8:	d002      	beq.n	d76b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d76aa:	f88d 3008 	strb.w	r3, [sp, #8]
   d76ae:	e00c      	b.n	d76ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d76b0:	f110 010c 	adds.w	r1, r0, #12
   d76b4:	f04f 0301 	mov.w	r3, #1
   d76b8:	bf18      	it	ne
   d76ba:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d76bc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d76c0:	3004      	adds	r0, #4
   d76c2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d76c6:	f7ff ff71 	bl	d75ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d76ca:	a801      	add	r0, sp, #4
   d76cc:	f7fc ffb2 	bl	d4634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d76d0:	b005      	add	sp, #20
   d76d2:	bd30      	pop	{r4, r5, pc}

000d76d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d76d4:	4770      	bx	lr

000d76d6 <_ZN9IPAddressD0Ev>:
   d76d6:	b510      	push	{r4, lr}
   d76d8:	4604      	mov	r4, r0
   d76da:	f7fc fcde 	bl	d409a <_ZdlPv>
   d76de:	4620      	mov	r0, r4
   d76e0:	bd10      	pop	{r4, pc}

000d76e2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d76e2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d76e4:	7d03      	ldrb	r3, [r0, #20]
   d76e6:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d76e8:	b08d      	sub	sp, #52	; 0x34
   d76ea:	460e      	mov	r6, r1
   d76ec:	f100 0704 	add.w	r7, r0, #4
   d76f0:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d76f4:	d002      	beq.n	d76fc <_ZNK9IPAddress7printToER5Print+0x1a>
   d76f6:	f100 0508 	add.w	r5, r0, #8
   d76fa:	e018      	b.n	d772e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d76fc:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d76fe:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7700:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7704:	232f      	movs	r3, #47	; 0x2f
   d7706:	462a      	mov	r2, r5
   d7708:	200a      	movs	r0, #10
   d770a:	f7fe fd67 	bl	d61dc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d770e:	4628      	mov	r0, r5
   d7710:	f001 fda9 	bl	d9266 <strlen>
   d7714:	6833      	ldr	r3, [r6, #0]
   d7716:	4602      	mov	r2, r0
   d7718:	68db      	ldr	r3, [r3, #12]
   d771a:	4629      	mov	r1, r5
   d771c:	4630      	mov	r0, r6
   d771e:	4798      	blx	r3
   d7720:	e00f      	b.n	d7742 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7722:	b124      	cbz	r4, d772e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7724:	212e      	movs	r1, #46	; 0x2e
   d7726:	4630      	mov	r0, r6
   d7728:	f7ff fa28 	bl	d6b7c <_ZN5Print5printEc>
   d772c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d772e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7732:	220a      	movs	r2, #10
   d7734:	4630      	mov	r0, r6
   d7736:	f7ff fa67 	bl	d6c08 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d773a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d773c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d773e:	d1f0      	bne.n	d7722 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7740:	4620      	mov	r0, r4
    }
    return n;
}
   d7742:	b00d      	add	sp, #52	; 0x34
   d7744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7748 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d7748:	b510      	push	{r4, lr}
   d774a:	4b05      	ldr	r3, [pc, #20]	; (d7760 <_ZN9IPAddressC1Ev+0x18>)
   d774c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d774e:	2211      	movs	r2, #17
   d7750:	f840 3b04 	str.w	r3, [r0], #4
   d7754:	2100      	movs	r1, #0
   d7756:	f001 fd28 	bl	d91aa <memset>
{
    clear();
}
   d775a:	4620      	mov	r0, r4
   d775c:	bd10      	pop	{r4, pc}
   d775e:	bf00      	nop
   d7760:	000d96b4 	.word	0x000d96b4

000d7764 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7764:	4603      	mov	r3, r0
   d7766:	4a07      	ldr	r2, [pc, #28]	; (d7784 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7768:	b510      	push	{r4, lr}
   d776a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d776e:	f101 0210 	add.w	r2, r1, #16
   d7772:	f851 4b04 	ldr.w	r4, [r1], #4
   d7776:	f843 4b04 	str.w	r4, [r3], #4
   d777a:	4291      	cmp	r1, r2
   d777c:	d1f9      	bne.n	d7772 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d777e:	780a      	ldrb	r2, [r1, #0]
   d7780:	701a      	strb	r2, [r3, #0]
}
   d7782:	bd10      	pop	{r4, pc}
   d7784:	000d96b4 	.word	0x000d96b4

000d7788 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7788:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d778a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d778e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7792:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7796:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d779a:	2304      	movs	r3, #4
   d779c:	6041      	str	r1, [r0, #4]
   d779e:	7503      	strb	r3, [r0, #20]
   d77a0:	bd10      	pop	{r4, pc}

000d77a2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d77a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d77a4:	780d      	ldrb	r5, [r1, #0]
   d77a6:	788b      	ldrb	r3, [r1, #2]
   d77a8:	784a      	ldrb	r2, [r1, #1]
   d77aa:	78c9      	ldrb	r1, [r1, #3]
   d77ac:	9100      	str	r1, [sp, #0]
   d77ae:	4629      	mov	r1, r5
   d77b0:	f7ff ffea 	bl	d7788 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d77b4:	b003      	add	sp, #12
   d77b6:	bd30      	pop	{r4, r5, pc}

000d77b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d77b8:	7441      	strb	r1, [r0, #17]
   d77ba:	4770      	bx	lr

000d77bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d77bc:	4770      	bx	lr

000d77be <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d77be:	2100      	movs	r1, #0
   d77c0:	7c00      	ldrb	r0, [r0, #16]
   d77c2:	f7fe bddb 	b.w	d637c <HAL_USB_USART_Receive_Data>

000d77c6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d77c6:	2101      	movs	r1, #1
   d77c8:	7c00      	ldrb	r0, [r0, #16]
   d77ca:	f7fe bdd7 	b.w	d637c <HAL_USB_USART_Receive_Data>

000d77ce <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d77ce:	7c00      	ldrb	r0, [r0, #16]
   d77d0:	f7fe bdcc 	b.w	d636c <HAL_USB_USART_Available_Data_For_Write>

000d77d4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d77d4:	7c00      	ldrb	r0, [r0, #16]
   d77d6:	f7fe bdc1 	b.w	d635c <HAL_USB_USART_Available_Data>

000d77da <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d77da:	b538      	push	{r3, r4, r5, lr}
   d77dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77de:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d77e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d77e2:	f7fe fdc3 	bl	d636c <HAL_USB_USART_Available_Data_For_Write>
   d77e6:	2800      	cmp	r0, #0
   d77e8:	dc01      	bgt.n	d77ee <_ZN9USBSerial5writeEh+0x14>
   d77ea:	7c60      	ldrb	r0, [r4, #17]
   d77ec:	b120      	cbz	r0, d77f8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d77ee:	4629      	mov	r1, r5
   d77f0:	7c20      	ldrb	r0, [r4, #16]
   d77f2:	f7fe fdcb 	bl	d638c <HAL_USB_USART_Send_Data>
    return 1;
   d77f6:	2001      	movs	r0, #1
  }
  return 0;
}
   d77f8:	bd38      	pop	{r3, r4, r5, pc}

000d77fa <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d77fa:	7c00      	ldrb	r0, [r0, #16]
   d77fc:	f7fe bdce 	b.w	d639c <HAL_USB_USART_Flush_Data>

000d7800 <_ZN9USBSerialD0Ev>:
   d7800:	b510      	push	{r4, lr}
   d7802:	4604      	mov	r4, r0
   d7804:	f7fc fc49 	bl	d409a <_ZdlPv>
   d7808:	4620      	mov	r0, r4
   d780a:	bd10      	pop	{r4, pc}

000d780c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d780c:	b510      	push	{r4, lr}
   d780e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7810:	2300      	movs	r3, #0
   d7812:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7818:	60a3      	str	r3, [r4, #8]
   d781a:	4b05      	ldr	r3, [pc, #20]	; (d7830 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d781c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d781e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7820:	4608      	mov	r0, r1
{
  _serial = serial;
   d7822:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7824:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7826:	4611      	mov	r1, r2
   d7828:	f7fe fd88 	bl	d633c <HAL_USB_USART_Init>
}
   d782c:	4620      	mov	r0, r4
   d782e:	bd10      	pop	{r4, pc}
   d7830:	000d96c8 	.word	0x000d96c8

000d7834 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7834:	2200      	movs	r2, #0
   d7836:	7c00      	ldrb	r0, [r0, #16]
   d7838:	f7fe bd88 	b.w	d634c <HAL_USB_USART_Begin>

000d783c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d783c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d783e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7840:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7842:	2100      	movs	r1, #0
   d7844:	f001 fcb1 	bl	d91aa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7848:	4620      	mov	r0, r4
   d784a:	bd10      	pop	{r4, pc}

000d784c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d784c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d784e:	4d0e      	ldr	r5, [pc, #56]	; (d7888 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7850:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7852:	a801      	add	r0, sp, #4
   d7854:	f7ff fff2 	bl	d783c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7858:	6829      	ldr	r1, [r5, #0]
   d785a:	f011 0401 	ands.w	r4, r1, #1
   d785e:	d110      	bne.n	d7882 <_Z16_fetch_usbserialv+0x36>
   d7860:	4628      	mov	r0, r5
   d7862:	f7fc fc1e 	bl	d40a2 <__cxa_guard_acquire>
   d7866:	b160      	cbz	r0, d7882 <_Z16_fetch_usbserialv+0x36>
   d7868:	aa01      	add	r2, sp, #4
   d786a:	4621      	mov	r1, r4
   d786c:	4807      	ldr	r0, [pc, #28]	; (d788c <_Z16_fetch_usbserialv+0x40>)
   d786e:	f7ff ffcd 	bl	d780c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7872:	4628      	mov	r0, r5
   d7874:	f7fc fc1a 	bl	d40ac <__cxa_guard_release>
   d7878:	4a05      	ldr	r2, [pc, #20]	; (d7890 <_Z16_fetch_usbserialv+0x44>)
   d787a:	4906      	ldr	r1, [pc, #24]	; (d7894 <_Z16_fetch_usbserialv+0x48>)
   d787c:	4803      	ldr	r0, [pc, #12]	; (d788c <_Z16_fetch_usbserialv+0x40>)
   d787e:	f000 fb91 	bl	d7fa4 <__aeabi_atexit>
	return _usbserial;
}
   d7882:	4802      	ldr	r0, [pc, #8]	; (d788c <_Z16_fetch_usbserialv+0x40>)
   d7884:	b007      	add	sp, #28
   d7886:	bd30      	pop	{r4, r5, pc}
   d7888:	2003e390 	.word	0x2003e390
   d788c:	2003e394 	.word	0x2003e394
   d7890:	2003e0d0 	.word	0x2003e0d0
   d7894:	000d77bd 	.word	0x000d77bd

000d7898 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7898:	2200      	movs	r2, #0
   d789a:	4611      	mov	r1, r2
   d789c:	6840      	ldr	r0, [r0, #4]
   d789e:	f7fe be11 	b.w	d64c4 <network_ready>

000d78a2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d78a2:	2200      	movs	r2, #0
   d78a4:	4611      	mov	r1, r2
   d78a6:	6840      	ldr	r0, [r0, #4]
   d78a8:	f7fe be2c 	b.w	d6504 <network_listening>

000d78ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d78ac:	2200      	movs	r2, #0
   d78ae:	4611      	mov	r1, r2
   d78b0:	6840      	ldr	r0, [r0, #4]
   d78b2:	f7fe be37 	b.w	d6524 <network_get_listen_timeout>

000d78b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d78b6:	2200      	movs	r2, #0
   d78b8:	6840      	ldr	r0, [r0, #4]
   d78ba:	f7fe be2b 	b.w	d6514 <network_set_listen_timeout>

000d78be <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d78be:	2200      	movs	r2, #0
   d78c0:	f081 0101 	eor.w	r1, r1, #1
   d78c4:	6840      	ldr	r0, [r0, #4]
   d78c6:	f7fe be15 	b.w	d64f4 <network_listen>

000d78ca <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d78ca:	2300      	movs	r3, #0
   d78cc:	461a      	mov	r2, r3
   d78ce:	4619      	mov	r1, r3
   d78d0:	6840      	ldr	r0, [r0, #4]
   d78d2:	f7fe be07 	b.w	d64e4 <network_off>

000d78d6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d78d6:	2300      	movs	r3, #0
   d78d8:	461a      	mov	r2, r3
   d78da:	4619      	mov	r1, r3
   d78dc:	6840      	ldr	r0, [r0, #4]
   d78de:	f7fe bdf9 	b.w	d64d4 <network_on>

000d78e2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d78e2:	2200      	movs	r2, #0
   d78e4:	4611      	mov	r1, r2
   d78e6:	6840      	ldr	r0, [r0, #4]
   d78e8:	f7fe bddc 	b.w	d64a4 <network_connecting>

000d78ec <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d78ec:	2200      	movs	r2, #0
   d78ee:	2102      	movs	r1, #2
   d78f0:	6840      	ldr	r0, [r0, #4]
   d78f2:	f7fe bddf 	b.w	d64b4 <network_disconnect>

000d78f6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d78f6:	2300      	movs	r3, #0
   d78f8:	461a      	mov	r2, r3
   d78fa:	6840      	ldr	r0, [r0, #4]
   d78fc:	f7fe bdca 	b.w	d6494 <network_connect>

000d7900 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7900:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7902:	4d0c      	ldr	r5, [pc, #48]	; (d7934 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d7904:	2428      	movs	r4, #40	; 0x28
   d7906:	4622      	mov	r2, r4
   d7908:	2100      	movs	r1, #0
   d790a:	4628      	mov	r0, r5
   d790c:	f001 fc4d 	bl	d91aa <memset>
        cid = -1;
   d7910:	f04f 33ff 	mov.w	r3, #4294967295
   d7914:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d7916:	802c      	strh	r4, [r5, #0]
   d7918:	4d07      	ldr	r5, [pc, #28]	; (d7938 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d791a:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d791c:	4628      	mov	r0, r5
   d791e:	606b      	str	r3, [r5, #4]
   d7920:	4b06      	ldr	r3, [pc, #24]	; (d793c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d7922:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d7926:	4622      	mov	r2, r4
   d7928:	2100      	movs	r1, #0
   d792a:	f001 fc3e 	bl	d91aa <memset>
        size = sizeof(*this);
   d792e:	812c      	strh	r4, [r5, #8]
   d7930:	bd38      	pop	{r3, r4, r5, pc}
   d7932:	bf00      	nop
   d7934:	2003e3d8 	.word	0x2003e3d8
   d7938:	2003e3a8 	.word	0x2003e3a8
   d793c:	000d96f8 	.word	0x000d96f8

000d7940 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7940:	4770      	bx	lr

000d7942 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7942:	7441      	strb	r1, [r0, #17]
   d7944:	4770      	bx	lr

000d7946 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d7946:	7c00      	ldrb	r0, [r0, #16]
   d7948:	f7fe bc88 	b.w	d625c <HAL_USART_Available_Data_For_Write>

000d794c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d794c:	7c00      	ldrb	r0, [r0, #16]
   d794e:	f7fe bc5d 	b.w	d620c <HAL_USART_Available_Data>

000d7952 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d7952:	7c00      	ldrb	r0, [r0, #16]
   d7954:	f7fe bc6a 	b.w	d622c <HAL_USART_Peek_Data>

000d7958 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d7958:	7c00      	ldrb	r0, [r0, #16]
   d795a:	f7fe bc5f 	b.w	d621c <HAL_USART_Read_Data>

000d795e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d795e:	7c00      	ldrb	r0, [r0, #16]
   d7960:	f7fe bc6c 	b.w	d623c <HAL_USART_Flush_Data>

000d7964 <_ZN11USARTSerialD0Ev>:
   d7964:	b510      	push	{r4, lr}
   d7966:	4604      	mov	r4, r0
   d7968:	f7fc fb97 	bl	d409a <_ZdlPv>
   d796c:	4620      	mov	r0, r4
   d796e:	bd10      	pop	{r4, pc}

000d7970 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7970:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7972:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7974:	4604      	mov	r4, r0
   d7976:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7978:	b925      	cbnz	r5, d7984 <_ZN11USARTSerial5writeEh+0x14>
   d797a:	7c00      	ldrb	r0, [r0, #16]
   d797c:	f7fe fc6e 	bl	d625c <HAL_USART_Available_Data_For_Write>
   d7980:	2800      	cmp	r0, #0
   d7982:	dd05      	ble.n	d7990 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7984:	4631      	mov	r1, r6
   d7986:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d798c:	f7fe bc36 	b.w	d61fc <HAL_USART_Write_Data>
  }
  return 0;
}
   d7990:	4628      	mov	r0, r5
   d7992:	bd70      	pop	{r4, r5, r6, pc}

000d7994 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7994:	b510      	push	{r4, lr}
   d7996:	4604      	mov	r4, r0
   d7998:	4608      	mov	r0, r1
   d799a:	4611      	mov	r1, r2
   d799c:	2200      	movs	r2, #0
   d799e:	6062      	str	r2, [r4, #4]
   d79a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d79a4:	60a2      	str	r2, [r4, #8]
   d79a6:	4a05      	ldr	r2, [pc, #20]	; (d79bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d79a8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d79aa:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d79ac:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d79ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d79b0:	461a      	mov	r2, r3
   d79b2:	f7fe fc1b 	bl	d61ec <HAL_USART_Init>
}
   d79b6:	4620      	mov	r0, r4
   d79b8:	bd10      	pop	{r4, pc}
   d79ba:	bf00      	nop
   d79bc:	000d972c 	.word	0x000d972c

000d79c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d79c0:	7c00      	ldrb	r0, [r0, #16]
   d79c2:	f7fe bc43 	b.w	d624c <HAL_USART_Is_Enabled>
	...

000d79c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d79c8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d79ca:	4d0c      	ldr	r5, [pc, #48]	; (d79fc <_Z22__fetch_global_Serial1v+0x34>)
   d79cc:	6829      	ldr	r1, [r5, #0]
   d79ce:	f011 0401 	ands.w	r4, r1, #1
   d79d2:	d111      	bne.n	d79f8 <_Z22__fetch_global_Serial1v+0x30>
   d79d4:	4628      	mov	r0, r5
   d79d6:	f7fc fb64 	bl	d40a2 <__cxa_guard_acquire>
   d79da:	b168      	cbz	r0, d79f8 <_Z22__fetch_global_Serial1v+0x30>
   d79dc:	4a08      	ldr	r2, [pc, #32]	; (d7a00 <_Z22__fetch_global_Serial1v+0x38>)
   d79de:	4b09      	ldr	r3, [pc, #36]	; (d7a04 <_Z22__fetch_global_Serial1v+0x3c>)
   d79e0:	4809      	ldr	r0, [pc, #36]	; (d7a08 <_Z22__fetch_global_Serial1v+0x40>)
   d79e2:	4621      	mov	r1, r4
   d79e4:	f7ff ffd6 	bl	d7994 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d79e8:	4628      	mov	r0, r5
   d79ea:	f7fc fb5f 	bl	d40ac <__cxa_guard_release>
   d79ee:	4a07      	ldr	r2, [pc, #28]	; (d7a0c <_Z22__fetch_global_Serial1v+0x44>)
   d79f0:	4907      	ldr	r1, [pc, #28]	; (d7a10 <_Z22__fetch_global_Serial1v+0x48>)
   d79f2:	4805      	ldr	r0, [pc, #20]	; (d7a08 <_Z22__fetch_global_Serial1v+0x40>)
   d79f4:	f000 fad6 	bl	d7fa4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d79f8:	4803      	ldr	r0, [pc, #12]	; (d7a08 <_Z22__fetch_global_Serial1v+0x40>)
   d79fa:	bd38      	pop	{r3, r4, r5, pc}
   d79fc:	2003e498 	.word	0x2003e498
   d7a00:	2003e49c 	.word	0x2003e49c
   d7a04:	2003e414 	.word	0x2003e414
   d7a08:	2003e400 	.word	0x2003e400
   d7a0c:	2003e0d0 	.word	0x2003e0d0
   d7a10:	000d7941 	.word	0x000d7941

000d7a14 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7a14:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7a16:	6883      	ldr	r3, [r0, #8]
   d7a18:	4604      	mov	r4, r0
   d7a1a:	b90b      	cbnz	r3, d7a20 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7a1c:	f000 fac7 	bl	d7fae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a20:	68c3      	ldr	r3, [r0, #12]
   d7a22:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7a24:	68a3      	ldr	r3, [r4, #8]
   d7a26:	b11b      	cbz	r3, d7a30 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7a28:	2203      	movs	r2, #3
   d7a2a:	4621      	mov	r1, r4
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7a30:	4620      	mov	r0, r4
}
   d7a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7a36:	f7fc bb30 	b.w	d409a <_ZdlPv>

000d7a3a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7a3a:	4770      	bx	lr

000d7a3c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a3e:	4606      	mov	r6, r0
   d7a40:	4615      	mov	r5, r2
   d7a42:	460c      	mov	r4, r1
   d7a44:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a46:	42bc      	cmp	r4, r7
   d7a48:	d006      	beq.n	d7a58 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a4a:	6833      	ldr	r3, [r6, #0]
   d7a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a50:	689b      	ldr	r3, [r3, #8]
   d7a52:	4630      	mov	r0, r6
   d7a54:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a56:	e7f6      	b.n	d7a46 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7a58:	4628      	mov	r0, r5
   d7a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a5c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7a5c:	2200      	movs	r2, #0
   d7a5e:	7c00      	ldrb	r0, [r0, #16]
   d7a60:	f7fe bc24 	b.w	d62ac <HAL_I2C_Write_Data>

000d7a64 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7a64:	2100      	movs	r1, #0
   d7a66:	7c00      	ldrb	r0, [r0, #16]
   d7a68:	f7fe bc28 	b.w	d62bc <HAL_I2C_Available_Data>

000d7a6c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7a6c:	2100      	movs	r1, #0
   d7a6e:	7c00      	ldrb	r0, [r0, #16]
   d7a70:	f7fe bc2c 	b.w	d62cc <HAL_I2C_Read_Data>

000d7a74 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7a74:	2100      	movs	r1, #0
   d7a76:	7c00      	ldrb	r0, [r0, #16]
   d7a78:	f7fe bc30 	b.w	d62dc <HAL_I2C_Peek_Data>

000d7a7c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7a7c:	2100      	movs	r1, #0
   d7a7e:	7c00      	ldrb	r0, [r0, #16]
   d7a80:	f7fe bc34 	b.w	d62ec <HAL_I2C_Flush_Data>

000d7a84 <_ZN7TwoWireD0Ev>:
   d7a84:	b510      	push	{r4, lr}
   d7a86:	4604      	mov	r4, r0
   d7a88:	f7fc fb07 	bl	d409a <_ZdlPv>
   d7a8c:	4620      	mov	r0, r4
   d7a8e:	bd10      	pop	{r4, pc}

000d7a90 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7a90:	b510      	push	{r4, lr}
   d7a92:	4604      	mov	r4, r0
   d7a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a98:	4608      	mov	r0, r1
   d7a9a:	60a3      	str	r3, [r4, #8]
   d7a9c:	2100      	movs	r1, #0
   d7a9e:	4b04      	ldr	r3, [pc, #16]	; (d7ab0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7aa0:	7420      	strb	r0, [r4, #16]
   d7aa2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7aa4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7aa6:	f7fe fc31 	bl	d630c <HAL_I2C_Init>

}
   d7aaa:	4620      	mov	r0, r4
   d7aac:	bd10      	pop	{r4, pc}
   d7aae:	bf00      	nop
   d7ab0:	000d975c 	.word	0x000d975c

000d7ab4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7ab4:	2300      	movs	r3, #0
   d7ab6:	461a      	mov	r2, r3
   d7ab8:	4619      	mov	r1, r3
   d7aba:	7c00      	ldrb	r0, [r0, #16]
   d7abc:	f7fe bbd6 	b.w	d626c <HAL_I2C_Begin>

000d7ac0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7ac0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7ac2:	2400      	movs	r4, #0
   d7ac4:	7c00      	ldrb	r0, [r0, #16]
   d7ac6:	9400      	str	r4, [sp, #0]
   d7ac8:	f7fe fbd8 	bl	d627c <HAL_I2C_Request_Data>
  return result;
}
   d7acc:	b2c0      	uxtb	r0, r0
   d7ace:	b002      	add	sp, #8
   d7ad0:	bd10      	pop	{r4, pc}

000d7ad2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7ad2:	2301      	movs	r3, #1
   d7ad4:	f7ff bff4 	b.w	d7ac0 <_ZN7TwoWire11requestFromEhhh>

000d7ad8 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7ad8:	2301      	movs	r3, #1
   d7ada:	b2d2      	uxtb	r2, r2
   d7adc:	b2c9      	uxtb	r1, r1
   d7ade:	f7ff bfef 	b.w	d7ac0 <_ZN7TwoWire11requestFromEhhh>

000d7ae2 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d7ae2:	b2db      	uxtb	r3, r3
   d7ae4:	b2d2      	uxtb	r2, r2
   d7ae6:	b2c9      	uxtb	r1, r1
   d7ae8:	f7ff bfea 	b.w	d7ac0 <_ZN7TwoWire11requestFromEhhh>

000d7aec <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7aec:	2200      	movs	r2, #0
   d7aee:	7c00      	ldrb	r0, [r0, #16]
   d7af0:	f7fe bbcc 	b.w	d628c <HAL_I2C_Begin_Transmission>

000d7af4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7af4:	b2c9      	uxtb	r1, r1
   d7af6:	f7ff bff9 	b.w	d7aec <_ZN7TwoWire17beginTransmissionEh>

000d7afa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7afa:	2200      	movs	r2, #0
   d7afc:	7c00      	ldrb	r0, [r0, #16]
   d7afe:	f7fe bbcd 	b.w	d629c <HAL_I2C_End_Transmission>

000d7b02 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7b02:	2101      	movs	r1, #1
   d7b04:	f7ff bff9 	b.w	d7afa <_ZN7TwoWire15endTransmissionEh>

000d7b08 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7b08:	2100      	movs	r1, #0
   d7b0a:	7c00      	ldrb	r0, [r0, #16]
   d7b0c:	f7fe bbf6 	b.w	d62fc <HAL_I2C_Is_Enabled>

000d7b10 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7b10:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d7b12:	2100      	movs	r1, #0
   d7b14:	7c00      	ldrb	r0, [r0, #16]
   d7b16:	f7fe fc01 	bl	d631c <HAL_I2C_Acquire>
}
   d7b1a:	fab0 f080 	clz	r0, r0
   d7b1e:	0940      	lsrs	r0, r0, #5
   d7b20:	bd08      	pop	{r3, pc}

000d7b22 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7b22:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d7b24:	2100      	movs	r1, #0
   d7b26:	7c00      	ldrb	r0, [r0, #16]
   d7b28:	f7fe fc00 	bl	d632c <HAL_I2C_Release>
}
   d7b2c:	fab0 f080 	clz	r0, r0
   d7b30:	0940      	lsrs	r0, r0, #5
   d7b32:	bd08      	pop	{r3, pc}

000d7b34 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7b34:	2200      	movs	r2, #0
   d7b36:	4611      	mov	r1, r2
   d7b38:	6840      	ldr	r0, [r0, #4]
   d7b3a:	f7fe bce3 	b.w	d6504 <network_listening>

000d7b3e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7b3e:	2200      	movs	r2, #0
   d7b40:	4611      	mov	r1, r2
   d7b42:	6840      	ldr	r0, [r0, #4]
   d7b44:	f7fe bcee 	b.w	d6524 <network_get_listen_timeout>

000d7b48 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7b48:	2200      	movs	r2, #0
   d7b4a:	6840      	ldr	r0, [r0, #4]
   d7b4c:	f7fe bce2 	b.w	d6514 <network_set_listen_timeout>

000d7b50 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7b50:	2200      	movs	r2, #0
   d7b52:	f081 0101 	eor.w	r1, r1, #1
   d7b56:	6840      	ldr	r0, [r0, #4]
   d7b58:	f7fe bccc 	b.w	d64f4 <network_listen>

000d7b5c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7b5c:	2300      	movs	r3, #0
   d7b5e:	461a      	mov	r2, r3
   d7b60:	4619      	mov	r1, r3
   d7b62:	6840      	ldr	r0, [r0, #4]
   d7b64:	f7fe bcbe 	b.w	d64e4 <network_off>

000d7b68 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7b68:	2300      	movs	r3, #0
   d7b6a:	461a      	mov	r2, r3
   d7b6c:	4619      	mov	r1, r3
   d7b6e:	6840      	ldr	r0, [r0, #4]
   d7b70:	f7fe bcb0 	b.w	d64d4 <network_on>

000d7b74 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7b74:	2200      	movs	r2, #0
   d7b76:	4611      	mov	r1, r2
   d7b78:	6840      	ldr	r0, [r0, #4]
   d7b7a:	f7fe bca3 	b.w	d64c4 <network_ready>

000d7b7e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7b7e:	2200      	movs	r2, #0
   d7b80:	4611      	mov	r1, r2
   d7b82:	6840      	ldr	r0, [r0, #4]
   d7b84:	f7fe bc8e 	b.w	d64a4 <network_connecting>

000d7b88 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7b88:	2200      	movs	r2, #0
   d7b8a:	2102      	movs	r1, #2
   d7b8c:	6840      	ldr	r0, [r0, #4]
   d7b8e:	f7fe bc91 	b.w	d64b4 <network_disconnect>

000d7b92 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7b92:	2300      	movs	r3, #0
   d7b94:	461a      	mov	r2, r3
   d7b96:	6840      	ldr	r0, [r0, #4]
   d7b98:	f7fe bc7c 	b.w	d6494 <network_connect>

000d7b9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b9c:	b110      	cbz	r0, d7ba4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d7b9e:	6803      	ldr	r3, [r0, #0]
   d7ba0:	685b      	ldr	r3, [r3, #4]
   d7ba2:	4718      	bx	r3
   d7ba4:	4770      	bx	lr

000d7ba6 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d7ba6:	b538      	push	{r3, r4, r5, lr}
   d7ba8:	4604      	mov	r4, r0
   d7baa:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d7bac:	b1d0      	cbz	r0, d7be4 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d7bae:	f7fe fad5 	bl	d615c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d7bb2:	b9b8      	cbnz	r0, d7be4 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d7bb4:	7c23      	ldrb	r3, [r4, #16]
   d7bb6:	b91b      	cbnz	r3, d7bc0 <_ZN6Thread7disposeEv+0x1a>
   d7bb8:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d7bba:	b108      	cbz	r0, d7bc0 <_ZN6Thread7disposeEv+0x1a>
   d7bbc:	f7fe fad6 	bl	d616c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d7bc0:	6865      	ldr	r5, [r4, #4]
   d7bc2:	b155      	cbz	r5, d7bda <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7bc4:	68ab      	ldr	r3, [r5, #8]
   d7bc6:	b11b      	cbz	r3, d7bd0 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7bc8:	2203      	movs	r2, #3
   d7bca:	4629      	mov	r1, r5
   d7bcc:	4628      	mov	r0, r5
   d7bce:	4798      	blx	r3
            delete wrapper;
   d7bd0:	4628      	mov	r0, r5
   d7bd2:	f7fc fa62 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d7bd6:	2300      	movs	r3, #0
   d7bd8:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d7bda:	6820      	ldr	r0, [r4, #0]
   d7bdc:	f7fe face 	bl	d617c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d7be0:	2300      	movs	r3, #0
   d7be2:	6023      	str	r3, [r4, #0]
   d7be4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7be8 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7be8:	b538      	push	{r3, r4, r5, lr}
   d7bea:	4b0b      	ldr	r3, [pc, #44]	; (d7c18 <_ZN5spark9MeshClassD1Ev+0x30>)
   d7bec:	6003      	str	r3, [r0, #0]
   d7bee:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7bf0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7bf4:	b108      	cbz	r0, d7bfa <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7bf6:	f7fc fa52 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7bfa:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7bfe:	b12d      	cbz	r5, d7c0c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d7c00:	4628      	mov	r0, r5
   d7c02:	f7ff ffd0 	bl	d7ba6 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c06:	4628      	mov	r0, r5
   d7c08:	f7fc fa47 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7c0c:	68a0      	ldr	r0, [r4, #8]
   d7c0e:	b108      	cbz	r0, d7c14 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d7c10:	f7ff ffc4 	bl	d7b9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d7c14:	4620      	mov	r0, r4
   d7c16:	bd38      	pop	{r3, r4, r5, pc}
   d7c18:	000d9784 	.word	0x000d9784

000d7c1c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7c1c:	b538      	push	{r3, r4, r5, lr}
   d7c1e:	4c0d      	ldr	r4, [pc, #52]	; (d7c54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7c20:	4b0d      	ldr	r3, [pc, #52]	; (d7c58 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d7c22:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7c24:	2500      	movs	r5, #0
   d7c26:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7c28:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7c2c:	6063      	str	r3, [r4, #4]
   d7c2e:	60a5      	str	r5, [r4, #8]
   d7c30:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c34:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7c38:	f7fe fac0 	bl	d61bc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7c3c:	4b07      	ldr	r3, [pc, #28]	; (d7c5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d7c3e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d7c42:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7c44:	4620      	mov	r0, r4
   d7c46:	4a06      	ldr	r2, [pc, #24]	; (d7c60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7c48:	4906      	ldr	r1, [pc, #24]	; (d7c64 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d7c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7c4e:	f000 b9a9 	b.w	d7fa4 <__aeabi_atexit>
   d7c52:	bf00      	nop
   d7c54:	2003e520 	.word	0x2003e520
   d7c58:	000d97b8 	.word	0x000d97b8
   d7c5c:	000d9784 	.word	0x000d9784
   d7c60:	2003e0d0 	.word	0x2003e0d0
   d7c64:	000d7be9 	.word	0x000d7be9

000d7c68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c68:	2300      	movs	r3, #0
   d7c6a:	461a      	mov	r2, r3
   d7c6c:	6840      	ldr	r0, [r0, #4]
   d7c6e:	f7fe bc11 	b.w	d6494 <network_connect>

000d7c72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7c72:	2200      	movs	r2, #0
   d7c74:	2102      	movs	r1, #2
   d7c76:	6840      	ldr	r0, [r0, #4]
   d7c78:	f7fe bc1c 	b.w	d64b4 <network_disconnect>

000d7c7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7c7c:	2200      	movs	r2, #0
   d7c7e:	4611      	mov	r1, r2
   d7c80:	6840      	ldr	r0, [r0, #4]
   d7c82:	f7fe bc0f 	b.w	d64a4 <network_connecting>

000d7c86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7c86:	2200      	movs	r2, #0
   d7c88:	4611      	mov	r1, r2
   d7c8a:	6840      	ldr	r0, [r0, #4]
   d7c8c:	f7fe bc1a 	b.w	d64c4 <network_ready>

000d7c90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7c90:	2300      	movs	r3, #0
   d7c92:	461a      	mov	r2, r3
   d7c94:	4619      	mov	r1, r3
   d7c96:	6840      	ldr	r0, [r0, #4]
   d7c98:	f7fe bc1c 	b.w	d64d4 <network_on>

000d7c9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7c9c:	2300      	movs	r3, #0
   d7c9e:	461a      	mov	r2, r3
   d7ca0:	4619      	mov	r1, r3
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	f7fe bc1e 	b.w	d64e4 <network_off>

000d7ca8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ca8:	2200      	movs	r2, #0
   d7caa:	f081 0101 	eor.w	r1, r1, #1
   d7cae:	6840      	ldr	r0, [r0, #4]
   d7cb0:	f7fe bc20 	b.w	d64f4 <network_listen>

000d7cb4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7cb4:	2200      	movs	r2, #0
   d7cb6:	6840      	ldr	r0, [r0, #4]
   d7cb8:	f7fe bc2c 	b.w	d6514 <network_set_listen_timeout>

000d7cbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7cbc:	2200      	movs	r2, #0
   d7cbe:	4611      	mov	r1, r2
   d7cc0:	6840      	ldr	r0, [r0, #4]
   d7cc2:	f7fe bc2f 	b.w	d6524 <network_get_listen_timeout>

000d7cc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7cc6:	2200      	movs	r2, #0
   d7cc8:	4611      	mov	r1, r2
   d7cca:	6840      	ldr	r0, [r0, #4]
   d7ccc:	f7fe bc1a 	b.w	d6504 <network_listening>

000d7cd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7cd0:	b570      	push	{r4, r5, r6, lr}
   d7cd2:	b08c      	sub	sp, #48	; 0x30
   d7cd4:	4614      	mov	r4, r2
   d7cd6:	4606      	mov	r6, r0
    IPAddress addr;
   d7cd8:	f7ff fd36 	bl	d7748 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7cdc:	ab0c      	add	r3, sp, #48	; 0x30
   d7cde:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d7ce0:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ce2:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d7ce6:	4620      	mov	r0, r4
   d7ce8:	f7fe f968 	bl	d5fbc <netdb_getaddrinfo>
    if (!r && ai) {
   d7cec:	4601      	mov	r1, r0
   d7cee:	bb58      	cbnz	r0, d7d48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d7cf0:	9b00      	ldr	r3, [sp, #0]
   d7cf2:	b34b      	cbz	r3, d7d48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d7cf4:	685a      	ldr	r2, [r3, #4]
   d7cf6:	2a02      	cmp	r2, #2
   d7cf8:	d00e      	beq.n	d7d18 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d7cfa:	2a0a      	cmp	r2, #10
   d7cfc:	d124      	bne.n	d7d48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d7cfe:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d7d00:	2211      	movs	r2, #17
   d7d02:	a801      	add	r0, sp, #4
   d7d04:	f001 fa51 	bl	d91aa <memset>
                a.v = 6;
   d7d08:	2306      	movs	r3, #6
   d7d0a:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d0e:	ad01      	add	r5, sp, #4
   d7d10:	f104 0308 	add.w	r3, r4, #8
   d7d14:	3418      	adds	r4, #24
   d7d16:	e005      	b.n	d7d24 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7d18:	6959      	ldr	r1, [r3, #20]
   d7d1a:	4630      	mov	r0, r6
   d7d1c:	3104      	adds	r1, #4
   d7d1e:	f7ff fd40 	bl	d77a2 <_ZN9IPAddressaSEPKh>
                break;
   d7d22:	e011      	b.n	d7d48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d24:	6818      	ldr	r0, [r3, #0]
   d7d26:	6859      	ldr	r1, [r3, #4]
   d7d28:	462a      	mov	r2, r5
   d7d2a:	c203      	stmia	r2!, {r0, r1}
   d7d2c:	3308      	adds	r3, #8
   d7d2e:	42a3      	cmp	r3, r4
   d7d30:	4615      	mov	r5, r2
   d7d32:	d1f7      	bne.n	d7d24 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d7d34:	a901      	add	r1, sp, #4
   d7d36:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7d38:	ad07      	add	r5, sp, #28
   d7d3a:	f7ff fd13 	bl	d7764 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d40:	1d34      	adds	r4, r6, #4
   d7d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d44:	682b      	ldr	r3, [r5, #0]
   d7d46:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d7d48:	9800      	ldr	r0, [sp, #0]
   d7d4a:	f7fe f92f 	bl	d5fac <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7d4e:	4630      	mov	r0, r6
   d7d50:	b00c      	add	sp, #48	; 0x30
   d7d52:	bd70      	pop	{r4, r5, r6, pc}

000d7d54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7d54:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7d56:	4a03      	ldr	r2, [pc, #12]	; (d7d64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7d58:	601a      	str	r2, [r3, #0]
   d7d5a:	2200      	movs	r2, #0
   d7d5c:	605a      	str	r2, [r3, #4]
   d7d5e:	4770      	bx	lr
   d7d60:	2003e6f0 	.word	0x2003e6f0
   d7d64:	000d97b8 	.word	0x000d97b8

000d7d68 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7d68:	b510      	push	{r4, lr}
   d7d6a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7d6c:	480f      	ldr	r0, [pc, #60]	; (d7dac <pinAvailable+0x44>)
   d7d6e:	f7fe fda1 	bl	d68b4 <_ZN8SPIClass9isEnabledEv>
   d7d72:	b128      	cbz	r0, d7d80 <pinAvailable+0x18>
   d7d74:	f1a4 030b 	sub.w	r3, r4, #11
   d7d78:	2b02      	cmp	r3, #2
   d7d7a:	d801      	bhi.n	d7d80 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7d7c:	2000      	movs	r0, #0
   d7d7e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7d80:	f000 f8d0 	bl	d7f24 <_Z19__fetch_global_Wirev>
   d7d84:	f7ff fec0 	bl	d7b08 <_ZN7TwoWire9isEnabledEv>
   d7d88:	b108      	cbz	r0, d7d8e <pinAvailable+0x26>
   d7d8a:	2c01      	cmp	r4, #1
   d7d8c:	d9f6      	bls.n	d7d7c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7d8e:	f7ff fe1b 	bl	d79c8 <_Z22__fetch_global_Serial1v>
   d7d92:	f7ff fe15 	bl	d79c0 <_ZN11USARTSerial9isEnabledEv>
   d7d96:	b118      	cbz	r0, d7da0 <pinAvailable+0x38>
   d7d98:	f1a4 0309 	sub.w	r3, r4, #9
   d7d9c:	2b01      	cmp	r3, #1
   d7d9e:	d9ed      	bls.n	d7d7c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7da0:	2c23      	cmp	r4, #35	; 0x23
   d7da2:	bf8c      	ite	hi
   d7da4:	2000      	movhi	r0, #0
   d7da6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7da8:	bd10      	pop	{r4, pc}
   d7daa:	bf00      	nop
   d7dac:	2003e6f8 	.word	0x2003e6f8

000d7db0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7db0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7db2:	b538      	push	{r3, r4, r5, lr}
   d7db4:	4604      	mov	r4, r0
   d7db6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7db8:	d80a      	bhi.n	d7dd0 <pinMode+0x20>
   d7dba:	29ff      	cmp	r1, #255	; 0xff
   d7dbc:	d008      	beq.n	d7dd0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7dbe:	f7ff ffd3 	bl	d7d68 <pinAvailable>
   d7dc2:	b128      	cbz	r0, d7dd0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7dc4:	4629      	mov	r1, r5
   d7dc6:	4620      	mov	r0, r4
}
   d7dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7dcc:	f7fe b906 	b.w	d5fdc <HAL_Pin_Mode>
   d7dd0:	bd38      	pop	{r3, r4, r5, pc}

000d7dd2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7dd2:	b538      	push	{r3, r4, r5, lr}
   d7dd4:	4604      	mov	r4, r0
   d7dd6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7dd8:	f7fe f908 	bl	d5fec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7ddc:	28ff      	cmp	r0, #255	; 0xff
   d7dde:	d010      	beq.n	d7e02 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7de0:	2806      	cmp	r0, #6
   d7de2:	d804      	bhi.n	d7dee <digitalWrite+0x1c>
   d7de4:	234d      	movs	r3, #77	; 0x4d
   d7de6:	fa23 f000 	lsr.w	r0, r3, r0
   d7dea:	07c3      	lsls	r3, r0, #31
   d7dec:	d409      	bmi.n	d7e02 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7dee:	4620      	mov	r0, r4
   d7df0:	f7ff ffba 	bl	d7d68 <pinAvailable>
   d7df4:	b128      	cbz	r0, d7e02 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7df6:	4629      	mov	r1, r5
   d7df8:	4620      	mov	r0, r4
}
   d7dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7dfe:	f7fe b8fd 	b.w	d5ffc <HAL_GPIO_Write>
   d7e02:	bd38      	pop	{r3, r4, r5, pc}

000d7e04 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7e04:	b510      	push	{r4, lr}
   d7e06:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e08:	f7fe f8f0 	bl	d5fec <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7e0c:	3804      	subs	r0, #4
   d7e0e:	b2c0      	uxtb	r0, r0
   d7e10:	2801      	cmp	r0, #1
   d7e12:	d908      	bls.n	d7e26 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7ff ffa7 	bl	d7d68 <pinAvailable>
   d7e1a:	b120      	cbz	r0, d7e26 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7e1c:	4620      	mov	r0, r4
}
   d7e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7e22:	f7fe b8f3 	b.w	d600c <HAL_GPIO_Read>
}
   d7e26:	2000      	movs	r0, #0
   d7e28:	bd10      	pop	{r4, pc}

000d7e2a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d7e2a:	f7fe b8f7 	b.w	d601c <HAL_Pulse_In>
	...

000d7e30 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e30:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e32:	4c0c      	ldr	r4, [pc, #48]	; (d7e64 <_GLOBAL__sub_I_SPI+0x34>)
   d7e34:	4e0c      	ldr	r6, [pc, #48]	; (d7e68 <_GLOBAL__sub_I_SPI+0x38>)
   d7e36:	4d0d      	ldr	r5, [pc, #52]	; (d7e6c <_GLOBAL__sub_I_SPI+0x3c>)
   d7e38:	2100      	movs	r1, #0
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	f7fe fcae 	bl	d679c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e40:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e42:	4c0b      	ldr	r4, [pc, #44]	; (d7e70 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e44:	4632      	mov	r2, r6
   d7e46:	4629      	mov	r1, r5
   d7e48:	f000 f8ac 	bl	d7fa4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e4c:	2101      	movs	r1, #1
   d7e4e:	4620      	mov	r0, r4
   d7e50:	f7fe fca4 	bl	d679c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e54:	4632      	mov	r2, r6
   d7e56:	4629      	mov	r1, r5
   d7e58:	4620      	mov	r0, r4
   d7e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e5e:	f000 b8a1 	b.w	d7fa4 <__aeabi_atexit>
   d7e62:	bf00      	nop
   d7e64:	2003e6f8 	.word	0x2003e6f8
   d7e68:	2003e0d0 	.word	0x2003e0d0
   d7e6c:	000d678d 	.word	0x000d678d
   d7e70:	2003e708 	.word	0x2003e708

000d7e74 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d7e74:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d7e76:	4d1c      	ldr	r5, [pc, #112]	; (d7ee8 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d7e78:	b089      	sub	sp, #36	; 0x24
   d7e7a:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d7e7c:	6820      	ldr	r0, [r4, #0]
   d7e7e:	f7fe f925 	bl	d60cc <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e82:	f7fe f93b 	bl	d60fc <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d7e86:	682b      	ldr	r3, [r5, #0]
   d7e88:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d7e8a:	1ac0      	subs	r0, r0, r3
   d7e8c:	4290      	cmp	r0, r2
   d7e8e:	d3f5      	bcc.n	d7e7c <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d7e90:	6823      	ldr	r3, [r4, #0]
   d7e92:	b333      	cbz	r3, d7ee2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d7e94:	68e3      	ldr	r3, [r4, #12]
   d7e96:	b323      	cbz	r3, d7ee2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e98:	1d25      	adds	r5, r4, #4
   d7e9a:	6923      	ldr	r3, [r4, #16]
   d7e9c:	4628      	mov	r0, r5
   d7e9e:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ea0:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7ea2:	a904      	add	r1, sp, #16
   d7ea4:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ea6:	9302      	str	r3, [sp, #8]
   d7ea8:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7eaa:	f7ff f82d 	bl	d6f08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7eae:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7eb0:	9a06      	ldr	r2, [sp, #24]
   d7eb2:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7eb4:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7eb6:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7eb8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d7eba:	9307      	str	r3, [sp, #28]
   d7ebc:	4629      	mov	r1, r5
   d7ebe:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7ec0:	9203      	str	r2, [sp, #12]
   d7ec2:	f7ff f821 	bl	d6f08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ec6:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7ec8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7eca:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ecc:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7ece:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ed0:	a804      	add	r0, sp, #16
   d7ed2:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ed4:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7ed6:	9207      	str	r2, [sp, #28]
   d7ed8:	f7fc f931 	bl	d413e <_ZNSt14_Function_baseD1Ev>
   d7edc:	4668      	mov	r0, sp
   d7ede:	f7fc f92e 	bl	d413e <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d7ee2:	b009      	add	sp, #36	; 0x24
   d7ee4:	bd30      	pop	{r4, r5, pc}
   d7ee6:	bf00      	nop
   d7ee8:	2003e718 	.word	0x2003e718

000d7eec <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d7eec:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d7eee:	f7ff ffc1 	bl	d7e74 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d7ef2:	2000      	movs	r0, #0
}
   d7ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d7ef8:	f7fe b940 	b.w	d617c <os_thread_cleanup>

000d7efc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d7efc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d7efe:	4c07      	ldr	r4, [pc, #28]	; (d7f1c <_Z21__fetch_global_EEPROMv+0x20>)
   d7f00:	6823      	ldr	r3, [r4, #0]
   d7f02:	07db      	lsls	r3, r3, #31
   d7f04:	d408      	bmi.n	d7f18 <_Z21__fetch_global_EEPROMv+0x1c>
   d7f06:	4620      	mov	r0, r4
   d7f08:	f7fc f8cb 	bl	d40a2 <__cxa_guard_acquire>
   d7f0c:	b120      	cbz	r0, d7f18 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d7f0e:	f7fe f8fd 	bl	d610c <HAL_EEPROM_Init>
   d7f12:	4620      	mov	r0, r4
   d7f14:	f7fc f8ca 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d7f18:	4801      	ldr	r0, [pc, #4]	; (d7f20 <_Z21__fetch_global_EEPROMv+0x24>)
   d7f1a:	bd10      	pop	{r4, pc}
   d7f1c:	2003e71c 	.word	0x2003e71c
   d7f20:	2003e720 	.word	0x2003e720

000d7f24 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7f24:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7f26:	4d0b      	ldr	r5, [pc, #44]	; (d7f54 <_Z19__fetch_global_Wirev+0x30>)
   d7f28:	6829      	ldr	r1, [r5, #0]
   d7f2a:	f011 0401 	ands.w	r4, r1, #1
   d7f2e:	d10f      	bne.n	d7f50 <_Z19__fetch_global_Wirev+0x2c>
   d7f30:	4628      	mov	r0, r5
   d7f32:	f7fc f8b6 	bl	d40a2 <__cxa_guard_acquire>
   d7f36:	b158      	cbz	r0, d7f50 <_Z19__fetch_global_Wirev+0x2c>
   d7f38:	4621      	mov	r1, r4
   d7f3a:	4807      	ldr	r0, [pc, #28]	; (d7f58 <_Z19__fetch_global_Wirev+0x34>)
   d7f3c:	f7ff fda8 	bl	d7a90 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7f40:	4628      	mov	r0, r5
   d7f42:	f7fc f8b3 	bl	d40ac <__cxa_guard_release>
   d7f46:	4a05      	ldr	r2, [pc, #20]	; (d7f5c <_Z19__fetch_global_Wirev+0x38>)
   d7f48:	4905      	ldr	r1, [pc, #20]	; (d7f60 <_Z19__fetch_global_Wirev+0x3c>)
   d7f4a:	4803      	ldr	r0, [pc, #12]	; (d7f58 <_Z19__fetch_global_Wirev+0x34>)
   d7f4c:	f000 f82a 	bl	d7fa4 <__aeabi_atexit>
	return wire;
}
   d7f50:	4801      	ldr	r0, [pc, #4]	; (d7f58 <_Z19__fetch_global_Wirev+0x34>)
   d7f52:	bd38      	pop	{r3, r4, r5, pc}
   d7f54:	2003e724 	.word	0x2003e724
   d7f58:	2003e73c 	.word	0x2003e73c
   d7f5c:	2003e0d0 	.word	0x2003e0d0
   d7f60:	000d7a3b 	.word	0x000d7a3b

000d7f64 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7f64:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d7f66:	4c0b      	ldr	r4, [pc, #44]	; (d7f94 <_Z20__fetch_global_Wire1v+0x30>)
   d7f68:	6823      	ldr	r3, [r4, #0]
   d7f6a:	07db      	lsls	r3, r3, #31
   d7f6c:	d40f      	bmi.n	d7f8e <_Z20__fetch_global_Wire1v+0x2a>
   d7f6e:	4620      	mov	r0, r4
   d7f70:	f7fc f897 	bl	d40a2 <__cxa_guard_acquire>
   d7f74:	b158      	cbz	r0, d7f8e <_Z20__fetch_global_Wire1v+0x2a>
   d7f76:	2101      	movs	r1, #1
   d7f78:	4807      	ldr	r0, [pc, #28]	; (d7f98 <_Z20__fetch_global_Wire1v+0x34>)
   d7f7a:	f7ff fd89 	bl	d7a90 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7f7e:	4620      	mov	r0, r4
   d7f80:	f7fc f894 	bl	d40ac <__cxa_guard_release>
   d7f84:	4a05      	ldr	r2, [pc, #20]	; (d7f9c <_Z20__fetch_global_Wire1v+0x38>)
   d7f86:	4906      	ldr	r1, [pc, #24]	; (d7fa0 <_Z20__fetch_global_Wire1v+0x3c>)
   d7f88:	4803      	ldr	r0, [pc, #12]	; (d7f98 <_Z20__fetch_global_Wire1v+0x34>)
   d7f8a:	f000 f80b 	bl	d7fa4 <__aeabi_atexit>
	return wire;
}
   d7f8e:	4802      	ldr	r0, [pc, #8]	; (d7f98 <_Z20__fetch_global_Wire1v+0x34>)
   d7f90:	bd10      	pop	{r4, pc}
   d7f92:	bf00      	nop
   d7f94:	2003e750 	.word	0x2003e750
   d7f98:	2003e728 	.word	0x2003e728
   d7f9c:	2003e0d0 	.word	0x2003e0d0
   d7fa0:	000d7a3b 	.word	0x000d7a3b

000d7fa4 <__aeabi_atexit>:
   d7fa4:	460b      	mov	r3, r1
   d7fa6:	4601      	mov	r1, r0
   d7fa8:	4618      	mov	r0, r3
   d7faa:	f001 b8e5 	b.w	d9178 <__cxa_atexit>

000d7fae <_ZSt25__throw_bad_function_callv>:
   d7fae:	b508      	push	{r3, lr}
   d7fb0:	f7fe fb18 	bl	d65e4 <abort>

000d7fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7fb4:	4b18      	ldr	r3, [pc, #96]	; (d8018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7fb6:	681a      	ldr	r2, [r3, #0]
   d7fb8:	07d1      	lsls	r1, r2, #31
   d7fba:	bf5c      	itt	pl
   d7fbc:	2201      	movpl	r2, #1
   d7fbe:	601a      	strpl	r2, [r3, #0]
   d7fc0:	4b16      	ldr	r3, [pc, #88]	; (d801c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7fc2:	681a      	ldr	r2, [r3, #0]
   d7fc4:	07d2      	lsls	r2, r2, #31
   d7fc6:	bf5c      	itt	pl
   d7fc8:	2201      	movpl	r2, #1
   d7fca:	601a      	strpl	r2, [r3, #0]
   d7fcc:	4b14      	ldr	r3, [pc, #80]	; (d8020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7fce:	681a      	ldr	r2, [r3, #0]
   d7fd0:	07d0      	lsls	r0, r2, #31
   d7fd2:	bf5c      	itt	pl
   d7fd4:	2201      	movpl	r2, #1
   d7fd6:	601a      	strpl	r2, [r3, #0]
   d7fd8:	4b12      	ldr	r3, [pc, #72]	; (d8024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7fda:	681a      	ldr	r2, [r3, #0]
   d7fdc:	07d1      	lsls	r1, r2, #31
   d7fde:	bf5c      	itt	pl
   d7fe0:	2201      	movpl	r2, #1
   d7fe2:	601a      	strpl	r2, [r3, #0]
   d7fe4:	4b10      	ldr	r3, [pc, #64]	; (d8028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7fe6:	681a      	ldr	r2, [r3, #0]
   d7fe8:	07d2      	lsls	r2, r2, #31
   d7fea:	bf5c      	itt	pl
   d7fec:	2201      	movpl	r2, #1
   d7fee:	601a      	strpl	r2, [r3, #0]
   d7ff0:	4b0e      	ldr	r3, [pc, #56]	; (d802c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ff2:	681a      	ldr	r2, [r3, #0]
   d7ff4:	07d0      	lsls	r0, r2, #31
   d7ff6:	bf5c      	itt	pl
   d7ff8:	2201      	movpl	r2, #1
   d7ffa:	601a      	strpl	r2, [r3, #0]
   d7ffc:	4b0c      	ldr	r3, [pc, #48]	; (d8030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7ffe:	681a      	ldr	r2, [r3, #0]
   d8000:	07d1      	lsls	r1, r2, #31
   d8002:	bf5c      	itt	pl
   d8004:	2201      	movpl	r2, #1
   d8006:	601a      	strpl	r2, [r3, #0]
   d8008:	4b0a      	ldr	r3, [pc, #40]	; (d8034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d800a:	681a      	ldr	r2, [r3, #0]
   d800c:	07d2      	lsls	r2, r2, #31
   d800e:	bf5c      	itt	pl
   d8010:	2201      	movpl	r2, #1
   d8012:	601a      	strpl	r2, [r3, #0]
   d8014:	4770      	bx	lr
   d8016:	bf00      	nop
   d8018:	2003e770 	.word	0x2003e770
   d801c:	2003e76c 	.word	0x2003e76c
   d8020:	2003e768 	.word	0x2003e768
   d8024:	2003e764 	.word	0x2003e764
   d8028:	2003e760 	.word	0x2003e760
   d802c:	2003e75c 	.word	0x2003e75c
   d8030:	2003e758 	.word	0x2003e758
   d8034:	2003e754 	.word	0x2003e754

000d8038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8038:	4b24      	ldr	r3, [pc, #144]	; (d80cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d803a:	681a      	ldr	r2, [r3, #0]
   d803c:	07d0      	lsls	r0, r2, #31
   d803e:	bf5c      	itt	pl
   d8040:	2201      	movpl	r2, #1
   d8042:	601a      	strpl	r2, [r3, #0]
   d8044:	4b22      	ldr	r3, [pc, #136]	; (d80d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8046:	681a      	ldr	r2, [r3, #0]
   d8048:	07d1      	lsls	r1, r2, #31
   d804a:	bf5c      	itt	pl
   d804c:	2201      	movpl	r2, #1
   d804e:	601a      	strpl	r2, [r3, #0]
   d8050:	4b20      	ldr	r3, [pc, #128]	; (d80d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8052:	681a      	ldr	r2, [r3, #0]
   d8054:	07d2      	lsls	r2, r2, #31
   d8056:	bf5c      	itt	pl
   d8058:	2201      	movpl	r2, #1
   d805a:	601a      	strpl	r2, [r3, #0]
   d805c:	4b1e      	ldr	r3, [pc, #120]	; (d80d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d805e:	681a      	ldr	r2, [r3, #0]
   d8060:	07d0      	lsls	r0, r2, #31
   d8062:	bf5c      	itt	pl
   d8064:	2201      	movpl	r2, #1
   d8066:	601a      	strpl	r2, [r3, #0]
   d8068:	4b1c      	ldr	r3, [pc, #112]	; (d80dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d806a:	681a      	ldr	r2, [r3, #0]
   d806c:	07d1      	lsls	r1, r2, #31
   d806e:	bf5c      	itt	pl
   d8070:	2201      	movpl	r2, #1
   d8072:	601a      	strpl	r2, [r3, #0]
   d8074:	4b1a      	ldr	r3, [pc, #104]	; (d80e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8076:	681a      	ldr	r2, [r3, #0]
   d8078:	07d2      	lsls	r2, r2, #31
   d807a:	bf5c      	itt	pl
   d807c:	2201      	movpl	r2, #1
   d807e:	601a      	strpl	r2, [r3, #0]
   d8080:	4b18      	ldr	r3, [pc, #96]	; (d80e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8082:	681a      	ldr	r2, [r3, #0]
   d8084:	07d0      	lsls	r0, r2, #31
   d8086:	bf5c      	itt	pl
   d8088:	2201      	movpl	r2, #1
   d808a:	601a      	strpl	r2, [r3, #0]
   d808c:	4b16      	ldr	r3, [pc, #88]	; (d80e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d808e:	681a      	ldr	r2, [r3, #0]
   d8090:	07d1      	lsls	r1, r2, #31
   d8092:	bf5c      	itt	pl
   d8094:	2201      	movpl	r2, #1
   d8096:	601a      	strpl	r2, [r3, #0]
   d8098:	4b14      	ldr	r3, [pc, #80]	; (d80ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d809a:	681a      	ldr	r2, [r3, #0]
   d809c:	07d2      	lsls	r2, r2, #31
   d809e:	bf5c      	itt	pl
   d80a0:	2201      	movpl	r2, #1
   d80a2:	601a      	strpl	r2, [r3, #0]
   d80a4:	4b12      	ldr	r3, [pc, #72]	; (d80f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d80a6:	681a      	ldr	r2, [r3, #0]
   d80a8:	07d0      	lsls	r0, r2, #31
   d80aa:	bf5c      	itt	pl
   d80ac:	2201      	movpl	r2, #1
   d80ae:	601a      	strpl	r2, [r3, #0]
   d80b0:	4b10      	ldr	r3, [pc, #64]	; (d80f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d80b2:	681a      	ldr	r2, [r3, #0]
   d80b4:	07d1      	lsls	r1, r2, #31
   d80b6:	bf5c      	itt	pl
   d80b8:	2201      	movpl	r2, #1
   d80ba:	601a      	strpl	r2, [r3, #0]
   d80bc:	4b0e      	ldr	r3, [pc, #56]	; (d80f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d80be:	681a      	ldr	r2, [r3, #0]
   d80c0:	07d2      	lsls	r2, r2, #31
   d80c2:	bf5c      	itt	pl
   d80c4:	2201      	movpl	r2, #1
   d80c6:	601a      	strpl	r2, [r3, #0]
   d80c8:	4770      	bx	lr
   d80ca:	bf00      	nop
   d80cc:	2003e7a0 	.word	0x2003e7a0
   d80d0:	2003e79c 	.word	0x2003e79c
   d80d4:	2003e798 	.word	0x2003e798
   d80d8:	2003e794 	.word	0x2003e794
   d80dc:	2003e790 	.word	0x2003e790
   d80e0:	2003e78c 	.word	0x2003e78c
   d80e4:	2003e788 	.word	0x2003e788
   d80e8:	2003e784 	.word	0x2003e784
   d80ec:	2003e780 	.word	0x2003e780
   d80f0:	2003e77c 	.word	0x2003e77c
   d80f4:	2003e778 	.word	0x2003e778
   d80f8:	2003e774 	.word	0x2003e774

000d80fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d80fc:	4b24      	ldr	r3, [pc, #144]	; (d8190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d80fe:	681a      	ldr	r2, [r3, #0]
   d8100:	07d0      	lsls	r0, r2, #31
   d8102:	bf5c      	itt	pl
   d8104:	2201      	movpl	r2, #1
   d8106:	601a      	strpl	r2, [r3, #0]
   d8108:	4b22      	ldr	r3, [pc, #136]	; (d8194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d810a:	681a      	ldr	r2, [r3, #0]
   d810c:	07d1      	lsls	r1, r2, #31
   d810e:	bf5c      	itt	pl
   d8110:	2201      	movpl	r2, #1
   d8112:	601a      	strpl	r2, [r3, #0]
   d8114:	4b20      	ldr	r3, [pc, #128]	; (d8198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8116:	681a      	ldr	r2, [r3, #0]
   d8118:	07d2      	lsls	r2, r2, #31
   d811a:	bf5c      	itt	pl
   d811c:	2201      	movpl	r2, #1
   d811e:	601a      	strpl	r2, [r3, #0]
   d8120:	4b1e      	ldr	r3, [pc, #120]	; (d819c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8122:	681a      	ldr	r2, [r3, #0]
   d8124:	07d0      	lsls	r0, r2, #31
   d8126:	bf5c      	itt	pl
   d8128:	2201      	movpl	r2, #1
   d812a:	601a      	strpl	r2, [r3, #0]
   d812c:	4b1c      	ldr	r3, [pc, #112]	; (d81a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d812e:	681a      	ldr	r2, [r3, #0]
   d8130:	07d1      	lsls	r1, r2, #31
   d8132:	bf5c      	itt	pl
   d8134:	2201      	movpl	r2, #1
   d8136:	601a      	strpl	r2, [r3, #0]
   d8138:	4b1a      	ldr	r3, [pc, #104]	; (d81a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d813a:	681a      	ldr	r2, [r3, #0]
   d813c:	07d2      	lsls	r2, r2, #31
   d813e:	bf5c      	itt	pl
   d8140:	2201      	movpl	r2, #1
   d8142:	601a      	strpl	r2, [r3, #0]
   d8144:	4b18      	ldr	r3, [pc, #96]	; (d81a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8146:	681a      	ldr	r2, [r3, #0]
   d8148:	07d0      	lsls	r0, r2, #31
   d814a:	bf5c      	itt	pl
   d814c:	2201      	movpl	r2, #1
   d814e:	601a      	strpl	r2, [r3, #0]
   d8150:	4b16      	ldr	r3, [pc, #88]	; (d81ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8152:	681a      	ldr	r2, [r3, #0]
   d8154:	07d1      	lsls	r1, r2, #31
   d8156:	bf5c      	itt	pl
   d8158:	2201      	movpl	r2, #1
   d815a:	601a      	strpl	r2, [r3, #0]
   d815c:	4b14      	ldr	r3, [pc, #80]	; (d81b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d815e:	681a      	ldr	r2, [r3, #0]
   d8160:	07d2      	lsls	r2, r2, #31
   d8162:	bf5c      	itt	pl
   d8164:	2201      	movpl	r2, #1
   d8166:	601a      	strpl	r2, [r3, #0]
   d8168:	4b12      	ldr	r3, [pc, #72]	; (d81b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d816a:	681a      	ldr	r2, [r3, #0]
   d816c:	07d0      	lsls	r0, r2, #31
   d816e:	bf5c      	itt	pl
   d8170:	2201      	movpl	r2, #1
   d8172:	601a      	strpl	r2, [r3, #0]
   d8174:	4b10      	ldr	r3, [pc, #64]	; (d81b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8176:	681a      	ldr	r2, [r3, #0]
   d8178:	07d1      	lsls	r1, r2, #31
   d817a:	bf5c      	itt	pl
   d817c:	2201      	movpl	r2, #1
   d817e:	601a      	strpl	r2, [r3, #0]
   d8180:	4b0e      	ldr	r3, [pc, #56]	; (d81bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8182:	681a      	ldr	r2, [r3, #0]
   d8184:	07d2      	lsls	r2, r2, #31
   d8186:	bf5c      	itt	pl
   d8188:	2201      	movpl	r2, #1
   d818a:	601a      	strpl	r2, [r3, #0]
   d818c:	4770      	bx	lr
   d818e:	bf00      	nop
   d8190:	2003e7d0 	.word	0x2003e7d0
   d8194:	2003e7cc 	.word	0x2003e7cc
   d8198:	2003e7c8 	.word	0x2003e7c8
   d819c:	2003e7c4 	.word	0x2003e7c4
   d81a0:	2003e7c0 	.word	0x2003e7c0
   d81a4:	2003e7bc 	.word	0x2003e7bc
   d81a8:	2003e7b8 	.word	0x2003e7b8
   d81ac:	2003e7b4 	.word	0x2003e7b4
   d81b0:	2003e7b0 	.word	0x2003e7b0
   d81b4:	2003e7ac 	.word	0x2003e7ac
   d81b8:	2003e7a8 	.word	0x2003e7a8
   d81bc:	2003e7a4 	.word	0x2003e7a4

000d81c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d81c0:	4b18      	ldr	r3, [pc, #96]	; (d8224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d81c2:	681a      	ldr	r2, [r3, #0]
   d81c4:	07d1      	lsls	r1, r2, #31
   d81c6:	bf5c      	itt	pl
   d81c8:	2201      	movpl	r2, #1
   d81ca:	601a      	strpl	r2, [r3, #0]
   d81cc:	4b16      	ldr	r3, [pc, #88]	; (d8228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d81ce:	681a      	ldr	r2, [r3, #0]
   d81d0:	07d2      	lsls	r2, r2, #31
   d81d2:	bf5c      	itt	pl
   d81d4:	2201      	movpl	r2, #1
   d81d6:	601a      	strpl	r2, [r3, #0]
   d81d8:	4b14      	ldr	r3, [pc, #80]	; (d822c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d81da:	681a      	ldr	r2, [r3, #0]
   d81dc:	07d0      	lsls	r0, r2, #31
   d81de:	bf5c      	itt	pl
   d81e0:	2201      	movpl	r2, #1
   d81e2:	601a      	strpl	r2, [r3, #0]
   d81e4:	4b12      	ldr	r3, [pc, #72]	; (d8230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81e6:	681a      	ldr	r2, [r3, #0]
   d81e8:	07d1      	lsls	r1, r2, #31
   d81ea:	bf5c      	itt	pl
   d81ec:	2201      	movpl	r2, #1
   d81ee:	601a      	strpl	r2, [r3, #0]
   d81f0:	4b10      	ldr	r3, [pc, #64]	; (d8234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81f2:	681a      	ldr	r2, [r3, #0]
   d81f4:	07d2      	lsls	r2, r2, #31
   d81f6:	bf5c      	itt	pl
   d81f8:	2201      	movpl	r2, #1
   d81fa:	601a      	strpl	r2, [r3, #0]
   d81fc:	4b0e      	ldr	r3, [pc, #56]	; (d8238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d81fe:	681a      	ldr	r2, [r3, #0]
   d8200:	07d0      	lsls	r0, r2, #31
   d8202:	bf5c      	itt	pl
   d8204:	2201      	movpl	r2, #1
   d8206:	601a      	strpl	r2, [r3, #0]
   d8208:	4b0c      	ldr	r3, [pc, #48]	; (d823c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d820a:	681a      	ldr	r2, [r3, #0]
   d820c:	07d1      	lsls	r1, r2, #31
   d820e:	bf5c      	itt	pl
   d8210:	2201      	movpl	r2, #1
   d8212:	601a      	strpl	r2, [r3, #0]
   d8214:	4b0a      	ldr	r3, [pc, #40]	; (d8240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8216:	681a      	ldr	r2, [r3, #0]
   d8218:	07d2      	lsls	r2, r2, #31
   d821a:	bf5c      	itt	pl
   d821c:	2201      	movpl	r2, #1
   d821e:	601a      	strpl	r2, [r3, #0]
   d8220:	4770      	bx	lr
   d8222:	bf00      	nop
   d8224:	2003e7f0 	.word	0x2003e7f0
   d8228:	2003e7ec 	.word	0x2003e7ec
   d822c:	2003e7e8 	.word	0x2003e7e8
   d8230:	2003e7e4 	.word	0x2003e7e4
   d8234:	2003e7e0 	.word	0x2003e7e0
   d8238:	2003e7dc 	.word	0x2003e7dc
   d823c:	2003e7d8 	.word	0x2003e7d8
   d8240:	2003e7d4 	.word	0x2003e7d4

000d8244 <__aeabi_drsub>:
   d8244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8248:	e002      	b.n	d8250 <__adddf3>
   d824a:	bf00      	nop

000d824c <__aeabi_dsub>:
   d824c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8250 <__adddf3>:
   d8250:	b530      	push	{r4, r5, lr}
   d8252:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8256:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d825a:	ea94 0f05 	teq	r4, r5
   d825e:	bf08      	it	eq
   d8260:	ea90 0f02 	teqeq	r0, r2
   d8264:	bf1f      	itttt	ne
   d8266:	ea54 0c00 	orrsne.w	ip, r4, r0
   d826a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d826e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8276:	f000 80e2 	beq.w	d843e <__adddf3+0x1ee>
   d827a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d827e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8282:	bfb8      	it	lt
   d8284:	426d      	neglt	r5, r5
   d8286:	dd0c      	ble.n	d82a2 <__adddf3+0x52>
   d8288:	442c      	add	r4, r5
   d828a:	ea80 0202 	eor.w	r2, r0, r2
   d828e:	ea81 0303 	eor.w	r3, r1, r3
   d8292:	ea82 0000 	eor.w	r0, r2, r0
   d8296:	ea83 0101 	eor.w	r1, r3, r1
   d829a:	ea80 0202 	eor.w	r2, r0, r2
   d829e:	ea81 0303 	eor.w	r3, r1, r3
   d82a2:	2d36      	cmp	r5, #54	; 0x36
   d82a4:	bf88      	it	hi
   d82a6:	bd30      	pophi	{r4, r5, pc}
   d82a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d82ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d82b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d82b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d82b8:	d002      	beq.n	d82c0 <__adddf3+0x70>
   d82ba:	4240      	negs	r0, r0
   d82bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d82c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d82c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d82cc:	d002      	beq.n	d82d4 <__adddf3+0x84>
   d82ce:	4252      	negs	r2, r2
   d82d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d82d4:	ea94 0f05 	teq	r4, r5
   d82d8:	f000 80a7 	beq.w	d842a <__adddf3+0x1da>
   d82dc:	f1a4 0401 	sub.w	r4, r4, #1
   d82e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d82e4:	db0d      	blt.n	d8302 <__adddf3+0xb2>
   d82e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d82ea:	fa22 f205 	lsr.w	r2, r2, r5
   d82ee:	1880      	adds	r0, r0, r2
   d82f0:	f141 0100 	adc.w	r1, r1, #0
   d82f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d82f8:	1880      	adds	r0, r0, r2
   d82fa:	fa43 f305 	asr.w	r3, r3, r5
   d82fe:	4159      	adcs	r1, r3
   d8300:	e00e      	b.n	d8320 <__adddf3+0xd0>
   d8302:	f1a5 0520 	sub.w	r5, r5, #32
   d8306:	f10e 0e20 	add.w	lr, lr, #32
   d830a:	2a01      	cmp	r2, #1
   d830c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8310:	bf28      	it	cs
   d8312:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8316:	fa43 f305 	asr.w	r3, r3, r5
   d831a:	18c0      	adds	r0, r0, r3
   d831c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8324:	d507      	bpl.n	d8336 <__adddf3+0xe6>
   d8326:	f04f 0e00 	mov.w	lr, #0
   d832a:	f1dc 0c00 	rsbs	ip, ip, #0
   d832e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8332:	eb6e 0101 	sbc.w	r1, lr, r1
   d8336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d833a:	d31b      	bcc.n	d8374 <__adddf3+0x124>
   d833c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8340:	d30c      	bcc.n	d835c <__adddf3+0x10c>
   d8342:	0849      	lsrs	r1, r1, #1
   d8344:	ea5f 0030 	movs.w	r0, r0, rrx
   d8348:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d834c:	f104 0401 	add.w	r4, r4, #1
   d8350:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8358:	f080 809a 	bcs.w	d8490 <__adddf3+0x240>
   d835c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8360:	bf08      	it	eq
   d8362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8366:	f150 0000 	adcs.w	r0, r0, #0
   d836a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d836e:	ea41 0105 	orr.w	r1, r1, r5
   d8372:	bd30      	pop	{r4, r5, pc}
   d8374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8378:	4140      	adcs	r0, r0
   d837a:	eb41 0101 	adc.w	r1, r1, r1
   d837e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8382:	f1a4 0401 	sub.w	r4, r4, #1
   d8386:	d1e9      	bne.n	d835c <__adddf3+0x10c>
   d8388:	f091 0f00 	teq	r1, #0
   d838c:	bf04      	itt	eq
   d838e:	4601      	moveq	r1, r0
   d8390:	2000      	moveq	r0, #0
   d8392:	fab1 f381 	clz	r3, r1
   d8396:	bf08      	it	eq
   d8398:	3320      	addeq	r3, #32
   d839a:	f1a3 030b 	sub.w	r3, r3, #11
   d839e:	f1b3 0220 	subs.w	r2, r3, #32
   d83a2:	da0c      	bge.n	d83be <__adddf3+0x16e>
   d83a4:	320c      	adds	r2, #12
   d83a6:	dd08      	ble.n	d83ba <__adddf3+0x16a>
   d83a8:	f102 0c14 	add.w	ip, r2, #20
   d83ac:	f1c2 020c 	rsb	r2, r2, #12
   d83b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d83b4:	fa21 f102 	lsr.w	r1, r1, r2
   d83b8:	e00c      	b.n	d83d4 <__adddf3+0x184>
   d83ba:	f102 0214 	add.w	r2, r2, #20
   d83be:	bfd8      	it	le
   d83c0:	f1c2 0c20 	rsble	ip, r2, #32
   d83c4:	fa01 f102 	lsl.w	r1, r1, r2
   d83c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d83cc:	bfdc      	itt	le
   d83ce:	ea41 010c 	orrle.w	r1, r1, ip
   d83d2:	4090      	lslle	r0, r2
   d83d4:	1ae4      	subs	r4, r4, r3
   d83d6:	bfa2      	ittt	ge
   d83d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d83dc:	4329      	orrge	r1, r5
   d83de:	bd30      	popge	{r4, r5, pc}
   d83e0:	ea6f 0404 	mvn.w	r4, r4
   d83e4:	3c1f      	subs	r4, #31
   d83e6:	da1c      	bge.n	d8422 <__adddf3+0x1d2>
   d83e8:	340c      	adds	r4, #12
   d83ea:	dc0e      	bgt.n	d840a <__adddf3+0x1ba>
   d83ec:	f104 0414 	add.w	r4, r4, #20
   d83f0:	f1c4 0220 	rsb	r2, r4, #32
   d83f4:	fa20 f004 	lsr.w	r0, r0, r4
   d83f8:	fa01 f302 	lsl.w	r3, r1, r2
   d83fc:	ea40 0003 	orr.w	r0, r0, r3
   d8400:	fa21 f304 	lsr.w	r3, r1, r4
   d8404:	ea45 0103 	orr.w	r1, r5, r3
   d8408:	bd30      	pop	{r4, r5, pc}
   d840a:	f1c4 040c 	rsb	r4, r4, #12
   d840e:	f1c4 0220 	rsb	r2, r4, #32
   d8412:	fa20 f002 	lsr.w	r0, r0, r2
   d8416:	fa01 f304 	lsl.w	r3, r1, r4
   d841a:	ea40 0003 	orr.w	r0, r0, r3
   d841e:	4629      	mov	r1, r5
   d8420:	bd30      	pop	{r4, r5, pc}
   d8422:	fa21 f004 	lsr.w	r0, r1, r4
   d8426:	4629      	mov	r1, r5
   d8428:	bd30      	pop	{r4, r5, pc}
   d842a:	f094 0f00 	teq	r4, #0
   d842e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8432:	bf06      	itte	eq
   d8434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8438:	3401      	addeq	r4, #1
   d843a:	3d01      	subne	r5, #1
   d843c:	e74e      	b.n	d82dc <__adddf3+0x8c>
   d843e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8442:	bf18      	it	ne
   d8444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8448:	d029      	beq.n	d849e <__adddf3+0x24e>
   d844a:	ea94 0f05 	teq	r4, r5
   d844e:	bf08      	it	eq
   d8450:	ea90 0f02 	teqeq	r0, r2
   d8454:	d005      	beq.n	d8462 <__adddf3+0x212>
   d8456:	ea54 0c00 	orrs.w	ip, r4, r0
   d845a:	bf04      	itt	eq
   d845c:	4619      	moveq	r1, r3
   d845e:	4610      	moveq	r0, r2
   d8460:	bd30      	pop	{r4, r5, pc}
   d8462:	ea91 0f03 	teq	r1, r3
   d8466:	bf1e      	ittt	ne
   d8468:	2100      	movne	r1, #0
   d846a:	2000      	movne	r0, #0
   d846c:	bd30      	popne	{r4, r5, pc}
   d846e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8472:	d105      	bne.n	d8480 <__adddf3+0x230>
   d8474:	0040      	lsls	r0, r0, #1
   d8476:	4149      	adcs	r1, r1
   d8478:	bf28      	it	cs
   d847a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d847e:	bd30      	pop	{r4, r5, pc}
   d8480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8484:	bf3c      	itt	cc
   d8486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d848a:	bd30      	popcc	{r4, r5, pc}
   d848c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8498:	f04f 0000 	mov.w	r0, #0
   d849c:	bd30      	pop	{r4, r5, pc}
   d849e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d84a2:	bf1a      	itte	ne
   d84a4:	4619      	movne	r1, r3
   d84a6:	4610      	movne	r0, r2
   d84a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d84ac:	bf1c      	itt	ne
   d84ae:	460b      	movne	r3, r1
   d84b0:	4602      	movne	r2, r0
   d84b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d84b6:	bf06      	itte	eq
   d84b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d84bc:	ea91 0f03 	teqeq	r1, r3
   d84c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d84c4:	bd30      	pop	{r4, r5, pc}
   d84c6:	bf00      	nop

000d84c8 <__aeabi_ui2d>:
   d84c8:	f090 0f00 	teq	r0, #0
   d84cc:	bf04      	itt	eq
   d84ce:	2100      	moveq	r1, #0
   d84d0:	4770      	bxeq	lr
   d84d2:	b530      	push	{r4, r5, lr}
   d84d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84dc:	f04f 0500 	mov.w	r5, #0
   d84e0:	f04f 0100 	mov.w	r1, #0
   d84e4:	e750      	b.n	d8388 <__adddf3+0x138>
   d84e6:	bf00      	nop

000d84e8 <__aeabi_i2d>:
   d84e8:	f090 0f00 	teq	r0, #0
   d84ec:	bf04      	itt	eq
   d84ee:	2100      	moveq	r1, #0
   d84f0:	4770      	bxeq	lr
   d84f2:	b530      	push	{r4, r5, lr}
   d84f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8500:	bf48      	it	mi
   d8502:	4240      	negmi	r0, r0
   d8504:	f04f 0100 	mov.w	r1, #0
   d8508:	e73e      	b.n	d8388 <__adddf3+0x138>
   d850a:	bf00      	nop

000d850c <__aeabi_f2d>:
   d850c:	0042      	lsls	r2, r0, #1
   d850e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8512:	ea4f 0131 	mov.w	r1, r1, rrx
   d8516:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d851a:	bf1f      	itttt	ne
   d851c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8528:	4770      	bxne	lr
   d852a:	f092 0f00 	teq	r2, #0
   d852e:	bf14      	ite	ne
   d8530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8534:	4770      	bxeq	lr
   d8536:	b530      	push	{r4, r5, lr}
   d8538:	f44f 7460 	mov.w	r4, #896	; 0x380
   d853c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8544:	e720      	b.n	d8388 <__adddf3+0x138>
   d8546:	bf00      	nop

000d8548 <__aeabi_ul2d>:
   d8548:	ea50 0201 	orrs.w	r2, r0, r1
   d854c:	bf08      	it	eq
   d854e:	4770      	bxeq	lr
   d8550:	b530      	push	{r4, r5, lr}
   d8552:	f04f 0500 	mov.w	r5, #0
   d8556:	e00a      	b.n	d856e <__aeabi_l2d+0x16>

000d8558 <__aeabi_l2d>:
   d8558:	ea50 0201 	orrs.w	r2, r0, r1
   d855c:	bf08      	it	eq
   d855e:	4770      	bxeq	lr
   d8560:	b530      	push	{r4, r5, lr}
   d8562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8566:	d502      	bpl.n	d856e <__aeabi_l2d+0x16>
   d8568:	4240      	negs	r0, r0
   d856a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d856e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8572:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d857a:	f43f aedc 	beq.w	d8336 <__adddf3+0xe6>
   d857e:	f04f 0203 	mov.w	r2, #3
   d8582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8586:	bf18      	it	ne
   d8588:	3203      	addne	r2, #3
   d858a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d858e:	bf18      	it	ne
   d8590:	3203      	addne	r2, #3
   d8592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8596:	f1c2 0320 	rsb	r3, r2, #32
   d859a:	fa00 fc03 	lsl.w	ip, r0, r3
   d859e:	fa20 f002 	lsr.w	r0, r0, r2
   d85a2:	fa01 fe03 	lsl.w	lr, r1, r3
   d85a6:	ea40 000e 	orr.w	r0, r0, lr
   d85aa:	fa21 f102 	lsr.w	r1, r1, r2
   d85ae:	4414      	add	r4, r2
   d85b0:	e6c1      	b.n	d8336 <__adddf3+0xe6>
   d85b2:	bf00      	nop

000d85b4 <__aeabi_dmul>:
   d85b4:	b570      	push	{r4, r5, r6, lr}
   d85b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85c2:	bf1d      	ittte	ne
   d85c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d85c8:	ea94 0f0c 	teqne	r4, ip
   d85cc:	ea95 0f0c 	teqne	r5, ip
   d85d0:	f000 f8de 	bleq	d8790 <__aeabi_dmul+0x1dc>
   d85d4:	442c      	add	r4, r5
   d85d6:	ea81 0603 	eor.w	r6, r1, r3
   d85da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d85de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d85e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d85e6:	bf18      	it	ne
   d85e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d85ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d85f4:	d038      	beq.n	d8668 <__aeabi_dmul+0xb4>
   d85f6:	fba0 ce02 	umull	ip, lr, r0, r2
   d85fa:	f04f 0500 	mov.w	r5, #0
   d85fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8606:	fbe0 e503 	umlal	lr, r5, r0, r3
   d860a:	f04f 0600 	mov.w	r6, #0
   d860e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8612:	f09c 0f00 	teq	ip, #0
   d8616:	bf18      	it	ne
   d8618:	f04e 0e01 	orrne.w	lr, lr, #1
   d861c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8628:	d204      	bcs.n	d8634 <__aeabi_dmul+0x80>
   d862a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d862e:	416d      	adcs	r5, r5
   d8630:	eb46 0606 	adc.w	r6, r6, r6
   d8634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d863c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d864c:	bf88      	it	hi
   d864e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8652:	d81e      	bhi.n	d8692 <__aeabi_dmul+0xde>
   d8654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8658:	bf08      	it	eq
   d865a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d865e:	f150 0000 	adcs.w	r0, r0, #0
   d8662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8666:	bd70      	pop	{r4, r5, r6, pc}
   d8668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d866c:	ea46 0101 	orr.w	r1, r6, r1
   d8670:	ea40 0002 	orr.w	r0, r0, r2
   d8674:	ea81 0103 	eor.w	r1, r1, r3
   d8678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d867c:	bfc2      	ittt	gt
   d867e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8686:	bd70      	popgt	{r4, r5, r6, pc}
   d8688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d868c:	f04f 0e00 	mov.w	lr, #0
   d8690:	3c01      	subs	r4, #1
   d8692:	f300 80ab 	bgt.w	d87ec <__aeabi_dmul+0x238>
   d8696:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d869a:	bfde      	ittt	le
   d869c:	2000      	movle	r0, #0
   d869e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d86a2:	bd70      	pople	{r4, r5, r6, pc}
   d86a4:	f1c4 0400 	rsb	r4, r4, #0
   d86a8:	3c20      	subs	r4, #32
   d86aa:	da35      	bge.n	d8718 <__aeabi_dmul+0x164>
   d86ac:	340c      	adds	r4, #12
   d86ae:	dc1b      	bgt.n	d86e8 <__aeabi_dmul+0x134>
   d86b0:	f104 0414 	add.w	r4, r4, #20
   d86b4:	f1c4 0520 	rsb	r5, r4, #32
   d86b8:	fa00 f305 	lsl.w	r3, r0, r5
   d86bc:	fa20 f004 	lsr.w	r0, r0, r4
   d86c0:	fa01 f205 	lsl.w	r2, r1, r5
   d86c4:	ea40 0002 	orr.w	r0, r0, r2
   d86c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d86cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d86d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86d4:	fa21 f604 	lsr.w	r6, r1, r4
   d86d8:	eb42 0106 	adc.w	r1, r2, r6
   d86dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86e0:	bf08      	it	eq
   d86e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86e6:	bd70      	pop	{r4, r5, r6, pc}
   d86e8:	f1c4 040c 	rsb	r4, r4, #12
   d86ec:	f1c4 0520 	rsb	r5, r4, #32
   d86f0:	fa00 f304 	lsl.w	r3, r0, r4
   d86f4:	fa20 f005 	lsr.w	r0, r0, r5
   d86f8:	fa01 f204 	lsl.w	r2, r1, r4
   d86fc:	ea40 0002 	orr.w	r0, r0, r2
   d8700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8708:	f141 0100 	adc.w	r1, r1, #0
   d870c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8710:	bf08      	it	eq
   d8712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8716:	bd70      	pop	{r4, r5, r6, pc}
   d8718:	f1c4 0520 	rsb	r5, r4, #32
   d871c:	fa00 f205 	lsl.w	r2, r0, r5
   d8720:	ea4e 0e02 	orr.w	lr, lr, r2
   d8724:	fa20 f304 	lsr.w	r3, r0, r4
   d8728:	fa01 f205 	lsl.w	r2, r1, r5
   d872c:	ea43 0302 	orr.w	r3, r3, r2
   d8730:	fa21 f004 	lsr.w	r0, r1, r4
   d8734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8738:	fa21 f204 	lsr.w	r2, r1, r4
   d873c:	ea20 0002 	bic.w	r0, r0, r2
   d8740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8748:	bf08      	it	eq
   d874a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d874e:	bd70      	pop	{r4, r5, r6, pc}
   d8750:	f094 0f00 	teq	r4, #0
   d8754:	d10f      	bne.n	d8776 <__aeabi_dmul+0x1c2>
   d8756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d875a:	0040      	lsls	r0, r0, #1
   d875c:	eb41 0101 	adc.w	r1, r1, r1
   d8760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8764:	bf08      	it	eq
   d8766:	3c01      	subeq	r4, #1
   d8768:	d0f7      	beq.n	d875a <__aeabi_dmul+0x1a6>
   d876a:	ea41 0106 	orr.w	r1, r1, r6
   d876e:	f095 0f00 	teq	r5, #0
   d8772:	bf18      	it	ne
   d8774:	4770      	bxne	lr
   d8776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d877a:	0052      	lsls	r2, r2, #1
   d877c:	eb43 0303 	adc.w	r3, r3, r3
   d8780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8784:	bf08      	it	eq
   d8786:	3d01      	subeq	r5, #1
   d8788:	d0f7      	beq.n	d877a <__aeabi_dmul+0x1c6>
   d878a:	ea43 0306 	orr.w	r3, r3, r6
   d878e:	4770      	bx	lr
   d8790:	ea94 0f0c 	teq	r4, ip
   d8794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8798:	bf18      	it	ne
   d879a:	ea95 0f0c 	teqne	r5, ip
   d879e:	d00c      	beq.n	d87ba <__aeabi_dmul+0x206>
   d87a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87a4:	bf18      	it	ne
   d87a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87aa:	d1d1      	bne.n	d8750 <__aeabi_dmul+0x19c>
   d87ac:	ea81 0103 	eor.w	r1, r1, r3
   d87b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87b4:	f04f 0000 	mov.w	r0, #0
   d87b8:	bd70      	pop	{r4, r5, r6, pc}
   d87ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87be:	bf06      	itte	eq
   d87c0:	4610      	moveq	r0, r2
   d87c2:	4619      	moveq	r1, r3
   d87c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87c8:	d019      	beq.n	d87fe <__aeabi_dmul+0x24a>
   d87ca:	ea94 0f0c 	teq	r4, ip
   d87ce:	d102      	bne.n	d87d6 <__aeabi_dmul+0x222>
   d87d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d87d4:	d113      	bne.n	d87fe <__aeabi_dmul+0x24a>
   d87d6:	ea95 0f0c 	teq	r5, ip
   d87da:	d105      	bne.n	d87e8 <__aeabi_dmul+0x234>
   d87dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d87e0:	bf1c      	itt	ne
   d87e2:	4610      	movne	r0, r2
   d87e4:	4619      	movne	r1, r3
   d87e6:	d10a      	bne.n	d87fe <__aeabi_dmul+0x24a>
   d87e8:	ea81 0103 	eor.w	r1, r1, r3
   d87ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d87f8:	f04f 0000 	mov.w	r0, #0
   d87fc:	bd70      	pop	{r4, r5, r6, pc}
   d87fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8806:	bd70      	pop	{r4, r5, r6, pc}

000d8808 <__aeabi_ddiv>:
   d8808:	b570      	push	{r4, r5, r6, lr}
   d880a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d880e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8816:	bf1d      	ittte	ne
   d8818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d881c:	ea94 0f0c 	teqne	r4, ip
   d8820:	ea95 0f0c 	teqne	r5, ip
   d8824:	f000 f8a7 	bleq	d8976 <__aeabi_ddiv+0x16e>
   d8828:	eba4 0405 	sub.w	r4, r4, r5
   d882c:	ea81 0e03 	eor.w	lr, r1, r3
   d8830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8834:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8838:	f000 8088 	beq.w	d894c <__aeabi_ddiv+0x144>
   d883c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d884c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8858:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d885c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8860:	429d      	cmp	r5, r3
   d8862:	bf08      	it	eq
   d8864:	4296      	cmpeq	r6, r2
   d8866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d886a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d886e:	d202      	bcs.n	d8876 <__aeabi_ddiv+0x6e>
   d8870:	085b      	lsrs	r3, r3, #1
   d8872:	ea4f 0232 	mov.w	r2, r2, rrx
   d8876:	1ab6      	subs	r6, r6, r2
   d8878:	eb65 0503 	sbc.w	r5, r5, r3
   d887c:	085b      	lsrs	r3, r3, #1
   d887e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d888a:	ebb6 0e02 	subs.w	lr, r6, r2
   d888e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8892:	bf22      	ittt	cs
   d8894:	1ab6      	subcs	r6, r6, r2
   d8896:	4675      	movcs	r5, lr
   d8898:	ea40 000c 	orrcs.w	r0, r0, ip
   d889c:	085b      	lsrs	r3, r3, #1
   d889e:	ea4f 0232 	mov.w	r2, r2, rrx
   d88a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d88a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88aa:	bf22      	ittt	cs
   d88ac:	1ab6      	subcs	r6, r6, r2
   d88ae:	4675      	movcs	r5, lr
   d88b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d88b4:	085b      	lsrs	r3, r3, #1
   d88b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d88ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d88be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88c2:	bf22      	ittt	cs
   d88c4:	1ab6      	subcs	r6, r6, r2
   d88c6:	4675      	movcs	r5, lr
   d88c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d88cc:	085b      	lsrs	r3, r3, #1
   d88ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d88d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d88d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88da:	bf22      	ittt	cs
   d88dc:	1ab6      	subcs	r6, r6, r2
   d88de:	4675      	movcs	r5, lr
   d88e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d88e4:	ea55 0e06 	orrs.w	lr, r5, r6
   d88e8:	d018      	beq.n	d891c <__aeabi_ddiv+0x114>
   d88ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d88ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d88f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d88f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d88fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d88fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8906:	d1c0      	bne.n	d888a <__aeabi_ddiv+0x82>
   d8908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d890c:	d10b      	bne.n	d8926 <__aeabi_ddiv+0x11e>
   d890e:	ea41 0100 	orr.w	r1, r1, r0
   d8912:	f04f 0000 	mov.w	r0, #0
   d8916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d891a:	e7b6      	b.n	d888a <__aeabi_ddiv+0x82>
   d891c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8920:	bf04      	itt	eq
   d8922:	4301      	orreq	r1, r0
   d8924:	2000      	moveq	r0, #0
   d8926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d892a:	bf88      	it	hi
   d892c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8930:	f63f aeaf 	bhi.w	d8692 <__aeabi_dmul+0xde>
   d8934:	ebb5 0c03 	subs.w	ip, r5, r3
   d8938:	bf04      	itt	eq
   d893a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d893e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8942:	f150 0000 	adcs.w	r0, r0, #0
   d8946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d894a:	bd70      	pop	{r4, r5, r6, pc}
   d894c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8958:	bfc2      	ittt	gt
   d895a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d895e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8962:	bd70      	popgt	{r4, r5, r6, pc}
   d8964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8968:	f04f 0e00 	mov.w	lr, #0
   d896c:	3c01      	subs	r4, #1
   d896e:	e690      	b.n	d8692 <__aeabi_dmul+0xde>
   d8970:	ea45 0e06 	orr.w	lr, r5, r6
   d8974:	e68d      	b.n	d8692 <__aeabi_dmul+0xde>
   d8976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d897a:	ea94 0f0c 	teq	r4, ip
   d897e:	bf08      	it	eq
   d8980:	ea95 0f0c 	teqeq	r5, ip
   d8984:	f43f af3b 	beq.w	d87fe <__aeabi_dmul+0x24a>
   d8988:	ea94 0f0c 	teq	r4, ip
   d898c:	d10a      	bne.n	d89a4 <__aeabi_ddiv+0x19c>
   d898e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8992:	f47f af34 	bne.w	d87fe <__aeabi_dmul+0x24a>
   d8996:	ea95 0f0c 	teq	r5, ip
   d899a:	f47f af25 	bne.w	d87e8 <__aeabi_dmul+0x234>
   d899e:	4610      	mov	r0, r2
   d89a0:	4619      	mov	r1, r3
   d89a2:	e72c      	b.n	d87fe <__aeabi_dmul+0x24a>
   d89a4:	ea95 0f0c 	teq	r5, ip
   d89a8:	d106      	bne.n	d89b8 <__aeabi_ddiv+0x1b0>
   d89aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d89ae:	f43f aefd 	beq.w	d87ac <__aeabi_dmul+0x1f8>
   d89b2:	4610      	mov	r0, r2
   d89b4:	4619      	mov	r1, r3
   d89b6:	e722      	b.n	d87fe <__aeabi_dmul+0x24a>
   d89b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89bc:	bf18      	it	ne
   d89be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89c2:	f47f aec5 	bne.w	d8750 <__aeabi_dmul+0x19c>
   d89c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d89ca:	f47f af0d 	bne.w	d87e8 <__aeabi_dmul+0x234>
   d89ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d89d2:	f47f aeeb 	bne.w	d87ac <__aeabi_dmul+0x1f8>
   d89d6:	e712      	b.n	d87fe <__aeabi_dmul+0x24a>

000d89d8 <__gedf2>:
   d89d8:	f04f 3cff 	mov.w	ip, #4294967295
   d89dc:	e006      	b.n	d89ec <__cmpdf2+0x4>
   d89de:	bf00      	nop

000d89e0 <__ledf2>:
   d89e0:	f04f 0c01 	mov.w	ip, #1
   d89e4:	e002      	b.n	d89ec <__cmpdf2+0x4>
   d89e6:	bf00      	nop

000d89e8 <__cmpdf2>:
   d89e8:	f04f 0c01 	mov.w	ip, #1
   d89ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   d89f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d89fc:	bf18      	it	ne
   d89fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8a02:	d01b      	beq.n	d8a3c <__cmpdf2+0x54>
   d8a04:	b001      	add	sp, #4
   d8a06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8a0a:	bf0c      	ite	eq
   d8a0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8a10:	ea91 0f03 	teqne	r1, r3
   d8a14:	bf02      	ittt	eq
   d8a16:	ea90 0f02 	teqeq	r0, r2
   d8a1a:	2000      	moveq	r0, #0
   d8a1c:	4770      	bxeq	lr
   d8a1e:	f110 0f00 	cmn.w	r0, #0
   d8a22:	ea91 0f03 	teq	r1, r3
   d8a26:	bf58      	it	pl
   d8a28:	4299      	cmppl	r1, r3
   d8a2a:	bf08      	it	eq
   d8a2c:	4290      	cmpeq	r0, r2
   d8a2e:	bf2c      	ite	cs
   d8a30:	17d8      	asrcs	r0, r3, #31
   d8a32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8a36:	f040 0001 	orr.w	r0, r0, #1
   d8a3a:	4770      	bx	lr
   d8a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a44:	d102      	bne.n	d8a4c <__cmpdf2+0x64>
   d8a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a4a:	d107      	bne.n	d8a5c <__cmpdf2+0x74>
   d8a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a54:	d1d6      	bne.n	d8a04 <__cmpdf2+0x1c>
   d8a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a5a:	d0d3      	beq.n	d8a04 <__cmpdf2+0x1c>
   d8a5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8a60:	4770      	bx	lr
   d8a62:	bf00      	nop

000d8a64 <__aeabi_cdrcmple>:
   d8a64:	4684      	mov	ip, r0
   d8a66:	4610      	mov	r0, r2
   d8a68:	4662      	mov	r2, ip
   d8a6a:	468c      	mov	ip, r1
   d8a6c:	4619      	mov	r1, r3
   d8a6e:	4663      	mov	r3, ip
   d8a70:	e000      	b.n	d8a74 <__aeabi_cdcmpeq>
   d8a72:	bf00      	nop

000d8a74 <__aeabi_cdcmpeq>:
   d8a74:	b501      	push	{r0, lr}
   d8a76:	f7ff ffb7 	bl	d89e8 <__cmpdf2>
   d8a7a:	2800      	cmp	r0, #0
   d8a7c:	bf48      	it	mi
   d8a7e:	f110 0f00 	cmnmi.w	r0, #0
   d8a82:	bd01      	pop	{r0, pc}

000d8a84 <__aeabi_dcmpeq>:
   d8a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a88:	f7ff fff4 	bl	d8a74 <__aeabi_cdcmpeq>
   d8a8c:	bf0c      	ite	eq
   d8a8e:	2001      	moveq	r0, #1
   d8a90:	2000      	movne	r0, #0
   d8a92:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a96:	bf00      	nop

000d8a98 <__aeabi_dcmplt>:
   d8a98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a9c:	f7ff ffea 	bl	d8a74 <__aeabi_cdcmpeq>
   d8aa0:	bf34      	ite	cc
   d8aa2:	2001      	movcc	r0, #1
   d8aa4:	2000      	movcs	r0, #0
   d8aa6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aaa:	bf00      	nop

000d8aac <__aeabi_dcmple>:
   d8aac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ab0:	f7ff ffe0 	bl	d8a74 <__aeabi_cdcmpeq>
   d8ab4:	bf94      	ite	ls
   d8ab6:	2001      	movls	r0, #1
   d8ab8:	2000      	movhi	r0, #0
   d8aba:	f85d fb08 	ldr.w	pc, [sp], #8
   d8abe:	bf00      	nop

000d8ac0 <__aeabi_dcmpge>:
   d8ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ac4:	f7ff ffce 	bl	d8a64 <__aeabi_cdrcmple>
   d8ac8:	bf94      	ite	ls
   d8aca:	2001      	movls	r0, #1
   d8acc:	2000      	movhi	r0, #0
   d8ace:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ad2:	bf00      	nop

000d8ad4 <__aeabi_dcmpgt>:
   d8ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ad8:	f7ff ffc4 	bl	d8a64 <__aeabi_cdrcmple>
   d8adc:	bf34      	ite	cc
   d8ade:	2001      	movcc	r0, #1
   d8ae0:	2000      	movcs	r0, #0
   d8ae2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ae6:	bf00      	nop

000d8ae8 <__aeabi_dcmpun>:
   d8ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8af0:	d102      	bne.n	d8af8 <__aeabi_dcmpun+0x10>
   d8af2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8af6:	d10a      	bne.n	d8b0e <__aeabi_dcmpun+0x26>
   d8af8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b00:	d102      	bne.n	d8b08 <__aeabi_dcmpun+0x20>
   d8b02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b06:	d102      	bne.n	d8b0e <__aeabi_dcmpun+0x26>
   d8b08:	f04f 0000 	mov.w	r0, #0
   d8b0c:	4770      	bx	lr
   d8b0e:	f04f 0001 	mov.w	r0, #1
   d8b12:	4770      	bx	lr

000d8b14 <__aeabi_d2iz>:
   d8b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b1c:	d215      	bcs.n	d8b4a <__aeabi_d2iz+0x36>
   d8b1e:	d511      	bpl.n	d8b44 <__aeabi_d2iz+0x30>
   d8b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b28:	d912      	bls.n	d8b50 <__aeabi_d2iz+0x3c>
   d8b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b3a:	fa23 f002 	lsr.w	r0, r3, r2
   d8b3e:	bf18      	it	ne
   d8b40:	4240      	negne	r0, r0
   d8b42:	4770      	bx	lr
   d8b44:	f04f 0000 	mov.w	r0, #0
   d8b48:	4770      	bx	lr
   d8b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b4e:	d105      	bne.n	d8b5c <__aeabi_d2iz+0x48>
   d8b50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8b54:	bf08      	it	eq
   d8b56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8b5a:	4770      	bx	lr
   d8b5c:	f04f 0000 	mov.w	r0, #0
   d8b60:	4770      	bx	lr
   d8b62:	bf00      	nop

000d8b64 <__aeabi_d2uiz>:
   d8b64:	004a      	lsls	r2, r1, #1
   d8b66:	d211      	bcs.n	d8b8c <__aeabi_d2uiz+0x28>
   d8b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b6c:	d211      	bcs.n	d8b92 <__aeabi_d2uiz+0x2e>
   d8b6e:	d50d      	bpl.n	d8b8c <__aeabi_d2uiz+0x28>
   d8b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b78:	d40e      	bmi.n	d8b98 <__aeabi_d2uiz+0x34>
   d8b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b86:	fa23 f002 	lsr.w	r0, r3, r2
   d8b8a:	4770      	bx	lr
   d8b8c:	f04f 0000 	mov.w	r0, #0
   d8b90:	4770      	bx	lr
   d8b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b96:	d102      	bne.n	d8b9e <__aeabi_d2uiz+0x3a>
   d8b98:	f04f 30ff 	mov.w	r0, #4294967295
   d8b9c:	4770      	bx	lr
   d8b9e:	f04f 0000 	mov.w	r0, #0
   d8ba2:	4770      	bx	lr

000d8ba4 <__aeabi_d2f>:
   d8ba4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ba8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8bac:	bf24      	itt	cs
   d8bae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8bb2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8bb6:	d90d      	bls.n	d8bd4 <__aeabi_d2f+0x30>
   d8bb8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8bbc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8bc0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8bc4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8bc8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8bcc:	bf08      	it	eq
   d8bce:	f020 0001 	biceq.w	r0, r0, #1
   d8bd2:	4770      	bx	lr
   d8bd4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8bd8:	d121      	bne.n	d8c1e <__aeabi_d2f+0x7a>
   d8bda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8bde:	bfbc      	itt	lt
   d8be0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8be4:	4770      	bxlt	lr
   d8be6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8bee:	f1c2 0218 	rsb	r2, r2, #24
   d8bf2:	f1c2 0c20 	rsb	ip, r2, #32
   d8bf6:	fa10 f30c 	lsls.w	r3, r0, ip
   d8bfa:	fa20 f002 	lsr.w	r0, r0, r2
   d8bfe:	bf18      	it	ne
   d8c00:	f040 0001 	orrne.w	r0, r0, #1
   d8c04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8c0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8c10:	ea40 000c 	orr.w	r0, r0, ip
   d8c14:	fa23 f302 	lsr.w	r3, r3, r2
   d8c18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8c1c:	e7cc      	b.n	d8bb8 <__aeabi_d2f+0x14>
   d8c1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8c22:	d107      	bne.n	d8c34 <__aeabi_d2f+0x90>
   d8c24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8c28:	bf1e      	ittt	ne
   d8c2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8c2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8c32:	4770      	bxne	lr
   d8c34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8c38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c40:	4770      	bx	lr
   d8c42:	bf00      	nop

000d8c44 <__aeabi_frsub>:
   d8c44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8c48:	e002      	b.n	d8c50 <__addsf3>
   d8c4a:	bf00      	nop

000d8c4c <__aeabi_fsub>:
   d8c4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8c50 <__addsf3>:
   d8c50:	0042      	lsls	r2, r0, #1
   d8c52:	bf1f      	itttt	ne
   d8c54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8c58:	ea92 0f03 	teqne	r2, r3
   d8c5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8c60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8c64:	d06a      	beq.n	d8d3c <__addsf3+0xec>
   d8c66:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8c6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8c6e:	bfc1      	itttt	gt
   d8c70:	18d2      	addgt	r2, r2, r3
   d8c72:	4041      	eorgt	r1, r0
   d8c74:	4048      	eorgt	r0, r1
   d8c76:	4041      	eorgt	r1, r0
   d8c78:	bfb8      	it	lt
   d8c7a:	425b      	neglt	r3, r3
   d8c7c:	2b19      	cmp	r3, #25
   d8c7e:	bf88      	it	hi
   d8c80:	4770      	bxhi	lr
   d8c82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d8c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8c8e:	bf18      	it	ne
   d8c90:	4240      	negne	r0, r0
   d8c92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8c96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8c9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8c9e:	bf18      	it	ne
   d8ca0:	4249      	negne	r1, r1
   d8ca2:	ea92 0f03 	teq	r2, r3
   d8ca6:	d03f      	beq.n	d8d28 <__addsf3+0xd8>
   d8ca8:	f1a2 0201 	sub.w	r2, r2, #1
   d8cac:	fa41 fc03 	asr.w	ip, r1, r3
   d8cb0:	eb10 000c 	adds.w	r0, r0, ip
   d8cb4:	f1c3 0320 	rsb	r3, r3, #32
   d8cb8:	fa01 f103 	lsl.w	r1, r1, r3
   d8cbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8cc0:	d502      	bpl.n	d8cc8 <__addsf3+0x78>
   d8cc2:	4249      	negs	r1, r1
   d8cc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d8cc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d8ccc:	d313      	bcc.n	d8cf6 <__addsf3+0xa6>
   d8cce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d8cd2:	d306      	bcc.n	d8ce2 <__addsf3+0x92>
   d8cd4:	0840      	lsrs	r0, r0, #1
   d8cd6:	ea4f 0131 	mov.w	r1, r1, rrx
   d8cda:	f102 0201 	add.w	r2, r2, #1
   d8cde:	2afe      	cmp	r2, #254	; 0xfe
   d8ce0:	d251      	bcs.n	d8d86 <__addsf3+0x136>
   d8ce2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d8ce6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d8cea:	bf08      	it	eq
   d8cec:	f020 0001 	biceq.w	r0, r0, #1
   d8cf0:	ea40 0003 	orr.w	r0, r0, r3
   d8cf4:	4770      	bx	lr
   d8cf6:	0049      	lsls	r1, r1, #1
   d8cf8:	eb40 0000 	adc.w	r0, r0, r0
   d8cfc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d8d00:	f1a2 0201 	sub.w	r2, r2, #1
   d8d04:	d1ed      	bne.n	d8ce2 <__addsf3+0x92>
   d8d06:	fab0 fc80 	clz	ip, r0
   d8d0a:	f1ac 0c08 	sub.w	ip, ip, #8
   d8d0e:	ebb2 020c 	subs.w	r2, r2, ip
   d8d12:	fa00 f00c 	lsl.w	r0, r0, ip
   d8d16:	bfaa      	itet	ge
   d8d18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d8d1c:	4252      	neglt	r2, r2
   d8d1e:	4318      	orrge	r0, r3
   d8d20:	bfbc      	itt	lt
   d8d22:	40d0      	lsrlt	r0, r2
   d8d24:	4318      	orrlt	r0, r3
   d8d26:	4770      	bx	lr
   d8d28:	f092 0f00 	teq	r2, #0
   d8d2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d8d30:	bf06      	itte	eq
   d8d32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d8d36:	3201      	addeq	r2, #1
   d8d38:	3b01      	subne	r3, #1
   d8d3a:	e7b5      	b.n	d8ca8 <__addsf3+0x58>
   d8d3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d8d40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d8d44:	bf18      	it	ne
   d8d46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8d4a:	d021      	beq.n	d8d90 <__addsf3+0x140>
   d8d4c:	ea92 0f03 	teq	r2, r3
   d8d50:	d004      	beq.n	d8d5c <__addsf3+0x10c>
   d8d52:	f092 0f00 	teq	r2, #0
   d8d56:	bf08      	it	eq
   d8d58:	4608      	moveq	r0, r1
   d8d5a:	4770      	bx	lr
   d8d5c:	ea90 0f01 	teq	r0, r1
   d8d60:	bf1c      	itt	ne
   d8d62:	2000      	movne	r0, #0
   d8d64:	4770      	bxne	lr
   d8d66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d8d6a:	d104      	bne.n	d8d76 <__addsf3+0x126>
   d8d6c:	0040      	lsls	r0, r0, #1
   d8d6e:	bf28      	it	cs
   d8d70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d8d74:	4770      	bx	lr
   d8d76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d8d7a:	bf3c      	itt	cc
   d8d7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d8d80:	4770      	bxcc	lr
   d8d82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8d86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d8d8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8d8e:	4770      	bx	lr
   d8d90:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d8d94:	bf16      	itet	ne
   d8d96:	4608      	movne	r0, r1
   d8d98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d8d9c:	4601      	movne	r1, r0
   d8d9e:	0242      	lsls	r2, r0, #9
   d8da0:	bf06      	itte	eq
   d8da2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d8da6:	ea90 0f01 	teqeq	r0, r1
   d8daa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d8dae:	4770      	bx	lr

000d8db0 <__aeabi_ui2f>:
   d8db0:	f04f 0300 	mov.w	r3, #0
   d8db4:	e004      	b.n	d8dc0 <__aeabi_i2f+0x8>
   d8db6:	bf00      	nop

000d8db8 <__aeabi_i2f>:
   d8db8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d8dbc:	bf48      	it	mi
   d8dbe:	4240      	negmi	r0, r0
   d8dc0:	ea5f 0c00 	movs.w	ip, r0
   d8dc4:	bf08      	it	eq
   d8dc6:	4770      	bxeq	lr
   d8dc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d8dcc:	4601      	mov	r1, r0
   d8dce:	f04f 0000 	mov.w	r0, #0
   d8dd2:	e01c      	b.n	d8e0e <__aeabi_l2f+0x2a>

000d8dd4 <__aeabi_ul2f>:
   d8dd4:	ea50 0201 	orrs.w	r2, r0, r1
   d8dd8:	bf08      	it	eq
   d8dda:	4770      	bxeq	lr
   d8ddc:	f04f 0300 	mov.w	r3, #0
   d8de0:	e00a      	b.n	d8df8 <__aeabi_l2f+0x14>
   d8de2:	bf00      	nop

000d8de4 <__aeabi_l2f>:
   d8de4:	ea50 0201 	orrs.w	r2, r0, r1
   d8de8:	bf08      	it	eq
   d8dea:	4770      	bxeq	lr
   d8dec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d8df0:	d502      	bpl.n	d8df8 <__aeabi_l2f+0x14>
   d8df2:	4240      	negs	r0, r0
   d8df4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8df8:	ea5f 0c01 	movs.w	ip, r1
   d8dfc:	bf02      	ittt	eq
   d8dfe:	4684      	moveq	ip, r0
   d8e00:	4601      	moveq	r1, r0
   d8e02:	2000      	moveq	r0, #0
   d8e04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d8e08:	bf08      	it	eq
   d8e0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d8e0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d8e12:	fabc f28c 	clz	r2, ip
   d8e16:	3a08      	subs	r2, #8
   d8e18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d8e1c:	db10      	blt.n	d8e40 <__aeabi_l2f+0x5c>
   d8e1e:	fa01 fc02 	lsl.w	ip, r1, r2
   d8e22:	4463      	add	r3, ip
   d8e24:	fa00 fc02 	lsl.w	ip, r0, r2
   d8e28:	f1c2 0220 	rsb	r2, r2, #32
   d8e2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8e30:	fa20 f202 	lsr.w	r2, r0, r2
   d8e34:	eb43 0002 	adc.w	r0, r3, r2
   d8e38:	bf08      	it	eq
   d8e3a:	f020 0001 	biceq.w	r0, r0, #1
   d8e3e:	4770      	bx	lr
   d8e40:	f102 0220 	add.w	r2, r2, #32
   d8e44:	fa01 fc02 	lsl.w	ip, r1, r2
   d8e48:	f1c2 0220 	rsb	r2, r2, #32
   d8e4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d8e50:	fa21 f202 	lsr.w	r2, r1, r2
   d8e54:	eb43 0002 	adc.w	r0, r3, r2
   d8e58:	bf08      	it	eq
   d8e5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d8e5e:	4770      	bx	lr

000d8e60 <__aeabi_uldivmod>:
   d8e60:	b953      	cbnz	r3, d8e78 <__aeabi_uldivmod+0x18>
   d8e62:	b94a      	cbnz	r2, d8e78 <__aeabi_uldivmod+0x18>
   d8e64:	2900      	cmp	r1, #0
   d8e66:	bf08      	it	eq
   d8e68:	2800      	cmpeq	r0, #0
   d8e6a:	bf1c      	itt	ne
   d8e6c:	f04f 31ff 	movne.w	r1, #4294967295
   d8e70:	f04f 30ff 	movne.w	r0, #4294967295
   d8e74:	f000 b97e 	b.w	d9174 <__aeabi_idiv0>
   d8e78:	f1ad 0c08 	sub.w	ip, sp, #8
   d8e7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8e80:	f000 f806 	bl	d8e90 <__udivmoddi4>
   d8e84:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8e8c:	b004      	add	sp, #16
   d8e8e:	4770      	bx	lr

000d8e90 <__udivmoddi4>:
   d8e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e94:	468c      	mov	ip, r1
   d8e96:	460e      	mov	r6, r1
   d8e98:	4604      	mov	r4, r0
   d8e9a:	9d08      	ldr	r5, [sp, #32]
   d8e9c:	2b00      	cmp	r3, #0
   d8e9e:	d150      	bne.n	d8f42 <__udivmoddi4+0xb2>
   d8ea0:	428a      	cmp	r2, r1
   d8ea2:	4617      	mov	r7, r2
   d8ea4:	d96c      	bls.n	d8f80 <__udivmoddi4+0xf0>
   d8ea6:	fab2 fe82 	clz	lr, r2
   d8eaa:	f1be 0f00 	cmp.w	lr, #0
   d8eae:	d00b      	beq.n	d8ec8 <__udivmoddi4+0x38>
   d8eb0:	f1ce 0420 	rsb	r4, lr, #32
   d8eb4:	fa20 f404 	lsr.w	r4, r0, r4
   d8eb8:	fa01 f60e 	lsl.w	r6, r1, lr
   d8ebc:	ea44 0c06 	orr.w	ip, r4, r6
   d8ec0:	fa02 f70e 	lsl.w	r7, r2, lr
   d8ec4:	fa00 f40e 	lsl.w	r4, r0, lr
   d8ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8ecc:	0c22      	lsrs	r2, r4, #16
   d8ece:	fbbc f0f9 	udiv	r0, ip, r9
   d8ed2:	fa1f f887 	uxth.w	r8, r7
   d8ed6:	fb09 c610 	mls	r6, r9, r0, ip
   d8eda:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8ede:	fb00 f308 	mul.w	r3, r0, r8
   d8ee2:	42b3      	cmp	r3, r6
   d8ee4:	d909      	bls.n	d8efa <__udivmoddi4+0x6a>
   d8ee6:	19f6      	adds	r6, r6, r7
   d8ee8:	f100 32ff 	add.w	r2, r0, #4294967295
   d8eec:	f080 8122 	bcs.w	d9134 <__udivmoddi4+0x2a4>
   d8ef0:	42b3      	cmp	r3, r6
   d8ef2:	f240 811f 	bls.w	d9134 <__udivmoddi4+0x2a4>
   d8ef6:	3802      	subs	r0, #2
   d8ef8:	443e      	add	r6, r7
   d8efa:	1af6      	subs	r6, r6, r3
   d8efc:	b2a2      	uxth	r2, r4
   d8efe:	fbb6 f3f9 	udiv	r3, r6, r9
   d8f02:	fb09 6613 	mls	r6, r9, r3, r6
   d8f06:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8f0a:	fb03 f808 	mul.w	r8, r3, r8
   d8f0e:	45a0      	cmp	r8, r4
   d8f10:	d909      	bls.n	d8f26 <__udivmoddi4+0x96>
   d8f12:	19e4      	adds	r4, r4, r7
   d8f14:	f103 32ff 	add.w	r2, r3, #4294967295
   d8f18:	f080 810a 	bcs.w	d9130 <__udivmoddi4+0x2a0>
   d8f1c:	45a0      	cmp	r8, r4
   d8f1e:	f240 8107 	bls.w	d9130 <__udivmoddi4+0x2a0>
   d8f22:	3b02      	subs	r3, #2
   d8f24:	443c      	add	r4, r7
   d8f26:	ebc8 0404 	rsb	r4, r8, r4
   d8f2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8f2e:	2100      	movs	r1, #0
   d8f30:	2d00      	cmp	r5, #0
   d8f32:	d062      	beq.n	d8ffa <__udivmoddi4+0x16a>
   d8f34:	fa24 f40e 	lsr.w	r4, r4, lr
   d8f38:	2300      	movs	r3, #0
   d8f3a:	602c      	str	r4, [r5, #0]
   d8f3c:	606b      	str	r3, [r5, #4]
   d8f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f42:	428b      	cmp	r3, r1
   d8f44:	d907      	bls.n	d8f56 <__udivmoddi4+0xc6>
   d8f46:	2d00      	cmp	r5, #0
   d8f48:	d055      	beq.n	d8ff6 <__udivmoddi4+0x166>
   d8f4a:	2100      	movs	r1, #0
   d8f4c:	e885 0041 	stmia.w	r5, {r0, r6}
   d8f50:	4608      	mov	r0, r1
   d8f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f56:	fab3 f183 	clz	r1, r3
   d8f5a:	2900      	cmp	r1, #0
   d8f5c:	f040 8090 	bne.w	d9080 <__udivmoddi4+0x1f0>
   d8f60:	42b3      	cmp	r3, r6
   d8f62:	d302      	bcc.n	d8f6a <__udivmoddi4+0xda>
   d8f64:	4282      	cmp	r2, r0
   d8f66:	f200 80f8 	bhi.w	d915a <__udivmoddi4+0x2ca>
   d8f6a:	1a84      	subs	r4, r0, r2
   d8f6c:	eb66 0603 	sbc.w	r6, r6, r3
   d8f70:	2001      	movs	r0, #1
   d8f72:	46b4      	mov	ip, r6
   d8f74:	2d00      	cmp	r5, #0
   d8f76:	d040      	beq.n	d8ffa <__udivmoddi4+0x16a>
   d8f78:	e885 1010 	stmia.w	r5, {r4, ip}
   d8f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f80:	b912      	cbnz	r2, d8f88 <__udivmoddi4+0xf8>
   d8f82:	2701      	movs	r7, #1
   d8f84:	fbb7 f7f2 	udiv	r7, r7, r2
   d8f88:	fab7 fe87 	clz	lr, r7
   d8f8c:	f1be 0f00 	cmp.w	lr, #0
   d8f90:	d135      	bne.n	d8ffe <__udivmoddi4+0x16e>
   d8f92:	1bf3      	subs	r3, r6, r7
   d8f94:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8f98:	fa1f fc87 	uxth.w	ip, r7
   d8f9c:	2101      	movs	r1, #1
   d8f9e:	fbb3 f0f8 	udiv	r0, r3, r8
   d8fa2:	0c22      	lsrs	r2, r4, #16
   d8fa4:	fb08 3610 	mls	r6, r8, r0, r3
   d8fa8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8fac:	fb0c f300 	mul.w	r3, ip, r0
   d8fb0:	42b3      	cmp	r3, r6
   d8fb2:	d907      	bls.n	d8fc4 <__udivmoddi4+0x134>
   d8fb4:	19f6      	adds	r6, r6, r7
   d8fb6:	f100 32ff 	add.w	r2, r0, #4294967295
   d8fba:	d202      	bcs.n	d8fc2 <__udivmoddi4+0x132>
   d8fbc:	42b3      	cmp	r3, r6
   d8fbe:	f200 80ce 	bhi.w	d915e <__udivmoddi4+0x2ce>
   d8fc2:	4610      	mov	r0, r2
   d8fc4:	1af6      	subs	r6, r6, r3
   d8fc6:	b2a2      	uxth	r2, r4
   d8fc8:	fbb6 f3f8 	udiv	r3, r6, r8
   d8fcc:	fb08 6613 	mls	r6, r8, r3, r6
   d8fd0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8fd4:	fb0c fc03 	mul.w	ip, ip, r3
   d8fd8:	45a4      	cmp	ip, r4
   d8fda:	d907      	bls.n	d8fec <__udivmoddi4+0x15c>
   d8fdc:	19e4      	adds	r4, r4, r7
   d8fde:	f103 32ff 	add.w	r2, r3, #4294967295
   d8fe2:	d202      	bcs.n	d8fea <__udivmoddi4+0x15a>
   d8fe4:	45a4      	cmp	ip, r4
   d8fe6:	f200 80b5 	bhi.w	d9154 <__udivmoddi4+0x2c4>
   d8fea:	4613      	mov	r3, r2
   d8fec:	ebcc 0404 	rsb	r4, ip, r4
   d8ff0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8ff4:	e79c      	b.n	d8f30 <__udivmoddi4+0xa0>
   d8ff6:	4629      	mov	r1, r5
   d8ff8:	4628      	mov	r0, r5
   d8ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ffe:	f1ce 0120 	rsb	r1, lr, #32
   d9002:	fa06 f30e 	lsl.w	r3, r6, lr
   d9006:	fa07 f70e 	lsl.w	r7, r7, lr
   d900a:	fa20 f901 	lsr.w	r9, r0, r1
   d900e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9012:	40ce      	lsrs	r6, r1
   d9014:	ea49 0903 	orr.w	r9, r9, r3
   d9018:	fbb6 faf8 	udiv	sl, r6, r8
   d901c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9020:	fb08 661a 	mls	r6, r8, sl, r6
   d9024:	fa1f fc87 	uxth.w	ip, r7
   d9028:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d902c:	fb0a f20c 	mul.w	r2, sl, ip
   d9030:	429a      	cmp	r2, r3
   d9032:	fa00 f40e 	lsl.w	r4, r0, lr
   d9036:	d90a      	bls.n	d904e <__udivmoddi4+0x1be>
   d9038:	19db      	adds	r3, r3, r7
   d903a:	f10a 31ff 	add.w	r1, sl, #4294967295
   d903e:	f080 8087 	bcs.w	d9150 <__udivmoddi4+0x2c0>
   d9042:	429a      	cmp	r2, r3
   d9044:	f240 8084 	bls.w	d9150 <__udivmoddi4+0x2c0>
   d9048:	f1aa 0a02 	sub.w	sl, sl, #2
   d904c:	443b      	add	r3, r7
   d904e:	1a9b      	subs	r3, r3, r2
   d9050:	fa1f f989 	uxth.w	r9, r9
   d9054:	fbb3 f1f8 	udiv	r1, r3, r8
   d9058:	fb08 3311 	mls	r3, r8, r1, r3
   d905c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9060:	fb01 f60c 	mul.w	r6, r1, ip
   d9064:	429e      	cmp	r6, r3
   d9066:	d907      	bls.n	d9078 <__udivmoddi4+0x1e8>
   d9068:	19db      	adds	r3, r3, r7
   d906a:	f101 32ff 	add.w	r2, r1, #4294967295
   d906e:	d26b      	bcs.n	d9148 <__udivmoddi4+0x2b8>
   d9070:	429e      	cmp	r6, r3
   d9072:	d969      	bls.n	d9148 <__udivmoddi4+0x2b8>
   d9074:	3902      	subs	r1, #2
   d9076:	443b      	add	r3, r7
   d9078:	1b9b      	subs	r3, r3, r6
   d907a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d907e:	e78e      	b.n	d8f9e <__udivmoddi4+0x10e>
   d9080:	f1c1 0e20 	rsb	lr, r1, #32
   d9084:	fa22 f40e 	lsr.w	r4, r2, lr
   d9088:	408b      	lsls	r3, r1
   d908a:	4323      	orrs	r3, r4
   d908c:	fa20 f70e 	lsr.w	r7, r0, lr
   d9090:	fa06 f401 	lsl.w	r4, r6, r1
   d9094:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d9098:	fa26 f60e 	lsr.w	r6, r6, lr
   d909c:	433c      	orrs	r4, r7
   d909e:	fbb6 f9fc 	udiv	r9, r6, ip
   d90a2:	0c27      	lsrs	r7, r4, #16
   d90a4:	fb0c 6619 	mls	r6, ip, r9, r6
   d90a8:	fa1f f883 	uxth.w	r8, r3
   d90ac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d90b0:	fb09 f708 	mul.w	r7, r9, r8
   d90b4:	42b7      	cmp	r7, r6
   d90b6:	fa02 f201 	lsl.w	r2, r2, r1
   d90ba:	fa00 fa01 	lsl.w	sl, r0, r1
   d90be:	d908      	bls.n	d90d2 <__udivmoddi4+0x242>
   d90c0:	18f6      	adds	r6, r6, r3
   d90c2:	f109 30ff 	add.w	r0, r9, #4294967295
   d90c6:	d241      	bcs.n	d914c <__udivmoddi4+0x2bc>
   d90c8:	42b7      	cmp	r7, r6
   d90ca:	d93f      	bls.n	d914c <__udivmoddi4+0x2bc>
   d90cc:	f1a9 0902 	sub.w	r9, r9, #2
   d90d0:	441e      	add	r6, r3
   d90d2:	1bf6      	subs	r6, r6, r7
   d90d4:	b2a0      	uxth	r0, r4
   d90d6:	fbb6 f4fc 	udiv	r4, r6, ip
   d90da:	fb0c 6614 	mls	r6, ip, r4, r6
   d90de:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d90e2:	fb04 f808 	mul.w	r8, r4, r8
   d90e6:	45b8      	cmp	r8, r7
   d90e8:	d907      	bls.n	d90fa <__udivmoddi4+0x26a>
   d90ea:	18ff      	adds	r7, r7, r3
   d90ec:	f104 30ff 	add.w	r0, r4, #4294967295
   d90f0:	d228      	bcs.n	d9144 <__udivmoddi4+0x2b4>
   d90f2:	45b8      	cmp	r8, r7
   d90f4:	d926      	bls.n	d9144 <__udivmoddi4+0x2b4>
   d90f6:	3c02      	subs	r4, #2
   d90f8:	441f      	add	r7, r3
   d90fa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d90fe:	ebc8 0707 	rsb	r7, r8, r7
   d9102:	fba0 8902 	umull	r8, r9, r0, r2
   d9106:	454f      	cmp	r7, r9
   d9108:	4644      	mov	r4, r8
   d910a:	464e      	mov	r6, r9
   d910c:	d314      	bcc.n	d9138 <__udivmoddi4+0x2a8>
   d910e:	d029      	beq.n	d9164 <__udivmoddi4+0x2d4>
   d9110:	b365      	cbz	r5, d916c <__udivmoddi4+0x2dc>
   d9112:	ebba 0304 	subs.w	r3, sl, r4
   d9116:	eb67 0706 	sbc.w	r7, r7, r6
   d911a:	fa07 fe0e 	lsl.w	lr, r7, lr
   d911e:	40cb      	lsrs	r3, r1
   d9120:	40cf      	lsrs	r7, r1
   d9122:	ea4e 0303 	orr.w	r3, lr, r3
   d9126:	e885 0088 	stmia.w	r5, {r3, r7}
   d912a:	2100      	movs	r1, #0
   d912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9130:	4613      	mov	r3, r2
   d9132:	e6f8      	b.n	d8f26 <__udivmoddi4+0x96>
   d9134:	4610      	mov	r0, r2
   d9136:	e6e0      	b.n	d8efa <__udivmoddi4+0x6a>
   d9138:	ebb8 0402 	subs.w	r4, r8, r2
   d913c:	eb69 0603 	sbc.w	r6, r9, r3
   d9140:	3801      	subs	r0, #1
   d9142:	e7e5      	b.n	d9110 <__udivmoddi4+0x280>
   d9144:	4604      	mov	r4, r0
   d9146:	e7d8      	b.n	d90fa <__udivmoddi4+0x26a>
   d9148:	4611      	mov	r1, r2
   d914a:	e795      	b.n	d9078 <__udivmoddi4+0x1e8>
   d914c:	4681      	mov	r9, r0
   d914e:	e7c0      	b.n	d90d2 <__udivmoddi4+0x242>
   d9150:	468a      	mov	sl, r1
   d9152:	e77c      	b.n	d904e <__udivmoddi4+0x1be>
   d9154:	3b02      	subs	r3, #2
   d9156:	443c      	add	r4, r7
   d9158:	e748      	b.n	d8fec <__udivmoddi4+0x15c>
   d915a:	4608      	mov	r0, r1
   d915c:	e70a      	b.n	d8f74 <__udivmoddi4+0xe4>
   d915e:	3802      	subs	r0, #2
   d9160:	443e      	add	r6, r7
   d9162:	e72f      	b.n	d8fc4 <__udivmoddi4+0x134>
   d9164:	45c2      	cmp	sl, r8
   d9166:	d3e7      	bcc.n	d9138 <__udivmoddi4+0x2a8>
   d9168:	463e      	mov	r6, r7
   d916a:	e7d1      	b.n	d9110 <__udivmoddi4+0x280>
   d916c:	4629      	mov	r1, r5
   d916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9172:	bf00      	nop

000d9174 <__aeabi_idiv0>:
   d9174:	4770      	bx	lr
   d9176:	bf00      	nop

000d9178 <__cxa_atexit>:
   d9178:	b510      	push	{r4, lr}
   d917a:	4c05      	ldr	r4, [pc, #20]	; (d9190 <__cxa_atexit+0x18>)
   d917c:	4613      	mov	r3, r2
   d917e:	b12c      	cbz	r4, d918c <__cxa_atexit+0x14>
   d9180:	460a      	mov	r2, r1
   d9182:	4601      	mov	r1, r0
   d9184:	2002      	movs	r0, #2
   d9186:	f3af 8000 	nop.w
   d918a:	bd10      	pop	{r4, pc}
   d918c:	4620      	mov	r0, r4
   d918e:	bd10      	pop	{r4, pc}
   d9190:	00000000 	.word	0x00000000

000d9194 <memcpy>:
   d9194:	b510      	push	{r4, lr}
   d9196:	1e43      	subs	r3, r0, #1
   d9198:	440a      	add	r2, r1
   d919a:	4291      	cmp	r1, r2
   d919c:	d004      	beq.n	d91a8 <memcpy+0x14>
   d919e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91a6:	e7f8      	b.n	d919a <memcpy+0x6>
   d91a8:	bd10      	pop	{r4, pc}

000d91aa <memset>:
   d91aa:	4402      	add	r2, r0
   d91ac:	4603      	mov	r3, r0
   d91ae:	4293      	cmp	r3, r2
   d91b0:	d002      	beq.n	d91b8 <memset+0xe>
   d91b2:	f803 1b01 	strb.w	r1, [r3], #1
   d91b6:	e7fa      	b.n	d91ae <memset+0x4>
   d91b8:	4770      	bx	lr
	...

000d91bc <srand>:
   d91bc:	b538      	push	{r3, r4, r5, lr}
   d91be:	4b12      	ldr	r3, [pc, #72]	; (d9208 <srand+0x4c>)
   d91c0:	681c      	ldr	r4, [r3, #0]
   d91c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d91c4:	4605      	mov	r5, r0
   d91c6:	b9d3      	cbnz	r3, d91fe <srand+0x42>
   d91c8:	2018      	movs	r0, #24
   d91ca:	f7fd f9e3 	bl	d6594 <malloc>
   d91ce:	f243 330e 	movw	r3, #13070	; 0x330e
   d91d2:	63a0      	str	r0, [r4, #56]	; 0x38
   d91d4:	8003      	strh	r3, [r0, #0]
   d91d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d91da:	8043      	strh	r3, [r0, #2]
   d91dc:	f241 2334 	movw	r3, #4660	; 0x1234
   d91e0:	8083      	strh	r3, [r0, #4]
   d91e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d91e6:	80c3      	strh	r3, [r0, #6]
   d91e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d91ec:	8103      	strh	r3, [r0, #8]
   d91ee:	2305      	movs	r3, #5
   d91f0:	8143      	strh	r3, [r0, #10]
   d91f2:	230b      	movs	r3, #11
   d91f4:	8183      	strh	r3, [r0, #12]
   d91f6:	2201      	movs	r2, #1
   d91f8:	2300      	movs	r3, #0
   d91fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d91fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9200:	2200      	movs	r2, #0
   d9202:	611d      	str	r5, [r3, #16]
   d9204:	615a      	str	r2, [r3, #20]
   d9206:	bd38      	pop	{r3, r4, r5, pc}
   d9208:	2003e0c8 	.word	0x2003e0c8

000d920c <strcmp>:
   d920c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9210:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9214:	2a01      	cmp	r2, #1
   d9216:	bf28      	it	cs
   d9218:	429a      	cmpcs	r2, r3
   d921a:	d0f7      	beq.n	d920c <strcmp>
   d921c:	1ad0      	subs	r0, r2, r3
   d921e:	4770      	bx	lr

000d9220 <strcpy>:
   d9220:	4603      	mov	r3, r0
   d9222:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9226:	f803 2b01 	strb.w	r2, [r3], #1
   d922a:	2a00      	cmp	r2, #0
   d922c:	d1f9      	bne.n	d9222 <strcpy+0x2>
   d922e:	4770      	bx	lr

000d9230 <strdup>:
   d9230:	4b02      	ldr	r3, [pc, #8]	; (d923c <strdup+0xc>)
   d9232:	4601      	mov	r1, r0
   d9234:	6818      	ldr	r0, [r3, #0]
   d9236:	f000 b803 	b.w	d9240 <_strdup_r>
   d923a:	bf00      	nop
   d923c:	2003e0c8 	.word	0x2003e0c8

000d9240 <_strdup_r>:
   d9240:	b570      	push	{r4, r5, r6, lr}
   d9242:	4606      	mov	r6, r0
   d9244:	4608      	mov	r0, r1
   d9246:	460c      	mov	r4, r1
   d9248:	f000 f80d 	bl	d9266 <strlen>
   d924c:	1c45      	adds	r5, r0, #1
   d924e:	4629      	mov	r1, r5
   d9250:	4630      	mov	r0, r6
   d9252:	f7fd f9cf 	bl	d65f4 <_malloc_r>
   d9256:	4606      	mov	r6, r0
   d9258:	b118      	cbz	r0, d9262 <_strdup_r+0x22>
   d925a:	462a      	mov	r2, r5
   d925c:	4621      	mov	r1, r4
   d925e:	f7ff ff99 	bl	d9194 <memcpy>
   d9262:	4630      	mov	r0, r6
   d9264:	bd70      	pop	{r4, r5, r6, pc}

000d9266 <strlen>:
   d9266:	4603      	mov	r3, r0
   d9268:	f813 2b01 	ldrb.w	r2, [r3], #1
   d926c:	2a00      	cmp	r2, #0
   d926e:	d1fb      	bne.n	d9268 <strlen+0x2>
   d9270:	1a18      	subs	r0, r3, r0
   d9272:	3801      	subs	r0, #1
   d9274:	4770      	bx	lr

000d9276 <link_code_end>:
	...

000d9278 <dynalib_user>:
   d9278:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9288:	0000 0000 6157 6374 6468 676f 7420 6d69     ....Watchdog tim
   d9298:	6f65 7475 2e00 4100 454e 4f4d 454d 4554     eout...ANEMOMETE
   d92a8:	2052 4400 5448 0020 5245 4f52 3a52 4320     R .DHT .ERROR: C
   d92b8:	756f 646c 6e20 746f 6720 7465 6920 696e     ould not get ini
   d92c8:	6974 6c61 7720 6e69 2064 6572 6461 6e69     tial wind readin
   d92d8:	0067 6544 7065 5320 656c 7065 6620 726f     g.Deep Sleep for
   d92e8:	2520 2064 696d 6c6c 7369 6365 6e6f 7364      %d milliseconds
   d92f8:	4400 7665 6369 2065 4449 203a 7325 5300     .Device ID: %s.S
   d9308:	7379 6574 206d 6576 7372 6f69 3a6e 2520     ystem version: %
   d9318:	0073 6e49 7570 2074 6f56 746c 6761 2065     s.Input Voltage 
   d9328:	694c 696d 3a74 2520 0064 6e49 7570 2074     Limit: %d.Input 
   d9338:	7543 7272 6e65 2074 694c 696d 3a74 2520     Current Limit: %
   d9348:	0064 694d 696e 756d 206d 7953 7473 6d65     d.Minimum System
   d9358:	5620 6c6f 6174 6567 203a 6425 4300 6168      Voltage: %d.Cha
   d9368:	6772 2065 7543 7272 6e65 3a74 2520 0064     rge Current: %d.
   d9378:	6843 7261 6567 5620 6c6f 6174 6567 203a     Charge Voltage: 
   d9388:	6425 4300 6168 6772 3a65 0020 6f56 746c     %d.Charge: .Volt
   d9398:	6761 3a65 0020 6f43 706d 7361 2073 6e69     age: .Compass in
   d93a8:	7469 6169 696c 697a 676e 4300 6d6f 6170     itializing.Compa
   d93b8:	7373 6920 696e 6974 6c61 6465 5800 203a     ss initialed.X: 
   d93c8:	6425 202c 3a59 2520 2c64 5a20 203a 6425     %d, Y: %d, Z: %d
   d93d8:	4400 4545 0050 494c 4847 0054 5320 454c     .DEEP.LIGHT. SLE
   d93e8:	5045 0020 5544 4152 4954 4e4f 0020 4553     EP .DURATION .SE
   d93f8:	5454 4e49 5347 5520 4450 5441 3a45 0020     TTINGS UPDATE: .
   d9408:	6553 7474 6e69 7367 4200 4f52 4e57 554f     Settings.BROWNOU
   d9418:	2054 2500 3a66 6425 4200 6f72 6e77 756f     T .%f:%d.Brownou
   d9428:	0074 7061 7770 7464 4300 6e6f 6966 7567     t.appwdt.Configu
   d9438:	6972 676e 5120 434d 3835 3338 204c 202d     ring QMC5883L - 
   d9448:	534f 2052 3135 2c32 7220 6e61 6567 2b20     OSR 512, range +
   d9458:	2d2f 2032 6147 7375 2c73 4f20 5244 3120     /-2 Gauss, ODR 1
   d9468:	2c30 4320 6e6f 6974 756e 756f 0073 7274     0, Continuous.tr
   d9478:	6575 5300 5641 4e49 2047 4553 5454 4e49     ue.SAVING SETTIN
   d9488:	5347 0020 6576 7372 6f69 006e 7262 776f     GS .version.brow
   d9498:	6f6e 7475 6200 6f72 6e77 756f 5674 6c6f     nout.brownoutVol
   d94a8:	6174 6567 6200 6f72 6e77 756f 4d74 6e69     tage.brownoutMin
   d94b8:	7475 7365 7300 656c 7065 6954 656d 6400     utes.sleepTime.d
   d94c8:	6169 6e67 736f 7469 6369 7943 6c63 7365     iagnositicCycles
   d94d8:	7500 6573 6544 7065 6c53 6565 0070 2222     .useDeepSleep.""
   d94e8:	5c5c 0862 0c66 0a6e 0d72 0974 4500 7272     \\b.f.n.r.t..Err
   d94f8:	726f 6320 646f 2065 0000                    or code ..

000d9502 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d9502:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

000d9512 <CSWTCH.24>:
   d9512:	0bb8 0000 0c1c 0000 0c80 0000 0ce4 0000     ................
   d9522:	0d48 0000 0dac 0000 0e10 0000 0e74          H...........t.

000d9530 <_ZTVN5spark13EthernetClassE>:
	...
   d9538:	676f 000d 6765 000d 675b 000d 6751 000d     og..eg..[g..Qg..
   d9548:	6745 000d 6739 000d 672d 000d 6725 000d     Eg..9g..-g..%g..
   d9558:	671b 000d 6711 000d 7cd1 000d               .g...g...|..

000d9564 <_ZTV8SPIClass>:
	...
   d956c:	678d 000d 678f 000d                         .g...g..

000d9574 <_ZL14clock_divisors>:
   d9574:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d9584:	6e69 0066 6e6c 6600 006e 6f63 6564 6400     inf.ln.fn.code.d
   d9594:	7465 6961 006c 0a0d 2500 3130 7530 0020     etail....%010u .
   d95a4:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
   d95b4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
   d95c4:	3d20 0020 6162 6475 5300 7265 6169 006c      = .baud.Serial.
   d95d4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   d95e4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   d95f4:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   d9604:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   d9614:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   d9624:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   d9634:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
   d9644:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   d9654:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   d9664:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d9674:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d9684:	6100 6373 6974 656d 0000 0000               .asctime....

000d9690 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9698:	71d1 000d 71d7 000d 71ed 000d 71e3 000d     .q...q...q...q..
   d96a8:	71d3 000d                                   .q..

000d96ac <_ZTV9IPAddress>:
	...
   d96b4:	76e3 000d 76d5 000d 76d7 000d               .v...v...v..

000d96c0 <_ZTV9USBSerial>:
	...
   d96c8:	77bd 000d 7801 000d 77db 000d 6b29 000d     .w...x...w..)k..
   d96d8:	77d5 000d 77bf 000d 77c7 000d 77fb 000d     .w...w...w...w..
   d96e8:	77cf 000d 77b9 000d                         .w...w..

000d96f0 <_ZTVN5spark13CellularClassE>:
	...
   d96f8:	78f7 000d 78ed 000d 78e3 000d 7899 000d     .x...x...x...x..
   d9708:	78d7 000d 78cb 000d 78bf 000d 78b7 000d     .x...x...x...x..
   d9718:	78ad 000d 78a3 000d 7cd1 000d               .x...x...|..

000d9724 <_ZTV11USARTSerial>:
	...
   d972c:	7941 000d 7965 000d 7971 000d 6b29 000d     Ay..ey..qy..)k..
   d973c:	794d 000d 7959 000d 7953 000d 795f 000d     My..Yy..Sy.._y..
   d974c:	7943 000d 7947 000d                         Cy..Gy..

000d9754 <_ZTV7TwoWire>:
	...
   d975c:	7a3b 000d 7a85 000d 7a5d 000d 7a3d 000d     ;z...z..]z..=z..
   d976c:	7a65 000d 7a6d 000d 7a75 000d 7a7d 000d     ez..mz..uz..}z..

000d977c <_ZTVN5spark9MeshClassE>:
	...
   d9784:	7b93 000d 7b89 000d 7b7f 000d 7b75 000d     .{...{...{..u{..
   d9794:	7b69 000d 7b5d 000d 7b51 000d 7b49 000d     i{..]{..Q{..I{..
   d97a4:	7b3f 000d 7b35 000d 7cd1 000d               ?{..5{...|..

000d97b0 <_ZTVN5spark12NetworkClassE>:
	...
   d97b8:	7c69 000d 7c73 000d 7c7d 000d 7c87 000d     i|..s|..}|...|..
   d97c8:	7c91 000d 7c9d 000d 7ca9 000d 7cb5 000d     .|...|...|...|..
   d97d8:	7cbd 000d 7cc7 000d 7cd1 000d               .|...|...|..

000d97e4 <__sf_fake_stdin>:
	...

000d9804 <__sf_fake_stdout>:
	...

000d9824 <__sf_fake_stderr>:
	...
   d9844:	0043                                        C.

000d9846 <link_const_variable_data_end>:
	...

000d9848 <link_constructors_location>:
   d9848:	000d47a9 	.word	0x000d47a9
   d984c:	000d4979 	.word	0x000d4979
   d9850:	000d56a1 	.word	0x000d56a1
   d9854:	000d5bb5 	.word	0x000d5bb5
   d9858:	000d5d81 	.word	0x000d5d81
   d985c:	000d5e11 	.word	0x000d5e11
   d9860:	000d5fa9 	.word	0x000d5fa9
   d9864:	000d6779 	.word	0x000d6779
   d9868:	000d68fd 	.word	0x000d68fd
   d986c:	000d6e8d 	.word	0x000d6e8d
   d9870:	000d6e9d 	.word	0x000d6e9d
   d9874:	000d6f29 	.word	0x000d6f29
   d9878:	000d7901 	.word	0x000d7901
   d987c:	000d7c1d 	.word	0x000d7c1d
   d9880:	000d7d55 	.word	0x000d7d55
   d9884:	000d7e31 	.word	0x000d7e31
   d9888:	000d7fb5 	.word	0x000d7fb5
   d988c:	000d8039 	.word	0x000d8039
   d9890:	000d80fd 	.word	0x000d80fd
   d9894:	000d81c1 	.word	0x000d81c1

000d9898 <link_constructors_end>:
	...
