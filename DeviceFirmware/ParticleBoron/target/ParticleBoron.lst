
c:/working/WeatherStation/DeviceFirmware/ParticleBoron/target/ParticleBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c28  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016cd4  2**0
                  CONTENTS
  3 .data         00000068  2003e29c  000d6c40  0000e29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004ec  2003e304  2003e304  0001e304  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6ca8  000d6ca8  00016ca8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6cd0  000d6cd0  00016cd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a9b59  00000000  00000000  00016cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000110db  00000000  00000000  000c082d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014fc9  00000000  00000000  000d1908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002128  00000000  00000000  000e68d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033c8  00000000  00000000  000e89f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00037ce3  00000000  00000000  000ebdc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002bc73  00000000  00000000  00123aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d46ff  00000000  00000000  0014f717  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bdfc  00000000  00000000  00223e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	bc 67 0d 00                                         .g..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb81 	bl	d6734 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb86 	bl	d674a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e29c 	.word	0x2003e29c
   d4048:	000d6c40 	.word	0x000d6c40
   d404c:	2003e304 	.word	0x2003e304
   d4050:	2003e304 	.word	0x2003e304
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8cf 	bl	d51fc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6c3c 	.word	0x000d6c3c
   d4080:	000d6bf8 	.word	0x000d6bf8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b870 	b.w	d4168 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f965 	bl	d4358 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b881 	b.w	d5198 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bc35 	b.w	d4904 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bc33 	b.w	d4904 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	4718      	bx	r3

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z15watchDogTimeoutv>:
Compass compassSensor;

ApplicationWatchdog wd(20000, watchDogTimeout);

void watchDogTimeout()
{
   d40cc:	b508      	push	{r3, lr}
  Serial.println("Watchdog timeout");
   d40ce:	f001 f96b 	bl	d53a8 <_Z16_fetch_usbserialv>
   d40d2:	4903      	ldr	r1, [pc, #12]	; (d40e0 <_Z15watchDogTimeoutv+0x14>)
   d40d4:	f000 fdd9 	bl	d4c8a <_ZN5Print7printlnEPKc>
  System.reset();
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
ApplicationWatchdog wd(20000, watchDogTimeout);

void watchDogTimeout()
{
  Serial.println("Watchdog timeout");
  System.reset();
   d40dc:	f000 bd1a 	b.w	d4b14 <_ZN11SystemClass5resetEv>
   d40e0:	000d67d0 	.word	0x000d67d0

000d40e4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e4:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d40e6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e8:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d40ea:	b10b      	cbz	r3, d40f0 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d40ec:	68c0      	ldr	r0, [r0, #12]
   d40ee:	e006      	b.n	d40fe <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d40f0:	6840      	ldr	r0, [r0, #4]
   d40f2:	b128      	cbz	r0, d4100 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d40f4:	6883      	ldr	r3, [r0, #8]
   d40f6:	b90b      	cbnz	r3, d40fc <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d40f8:	f001 fcc3 	bl	d5a82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40fc:	68c3      	ldr	r3, [r0, #12]
   d40fe:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d4100:	2301      	movs	r3, #1
   d4102:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4104:	2000      	movs	r0, #0
    }
   d4106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d410a:	f000 ba6f 	b.w	d45ec <os_thread_exit>

000d410e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d410e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4110:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4112:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4114:	b113      	cbz	r3, d411c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4116:	2203      	movs	r2, #3
   d4118:	4601      	mov	r1, r0
   d411a:	4798      	blx	r3
    }
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
   d4120:	b538      	push	{r3, r4, r5, lr}
   d4122:	4604      	mov	r4, r0
   d4124:	6940      	ldr	r0, [r0, #20]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
   d4126:	b1b0      	cbz	r0, d4156 <_ZN19ApplicationWatchdogD1Ev+0x36>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4128:	f000 fa38 	bl	d459c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d412c:	b998      	cbnz	r0, d4156 <_ZN19ApplicationWatchdogD1Ev+0x36>
            return;

        if (!exited_) {
   d412e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d4132:	b91b      	cbnz	r3, d413c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4134:	6960      	ldr	r0, [r4, #20]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4136:	b108      	cbz	r0, d413c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4138:	f000 fa38 	bl	d45ac <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d413c:	69a5      	ldr	r5, [r4, #24]
   d413e:	b13d      	cbz	r5, d4150 <_ZN19ApplicationWatchdogD1Ev+0x30>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4140:	4628      	mov	r0, r5
   d4142:	f7ff ffe4 	bl	d410e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   d4146:	4628      	mov	r0, r5
   d4148:	f7ff ffa5 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d414c:	2300      	movs	r3, #0
   d414e:	61a3      	str	r3, [r4, #24]
        }

        os_thread_cleanup(handle);
   d4150:	6960      	ldr	r0, [r4, #20]
   d4152:	f000 fa33 	bl	d45bc <os_thread_cleanup>
   d4156:	1d20      	adds	r0, r4, #4
   d4158:	f7ff ffd9 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	bd38      	pop	{r3, r4, r5, pc}

000d4160 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d4160:	6803      	ldr	r3, [r0, #0]
   d4162:	b2c9      	uxtb	r1, r1
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4718      	bx	r3

000d4168 <setup>:
}

void setup()
{
   d4168:	b508      	push	{r3, lr}
  pinMode(LED_BUILTIN, OUTPUT);
   d416a:	2101      	movs	r1, #1
   d416c:	2007      	movs	r0, #7
   d416e:	f001 fbb3 	bl	d58d8 <pinMode>

  Serial.begin(9600);
   d4172:	f001 f919 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4176:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d417a:	f001 f909 	bl	d5390 <_ZN9USBSerial5beginEl>
  Wire.begin();
   d417e:	f001 fc3b 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d4182:	f001 fa33 	bl	d55ec <_ZN7TwoWire5beginEv>

  delay(10000);
   d4186:	f242 7010 	movw	r0, #10000	; 0x2710
   d418a:	f000 fee3 	bl	d4f54 <delay>

  Serial.println("Weather Station");
   d418e:	f001 f90b 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4192:	4902      	ldr	r1, [pc, #8]	; (d419c <setup+0x34>)
}
   d4194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
  Wire.begin();

  delay(10000);

  Serial.println("Weather Station");
   d4198:	f000 bd77 	b.w	d4c8a <_ZN5Print7printlnEPKc>
   d419c:	000d67e1 	.word	0x000d67e1

000d41a0 <_ZN5Print8printlnfIIhEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41a0:	4613      	mov	r3, r2
   d41a2:	460a      	mov	r2, r1
   d41a4:	2101      	movs	r1, #1
   d41a6:	f000 be88 	b.w	d4eba <_ZN5Print11printf_implEbPKcz>
	...

000d41ac <_Z15printSystemInfov>:
}

void printSystemInfo()
{
   d41ac:	b530      	push	{r4, r5, lr}
   d41ae:	b091      	sub	sp, #68	; 0x44
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d41b0:	a801      	add	r0, sp, #4
   d41b2:	f000 fb8f 	bl	d48d4 <spark_deviceID>
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
   d41b6:	f001 f8f7 	bl	d53a8 <_Z16_fetch_usbserialv>
   d41ba:	4a40      	ldr	r2, [pc, #256]	; (d42bc <_Z15printSystemInfov+0x110>)
   d41bc:	9b01      	ldr	r3, [sp, #4]
   d41be:	2101      	movs	r1, #1
   d41c0:	f000 fe7b 	bl	d4eba <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("System version: %s", System.version().c_str());
   d41c4:	f001 f8f0 	bl	d53a8 <_Z16_fetch_usbserialv>
   d41c8:	4604      	mov	r4, r0
#define SYSTEM_VERSION_080RC27
#define SYSTEM_VERSION_090RC1
#define SYSTEM_VERSION_090RC2
#define SYSTEM_VERSION_090RC3

typedef struct __attribute__((packed)) SystemVersionInfo
   d41ca:	a810      	add	r0, sp, #64	; 0x40
   d41cc:	231c      	movs	r3, #28
   d41ce:	f820 3d1c 	strh.w	r3, [r0, #-28]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   d41d2:	2100      	movs	r1, #0
   d41d4:	f000 fb12 	bl	d47fc <system_version_info>
        return String(info.versionString);
   d41d8:	a90b      	add	r1, sp, #44	; 0x2c
   d41da:	a805      	add	r0, sp, #20
   d41dc:	f000 fd09 	bl	d4bf2 <_ZN6StringC1EPK19__FlashStringHelper>
   d41e0:	9b05      	ldr	r3, [sp, #20]
   d41e2:	4a37      	ldr	r2, [pc, #220]	; (d42c0 <_Z15printSystemInfov+0x114>)
   d41e4:	2101      	movs	r1, #1
   d41e6:	4620      	mov	r0, r4

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d41e8:	4c36      	ldr	r4, [pc, #216]	; (d42c4 <_Z15printSystemInfov+0x118>)
   d41ea:	f000 fe66 	bl	d4eba <_ZN5Print11printf_implEbPKcz>

void printSystemInfo()
{
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
  Serial.printlnf("System version: %s", System.version().c_str());
   d41ee:	a805      	add	r0, sp, #20
   d41f0:	f000 fcb8 	bl	d4b64 <_ZN6StringD1Ev>

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d41f4:	4620      	mov	r0, r4
   d41f6:	f000 fba5 	bl	d4944 <_ZN4PMIC20getInputVoltageLimitEv>
   d41fa:	4605      	mov	r5, r0
  Serial.printlnf("Input Voltage Limit: %d", inputVoltageLimit);
   d41fc:	f001 f8d4 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4200:	462a      	mov	r2, r5
   d4202:	4931      	ldr	r1, [pc, #196]	; (d42c8 <_Z15printSystemInfov+0x11c>)
   d4204:	f7ff ffcc 	bl	d41a0 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  byte inputCurrentLimit = pmic.getInputCurrentLimit();
   d4208:	4620      	mov	r0, r4
   d420a:	f000 fbef 	bl	d49ec <_ZN4PMIC20getInputCurrentLimitEv>
   d420e:	4605      	mov	r5, r0
  Serial.printlnf("Input Current Limit: %d", inputCurrentLimit);
   d4210:	f001 f8ca 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4214:	b2ea      	uxtb	r2, r5
   d4216:	492d      	ldr	r1, [pc, #180]	; (d42cc <_Z15printSystemInfov+0x120>)
   d4218:	f7ff ffc2 	bl	d41a0 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  uint16_t minimumSystemVoltage = pmic.getMinimumSystemVoltage();
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fbf1 	bl	d4a04 <_ZN4PMIC23getMinimumSystemVoltageEv>
   d4222:	4605      	mov	r5, r0
  Serial.printlnf("Minimum System Voltage: %d", minimumSystemVoltage);
   d4224:	f001 f8c0 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4228:	462b      	mov	r3, r5
   d422a:	4a29      	ldr	r2, [pc, #164]	; (d42d0 <_Z15printSystemInfov+0x124>)
   d422c:	2101      	movs	r1, #1
   d422e:	f000 fe44 	bl	d4eba <_ZN5Print11printf_implEbPKcz>

  byte chargeCurrent = pmic.getChargeCurrent();
   d4232:	4620      	mov	r0, r4
   d4234:	f000 fbf2 	bl	d4a1c <_ZN4PMIC16getChargeCurrentEv>
   d4238:	4605      	mov	r5, r0
  Serial.printlnf("Charge Current: %d", chargeCurrent);
   d423a:	f001 f8b5 	bl	d53a8 <_Z16_fetch_usbserialv>
   d423e:	462a      	mov	r2, r5
   d4240:	4924      	ldr	r1, [pc, #144]	; (d42d4 <_Z15printSystemInfov+0x128>)
   d4242:	f7ff ffad 	bl	d41a0 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
   d4246:	4620      	mov	r0, r4
   d4248:	f000 fbee 	bl	d4a28 <_ZN4PMIC21getChargeVoltageValueEv>
   d424c:	4604      	mov	r4, r0
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);
   d424e:	f001 f8ab 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4252:	4623      	mov	r3, r4
   d4254:	4a20      	ldr	r2, [pc, #128]	; (d42d8 <_Z15printSystemInfov+0x12c>)

  Serial.print("Charge: ");
  Serial.println(fuel.getSoC());
   d4256:	4c21      	ldr	r4, [pc, #132]	; (d42dc <_Z15printSystemInfov+0x130>)
   d4258:	2101      	movs	r1, #1
   d425a:	f000 fe2e 	bl	d4eba <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Charge Current: %d", chargeCurrent);

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);

  Serial.print("Charge: ");
   d425e:	f001 f8a3 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4262:	491f      	ldr	r1, [pc, #124]	; (d42e0 <_Z15printSystemInfov+0x134>)
   d4264:	f000 fcfe 	bl	d4c64 <_ZN5Print5printEPKc>
  Serial.println(fuel.getSoC());
   d4268:	f001 f89e 	bl	d53a8 <_Z16_fetch_usbserialv>
   d426c:	4605      	mov	r5, r0
   d426e:	4620      	mov	r0, r4
   d4270:	f000 ff08 	bl	d5084 <_ZN9FuelGauge6getSoCEv>
   d4274:	ee10 0a10 	vmov	r0, s0
   d4278:	f001 feb2 	bl	d5fe0 <__aeabi_f2d>
   d427c:	ec41 0b10 	vmov	d0, r0, r1
   d4280:	2102      	movs	r1, #2
   d4282:	4628      	mov	r0, r5
   d4284:	f000 fe0e 	bl	d4ea4 <_ZN5Print7printlnEdi>

  Serial.print("Voltage: ");
   d4288:	f001 f88e 	bl	d53a8 <_Z16_fetch_usbserialv>
   d428c:	4915      	ldr	r1, [pc, #84]	; (d42e4 <_Z15printSystemInfov+0x138>)
   d428e:	f000 fce9 	bl	d4c64 <_ZN5Print5printEPKc>
  Serial.println(fuel.getVCell());
   d4292:	f001 f889 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4296:	4605      	mov	r5, r0
   d4298:	4620      	mov	r0, r4
   d429a:	f000 fedd 	bl	d5058 <_ZN9FuelGauge8getVCellEv>
   d429e:	ee10 0a10 	vmov	r0, s0
   d42a2:	f001 fe9d 	bl	d5fe0 <__aeabi_f2d>
   d42a6:	ec41 0b10 	vmov	d0, r0, r1
   d42aa:	2102      	movs	r1, #2
   d42ac:	4628      	mov	r0, r5
   d42ae:	f000 fdf9 	bl	d4ea4 <_ZN5Print7printlnEdi>
  Serial.println("Weather Station");
}

void printSystemInfo()
{
  String myID = System.deviceID();
   d42b2:	a801      	add	r0, sp, #4
   d42b4:	f000 fc56 	bl	d4b64 <_ZN6StringD1Ev>

  CompassReading reading = compassSensor.getReading();
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
  
  */
}
   d42b8:	b011      	add	sp, #68	; 0x44
   d42ba:	bd30      	pop	{r4, r5, pc}
   d42bc:	000d67f1 	.word	0x000d67f1
   d42c0:	000d67ff 	.word	0x000d67ff
   d42c4:	2003e308 	.word	0x2003e308
   d42c8:	000d6812 	.word	0x000d6812
   d42cc:	000d682a 	.word	0x000d682a
   d42d0:	000d6842 	.word	0x000d6842
   d42d4:	000d685d 	.word	0x000d685d
   d42d8:	000d6870 	.word	0x000d6870
   d42dc:	2003e350 	.word	0x2003e350
   d42e0:	000d6883 	.word	0x000d6883
   d42e4:	000d688c 	.word	0x000d688c

000d42e8 <_Z9deepSleepj>:

#define WAKEUP_BUDDY_ADDRESS 8

void deepSleep(unsigned int milliseconds)
{
   d42e8:	b513      	push	{r0, r1, r4, lr}
   d42ea:	4604      	mov	r4, r0
  Serial.printlnf("Deep Sleep for %d milliseconds", milliseconds);
   d42ec:	f001 f85c 	bl	d53a8 <_Z16_fetch_usbserialv>
   d42f0:	4623      	mov	r3, r4
   d42f2:	4a15      	ldr	r2, [pc, #84]	; (d4348 <_Z9deepSleepj+0x60>)
   d42f4:	2101      	movs	r1, #1
   d42f6:	f000 fde0 	bl	d4eba <_ZN5Print11printf_implEbPKcz>
  Wire.beginTransmission(WAKEUP_BUDDY_ADDRESS);
   d42fa:	f001 fb7d 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d42fe:	2108      	movs	r1, #8
   d4300:	f001 f98c 	bl	d561c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(milliseconds);
   d4304:	f001 fb78 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d4308:	4621      	mov	r1, r4
   d430a:	f7ff ff29 	bl	d4160 <_ZN7TwoWire5writeEj>
  Wire.write(milliseconds >> 8);
   d430e:	f001 fb73 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d4312:	0a21      	lsrs	r1, r4, #8
   d4314:	f7ff ff24 	bl	d4160 <_ZN7TwoWire5writeEj>
  uint8_t status = Wire.endTransmission();
   d4318:	f001 fb6e 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d431c:	f001 f985 	bl	d562a <_ZN7TwoWire15endTransmissionEv>
   d4320:	4604      	mov	r4, r0
  Serial.printlnf("Transmission status %d", status);
   d4322:	f001 f841 	bl	d53a8 <_Z16_fetch_usbserialv>
   d4326:	4622      	mov	r2, r4
   d4328:	4908      	ldr	r1, [pc, #32]	; (d434c <_Z9deepSleepj+0x64>)
   d432a:	f7ff ff39 	bl	d41a0 <_ZN5Print8printlnfIIhEEEjPKcDpT_>

  fuel.sleep();
   d432e:	4808      	ldr	r0, [pc, #32]	; (d4350 <_Z9deepSleepj+0x68>)
   d4330:	f000 fef6 	bl	d5120 <_ZN9FuelGauge5sleepEv>
  System.sleep(SLEEP_MODE_DEEP);
   d4334:	4b07      	ldr	r3, [pc, #28]	; (d4354 <_Z9deepSleepj+0x6c>)
   d4336:	2200      	movs	r2, #0
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	2101      	movs	r1, #1
   d433c:	4668      	mov	r0, sp
   d433e:	f000 fbed 	bl	d4b1c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4342:	b002      	add	sp, #8
   d4344:	bd10      	pop	{r4, pc}
   d4346:	bf00      	nop
   d4348:	000d6896 	.word	0x000d6896
   d434c:	000d68b5 	.word	0x000d68b5
   d4350:	2003e350 	.word	0x2003e350
   d4354:	2003e334 	.word	0x2003e334

000d4358 <loop>:

void loop()
{
   d4358:	b508      	push	{r3, lr}
  digitalWrite(LED_BUILTIN, HIGH);
   d435a:	2101      	movs	r1, #1
   d435c:	2007      	movs	r0, #7
   d435e:	f001 facc 	bl	d58fa <digitalWrite>
  delay(1000);
   d4362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4366:	f000 fdf5 	bl	d4f54 <delay>
  digitalWrite(LED_BUILTIN, LOW);
   d436a:	2100      	movs	r1, #0
   d436c:	2007      	movs	r0, #7
   d436e:	f001 fac4 	bl	d58fa <digitalWrite>

  // And repeat!
  printSystemInfo();
   d4372:	f7ff ff1b 	bl	d41ac <_Z15printSystemInfov>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4376:	f000 f8f9 	bl	d456c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d437a:	4b04      	ldr	r3, [pc, #16]	; (d438c <loop+0x34>)
   d437c:	6018      	str	r0, [r3, #0]

  wd.checkin();

  deepSleep(30000);
}
   d437e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // And repeat!
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
   d4382:	f247 5030 	movw	r0, #30000	; 0x7530
   d4386:	f7ff bfaf 	b.w	d42e8 <_Z9deepSleepj>
   d438a:	bf00      	nop
   d438c:	2003e71c 	.word	0x2003e71c

000d4390 <_GLOBAL__sub_I_SystemMode>:
}
   d4390:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4392:	4b2d      	ldr	r3, [pc, #180]	; (d4448 <_GLOBAL__sub_I_SystemMode+0xb8>)
SYSTEM_MODE(SEMI_AUTOMATIC);

#include <Wire.h>
#include "Compass.h"

FuelGauge fuel;
   d4394:	4c2d      	ldr	r4, [pc, #180]	; (d444c <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4396:	4e2e      	ldr	r6, [pc, #184]	; (d4450 <_GLOBAL__sub_I_SystemMode+0xc0>)
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
}
   d4398:	b086      	sub	sp, #24
   d439a:	2500      	movs	r5, #0
   d439c:	601d      	str	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d439e:	f000 f8a5 	bl	d44ec <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d43a2:	4b2c      	ldr	r3, [pc, #176]	; (d4454 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d43a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d43a8:	701d      	strb	r5, [r3, #0]
   d43aa:	805d      	strh	r5, [r3, #2]
   d43ac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43ae:	2002      	movs	r0, #2
   d43b0:	f000 fa0c 	bl	d47cc <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);

#include <Wire.h>
#include "Compass.h"

FuelGauge fuel;
   d43b4:	4629      	mov	r1, r5
   d43b6:	4620      	mov	r0, r4
   d43b8:	f000 fe0e 	bl	d4fd8 <_ZN9FuelGaugeC1Eb>
   d43bc:	4620      	mov	r0, r4
PMIC pmic;
   d43be:	4c26      	ldr	r4, [pc, #152]	; (d4458 <_GLOBAL__sub_I_SystemMode+0xc8>)
SYSTEM_MODE(SEMI_AUTOMATIC);

#include <Wire.h>
#include "Compass.h"

FuelGauge fuel;
   d43c0:	4926      	ldr	r1, [pc, #152]	; (d445c <_GLOBAL__sub_I_SystemMode+0xcc>)
   d43c2:	4632      	mov	r2, r6
   d43c4:	f001 fb58 	bl	d5a78 <__aeabi_atexit>
PMIC pmic;
   d43c8:	4629      	mov	r1, r5
   d43ca:	4620      	mov	r0, r4
   d43cc:	f000 fac3 	bl	d4956 <_ZN4PMICC1Eb>
   d43d0:	4632      	mov	r2, r6
   d43d2:	4923      	ldr	r1, [pc, #140]	; (d4460 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d43d4:	4620      	mov	r0, r4
   d43d6:	f001 fb4f 	bl	d5a78 <__aeabi_atexit>
Compass compassSensor;
   d43da:	4822      	ldr	r0, [pc, #136]	; (d4464 <_GLOBAL__sub_I_SystemMode+0xd4>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d43dc:	4c22      	ldr	r4, [pc, #136]	; (d4468 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d43de:	f000 f855 	bl	d448c <_ZN7CompassC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d43e2:	4b22      	ldr	r3, [pc, #136]	; (d446c <_GLOBAL__sub_I_SystemMode+0xdc>)
   d43e4:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d43e6:	4b22      	ldr	r3, [pc, #136]	; (d4470 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d43e8:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d43ea:	4b22      	ldr	r3, [pc, #136]	; (d4474 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d43ec:	9304      	str	r3, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d43ee:	a902      	add	r1, sp, #8
   d43f0:	f644 6320 	movw	r3, #20000	; 0x4e20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d43f4:	60e5      	str	r5, [r4, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d43f6:	2202      	movs	r2, #2
   d43f8:	1d20      	adds	r0, r4, #4
   d43fa:	6023      	str	r3, [r4, #0]
   d43fc:	f7ff fe59 	bl	d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d4400:	9b05      	ldr	r3, [sp, #20]
   d4402:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d4404:	9b04      	ldr	r3, [sp, #16]
   d4406:	60e3      	str	r3, [r4, #12]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4408:	4b1b      	ldr	r3, [pc, #108]	; (d4478 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d440a:	61e3      	str	r3, [r4, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d440c:	f104 0014 	add.w	r0, r4, #20
   d4410:	f44f 7300 	mov.w	r3, #512	; 0x200
   d4414:	2209      	movs	r2, #9
   d4416:	4919      	ldr	r1, [pc, #100]	; (d447c <_GLOBAL__sub_I_SystemMode+0xec>)

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d4418:	6165      	str	r5, [r4, #20]
   d441a:	61a5      	str	r5, [r4, #24]
   d441c:	6224      	str	r4, [r4, #32]
   d441e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d4422:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4426:	4b16      	ldr	r3, [pc, #88]	; (d4480 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d4428:	f000 f8b0 	bl	d458c <os_thread_create>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d442c:	f000 f89e 	bl	d456c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4430:	4b14      	ldr	r3, [pc, #80]	; (d4484 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d4432:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4434:	a802      	add	r0, sp, #8
   d4436:	f7ff fe6a 	bl	d410e <_ZNSt14_Function_baseD1Ev>

ApplicationWatchdog wd(20000, watchDogTimeout);
   d443a:	4632      	mov	r2, r6
   d443c:	4912      	ldr	r1, [pc, #72]	; (d4488 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d443e:	4620      	mov	r0, r4
   d4440:	f001 fb1a 	bl	d5a78 <__aeabi_atexit>
  printSystemInfo();

  wd.checkin();

  deepSleep(30000);
}
   d4444:	b006      	add	sp, #24
   d4446:	bd70      	pop	{r4, r5, r6, pc}
   d4448:	2003e334 	.word	0x2003e334
   d444c:	2003e350 	.word	0x2003e350
   d4450:	2003e304 	.word	0x2003e304
   d4454:	2003e348 	.word	0x2003e348
   d4458:	2003e308 	.word	0x2003e308
   d445c:	000d4ff7 	.word	0x000d4ff7
   d4460:	000d4975 	.word	0x000d4975
   d4464:	2003e338 	.word	0x2003e338
   d4468:	2003e30c 	.word	0x2003e30c
   d446c:	000d40cd 	.word	0x000d40cd
   d4470:	000d40af 	.word	0x000d40af
   d4474:	000d40b3 	.word	0x000d40b3
   d4478:	000d59e9 	.word	0x000d59e9
   d447c:	000d68cc 	.word	0x000d68cc
   d4480:	000d40e5 	.word	0x000d40e5
   d4484:	2003e71c 	.word	0x2003e71c
   d4488:	000d4121 	.word	0x000d4121

000d448c <_ZN7CompassC1Ev>:
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;

Compass::Compass()
   d448c:	b530      	push	{r4, r5, lr}
   d448e:	b085      	sub	sp, #20
   d4490:	4604      	mov	r4, r0
   d4492:	f000 f817 	bl	d44c4 <_ZN8QMC5883LC1Ev>
{
    compass = QMC5883L();
   d4496:	4668      	mov	r0, sp
   d4498:	f000 f814 	bl	d44c4 <_ZN8QMC5883LC1Ev>
   d449c:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   d44a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   d44a4:	4620      	mov	r0, r4
   d44a6:	b005      	add	sp, #20
   d44a8:	bd30      	pop	{r4, r5, pc}
	...

000d44ac <_GLOBAL__sub_I_compass>:
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d44ac:	b508      	push	{r3, lr}
   d44ae:	f000 f81d 	bl	d44ec <HAL_Pin_Map>
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d44b2:	4802      	ldr	r0, [pc, #8]	; (d44bc <_GLOBAL__sub_I_compass+0x10>)
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d44b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d44b8:	f000 b804 	b.w	d44c4 <_ZN8QMC5883LC1Ev>
   d44bc:	2003e358 	.word	0x2003e358

000d44c0 <_GLOBAL__sub_I__ZN24Adafruit_HMC5883_Unified6write8Ehhh>:
   d44c0:	f000 b814 	b.w	d44ec <HAL_Pin_Map>

000d44c4 <_ZN8QMC5883LC1Ev>:
#include "QMC5883L.h"

QMC5883L::QMC5883L()
{
  
}
   d44c4:	4770      	bx	lr

000d44c6 <_GLOBAL__sub_I__ZN8QMC5883LC2Ev>:
   d44c6:	f000 b811 	b.w	d44ec <HAL_Pin_Map>
	...

000d44cc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <netdb_freeaddrinfo+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	689b      	ldr	r3, [r3, #8]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030268 	.word	0x00030268

000d44dc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <netdb_getaddrinfo+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	68db      	ldr	r3, [r3, #12]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030268 	.word	0x00030268

000d44ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_Pin_Map+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	681b      	ldr	r3, [r3, #0]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003022c 	.word	0x0003022c

000d44fc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_Pin_Mode+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	689b      	ldr	r3, [r3, #8]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003022c 	.word	0x0003022c

000d450c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_Get_Pin_Mode+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	68db      	ldr	r3, [r3, #12]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003022c 	.word	0x0003022c

000d451c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_GPIO_Write+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	691b      	ldr	r3, [r3, #16]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003022c 	.word	0x0003022c

000d452c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_SPI_Init+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	69db      	ldr	r3, [r3, #28]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030230 	.word	0x00030230

000d453c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_SPI_Is_Enabled+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6a1b      	ldr	r3, [r3, #32]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030230 	.word	0x00030230

000d454c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_RNG_GetRandomNumber+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	685b      	ldr	r3, [r3, #4]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030218 	.word	0x00030218

000d455c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_Delay_Milliseconds+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	689b      	ldr	r3, [r3, #8]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030218 	.word	0x00030218

000d456c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	695b      	ldr	r3, [r3, #20]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030218 	.word	0x00030218

000d457c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_Core_System_Reset_Ex+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030234 	.word	0x00030234

000d458c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <os_thread_create+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	685b      	ldr	r3, [r3, #4]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030248 	.word	0x00030248

000d459c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <os_thread_is_current+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	689b      	ldr	r3, [r3, #8]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030248 	.word	0x00030248

000d45ac <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <os_thread_join+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	691b      	ldr	r3, [r3, #16]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030248 	.word	0x00030248

000d45bc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <os_thread_cleanup+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	695b      	ldr	r3, [r3, #20]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030248 	.word	0x00030248

000d45cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <os_mutex_create+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030248 	.word	0x00030248

000d45dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <os_mutex_recursive_create+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030248 	.word	0x00030248

000d45ec <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <os_thread_exit+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030248 	.word	0x00030248

000d45fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <inet_inet_ntop+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	695b      	ldr	r3, [r3, #20]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030264 	.word	0x00030264

000d460c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_USART_Init+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	681b      	ldr	r3, [r3, #0]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003023c 	.word	0x0003023c

000d461c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_USART_Write_Data+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	68db      	ldr	r3, [r3, #12]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003023c 	.word	0x0003023c

000d462c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_USART_Available_Data+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	691b      	ldr	r3, [r3, #16]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003023c 	.word	0x0003023c

000d463c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_USART_Read_Data+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	695b      	ldr	r3, [r3, #20]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003023c 	.word	0x0003023c

000d464c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_USART_Peek_Data+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	699b      	ldr	r3, [r3, #24]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003023c 	.word	0x0003023c

000d465c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_USART_Flush_Data+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	69db      	ldr	r3, [r3, #28]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003023c 	.word	0x0003023c

000d466c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_USART_Is_Enabled+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6a1b      	ldr	r3, [r3, #32]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003023c 	.word	0x0003023c

000d467c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_USART_Available_Data_For_Write+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003023c 	.word	0x0003023c

000d468c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_I2C_Begin+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	68db      	ldr	r3, [r3, #12]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030228 	.word	0x00030228

000d469c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_I2C_Request_Data+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	695b      	ldr	r3, [r3, #20]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030228 	.word	0x00030228

000d46ac <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_I2C_Begin_Transmission+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	699b      	ldr	r3, [r3, #24]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030228 	.word	0x00030228

000d46bc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_I2C_End_Transmission+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	69db      	ldr	r3, [r3, #28]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030228 	.word	0x00030228

000d46cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_I2C_Write_Data+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6a1b      	ldr	r3, [r3, #32]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030228 	.word	0x00030228

000d46dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_I2C_Available_Data+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030228 	.word	0x00030228

000d46ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_I2C_Read_Data+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030228 	.word	0x00030228

000d46fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_I2C_Peek_Data+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030228 	.word	0x00030228

000d470c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <HAL_I2C_Flush_Data+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030228 	.word	0x00030228

000d471c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <HAL_I2C_Is_Enabled+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030228 	.word	0x00030228

000d472c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <HAL_I2C_Init+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030228 	.word	0x00030228

000d473c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <HAL_I2C_Acquire+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030228 	.word	0x00030228

000d474c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <HAL_I2C_Release+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030228 	.word	0x00030228

000d475c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <HAL_USB_USART_Init+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	681b      	ldr	r3, [r3, #0]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003024c 	.word	0x0003024c

000d476c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <HAL_USB_USART_Begin+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	685b      	ldr	r3, [r3, #4]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003024c 	.word	0x0003024c

000d477c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_USB_USART_Available_Data+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	691b      	ldr	r3, [r3, #16]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003024c 	.word	0x0003024c

000d478c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	695b      	ldr	r3, [r3, #20]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003024c 	.word	0x0003024c

000d479c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <HAL_USB_USART_Receive_Data+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	699b      	ldr	r3, [r3, #24]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003024c 	.word	0x0003024c

000d47ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <HAL_USB_USART_Send_Data+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	69db      	ldr	r3, [r3, #28]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003024c 	.word	0x0003024c

000d47bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <HAL_USB_USART_Flush_Data+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a1b      	ldr	r3, [r3, #32]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003024c 	.word	0x0003024c

000d47cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <set_system_mode+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	685b      	ldr	r3, [r3, #4]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030220 	.word	0x00030220

000d47dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <system_delay_ms+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	695b      	ldr	r3, [r3, #20]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030220 	.word	0x00030220

000d47ec <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <system_sleep+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	699b      	ldr	r3, [r3, #24]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030220 	.word	0x00030220

000d47fc <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <system_version_info+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030220 	.word	0x00030220

000d480c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b03      	ldr	r3, [pc, #12]	; (d481c <system_ctrl_set_app_request_handler+0x10>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4816:	9301      	str	r3, [sp, #4]
   d4818:	bd08      	pop	{r3, pc}
   d481a:	0000      	.short	0x0000
   d481c:	00030220 	.word	0x00030220

000d4820 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b03      	ldr	r3, [pc, #12]	; (d4830 <system_ctrl_set_result+0x10>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d482a:	9301      	str	r3, [sp, #4]
   d482c:	bd08      	pop	{r3, pc}
   d482e:	0000      	.short	0x0000
   d4830:	00030220 	.word	0x00030220

000d4834 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <network_connect+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	685b      	ldr	r3, [r3, #4]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030240 	.word	0x00030240

000d4844 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <network_connecting+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	689b      	ldr	r3, [r3, #8]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030240 	.word	0x00030240

000d4854 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <network_disconnect+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	68db      	ldr	r3, [r3, #12]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030240 	.word	0x00030240

000d4864 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <network_ready+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	691b      	ldr	r3, [r3, #16]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030240 	.word	0x00030240

000d4874 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <network_on+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	695b      	ldr	r3, [r3, #20]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030240 	.word	0x00030240

000d4884 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <network_off+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	699b      	ldr	r3, [r3, #24]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030240 	.word	0x00030240

000d4894 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <network_listen+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	69db      	ldr	r3, [r3, #28]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030240 	.word	0x00030240

000d48a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <network_listening+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6a1b      	ldr	r3, [r3, #32]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030240 	.word	0x00030240

000d48b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <network_set_listen_timeout+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030240 	.word	0x00030240

000d48c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <network_get_listen_timeout+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030240 	.word	0x00030240

000d48d4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <spark_deviceID+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	69db      	ldr	r3, [r3, #28]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030244 	.word	0x00030244

000d48e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030244 	.word	0x00030244

000d48f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <malloc+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	681b      	ldr	r3, [r3, #0]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003021c 	.word	0x0003021c

000d4904 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <free+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	685b      	ldr	r3, [r3, #4]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	0003021c 	.word	0x0003021c

000d4914 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <realloc+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	689b      	ldr	r3, [r3, #8]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003021c 	.word	0x0003021c

000d4924 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <vsnprintf+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003021c 	.word	0x0003021c

000d4934 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <abort+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003021c 	.word	0x0003021c

000d4944 <_ZN4PMIC20getInputVoltageLimitEv>:
byte PMIC::getInputVoltageLimit(void) {

    //TODO
    return 1;

}
   d4944:	2001      	movs	r0, #1
   d4946:	4770      	bx	lr

000d4948 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d4948:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d494a:	f001 f875 	bl	d5a38 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d494e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d4952:	f000 be71 	b.w	d5638 <_ZN7TwoWire4lockEv>

000d4956 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d4956:	b510      	push	{r4, lr}
   d4958:	4604      	mov	r4, r0
    lock_(_lock)
   d495a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d495c:	b109      	cbz	r1, d4962 <_ZN4PMICC1Eb+0xc>
        lock();
   d495e:	f7ff fff3 	bl	d4948 <_ZN4PMIC4lockEv>
    }
}
   d4962:	4620      	mov	r0, r4
   d4964:	bd10      	pop	{r4, pc}

000d4966 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d4966:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4968:	f001 f866 	bl	d5a38 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d4970:	f000 be6b 	b.w	d564a <_ZN7TwoWire6unlockEv>

000d4974 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d4974:	b510      	push	{r4, lr}
{
    if (lock_) {
   d4976:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d4978:	4604      	mov	r4, r0
{
    if (lock_) {
   d497a:	b10b      	cbz	r3, d4980 <_ZN4PMICD1Ev+0xc>
        unlock();
   d497c:	f7ff fff3 	bl	d4966 <_ZN4PMIC6unlockEv>
    }
}
   d4980:	4620      	mov	r0, r4
   d4982:	bd10      	pop	{r4, pc}

000d4984 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d4984:	b510      	push	{r4, lr}
   d4986:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d4988:	6800      	ldr	r0, [r0, #0]
   d498a:	f7ff ffec 	bl	d4966 <_ZN4PMIC6unlockEv>
   d498e:	4620      	mov	r0, r4
   d4990:	bd10      	pop	{r4, pc}

000d4992 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d4992:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d4994:	ac02      	add	r4, sp, #8
   d4996:	460d      	mov	r5, r1
   d4998:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d499c:	f7ff ffd4 	bl	d4948 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49a0:	f001 f84a 	bl	d5a38 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d49a4:	216b      	movs	r1, #107	; 0x6b
   d49a6:	f000 fe39 	bl	d561c <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49aa:	f001 f845 	bl	d5a38 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d49ae:	6803      	ldr	r3, [r0, #0]
   d49b0:	4629      	mov	r1, r5
   d49b2:	689b      	ldr	r3, [r3, #8]
   d49b4:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49b6:	f001 f83f 	bl	d5a38 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d49ba:	2101      	movs	r1, #1
   d49bc:	f000 fe31 	bl	d5622 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49c0:	f001 f83a 	bl	d5a38 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d49c4:	2301      	movs	r3, #1
   d49c6:	461a      	mov	r2, r3
   d49c8:	216b      	movs	r1, #107	; 0x6b
   d49ca:	f000 fe1e 	bl	d560a <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49ce:	f001 f833 	bl	d5a38 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d49d2:	6803      	ldr	r3, [r0, #0]
   d49d4:	695b      	ldr	r3, [r3, #20]
   d49d6:	4798      	blx	r3
   d49d8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d49da:	4620      	mov	r0, r4
   d49dc:	f7ff ffd2 	bl	d4984 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d49e0:	b2e8      	uxtb	r0, r5
   d49e2:	b003      	add	sp, #12
   d49e4:	bd30      	pop	{r4, r5, pc}

000d49e6 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
   d49e6:	2100      	movs	r1, #0
   d49e8:	f7ff bfd3 	b.w	d4992 <_ZN4PMIC12readRegisterEh>

000d49ec <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
   d49ec:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
   d49ee:	f7ff fffa 	bl	d49e6 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x03;
    return mapping[raw];
}
   d49f2:	4b03      	ldr	r3, [pc, #12]	; (d4a00 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x03;
    return mapping[raw];
   d49f4:	f000 0003 	and.w	r0, r0, #3
}
   d49f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d49fc:	bd08      	pop	{r3, pc}
   d49fe:	bf00      	nop
   d4a00:	000d68d4 	.word	0x000d68d4

000d4a04 <_ZN4PMIC23getMinimumSystemVoltageEv>:
 * Function Name  : getMinimumSystemVoltage
 * Description    : Returns the set minimum system voltage
 * Input          : NONE
 * Return         : The set system voltage in millivolts or 0 if ERROR
*******************************************************************************/
uint16_t PMIC::getMinimumSystemVoltage() {
   d4a04:	b508      	push	{r3, lr}

    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d4a06:	2101      	movs	r1, #1
   d4a08:	f7ff ffc3 	bl	d4992 <_ZN4PMIC12readRegisterEh>

        default:
        return 0; // return error since the value didn't match
    }

}
   d4a0c:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <_ZN4PMIC23getMinimumSystemVoltageEv+0x14>)
   d4a0e:	f000 000e 	and.w	r0, r0, #14
   d4a12:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	000d68e4 	.word	0x000d68e4

000d4a1c <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d4a1c:	2102      	movs	r1, #2
   d4a1e:	f7ff bfb8 	b.w	d4992 <_ZN4PMIC12readRegisterEh>

000d4a22 <_ZN4PMIC16getChargeVoltageEv>:
 * Return         :
 *******************************************************************************/

byte PMIC::getChargeVoltage(void) {

    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d4a22:	2104      	movs	r1, #4
   d4a24:	f7ff bfb5 	b.w	d4992 <_ZN4PMIC12readRegisterEh>

000d4a28 <_ZN4PMIC21getChargeVoltageValueEv>:
}

uint16_t PMIC::getChargeVoltageValue() {
   d4a28:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d4a2a:	f7ff fffa 	bl	d4a22 <_ZN4PMIC16getChargeVoltageEv>
   d4a2e:	2302      	movs	r3, #2
    unsigned baseVoltage = 16;
    unsigned v = 3504;
   d4a30:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
}

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
   d4a34:	2110      	movs	r1, #16
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d4a36:	fa40 f403 	asr.w	r4, r0, r3
   d4a3a:	3301      	adds	r3, #1
   d4a3c:	f004 0401 	and.w	r4, r4, #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d4a40:	2b08      	cmp	r3, #8
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d4a42:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d4a46:	ea4f 0141 	mov.w	r1, r1, lsl #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d4a4a:	d1f4      	bne.n	d4a36 <_ZN4PMIC21getChargeVoltageValueEv+0xe>
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
        baseVoltage *= 2;
    }
    return v;
}
   d4a4c:	b290      	uxth	r0, r2
   d4a4e:	bd10      	pop	{r4, pc}

000d4a50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a50:	2200      	movs	r2, #0
   d4a52:	4611      	mov	r1, r2
   d4a54:	6840      	ldr	r0, [r0, #4]
   d4a56:	f7ff bf25 	b.w	d48a4 <network_listening>

000d4a5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a5a:	2200      	movs	r2, #0
   d4a5c:	4611      	mov	r1, r2
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	f7ff bf30 	b.w	d48c4 <network_get_listen_timeout>

000d4a64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a64:	2200      	movs	r2, #0
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	f7ff bf24 	b.w	d48b4 <network_set_listen_timeout>

000d4a6c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a6c:	2200      	movs	r2, #0
   d4a6e:	f081 0101 	eor.w	r1, r1, #1
   d4a72:	6840      	ldr	r0, [r0, #4]
   d4a74:	f7ff bf0e 	b.w	d4894 <network_listen>

000d4a78 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a78:	2300      	movs	r3, #0
   d4a7a:	461a      	mov	r2, r3
   d4a7c:	4619      	mov	r1, r3
   d4a7e:	6840      	ldr	r0, [r0, #4]
   d4a80:	f7ff bf00 	b.w	d4884 <network_off>

000d4a84 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a84:	2300      	movs	r3, #0
   d4a86:	461a      	mov	r2, r3
   d4a88:	4619      	mov	r1, r3
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	f7ff bef2 	b.w	d4874 <network_on>

000d4a90 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a90:	2200      	movs	r2, #0
   d4a92:	4611      	mov	r1, r2
   d4a94:	6840      	ldr	r0, [r0, #4]
   d4a96:	f7ff bee5 	b.w	d4864 <network_ready>

000d4a9a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a9a:	2200      	movs	r2, #0
   d4a9c:	4611      	mov	r1, r2
   d4a9e:	6840      	ldr	r0, [r0, #4]
   d4aa0:	f7ff bed0 	b.w	d4844 <network_connecting>

000d4aa4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4aa4:	2200      	movs	r2, #0
   d4aa6:	2102      	movs	r1, #2
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	f7ff bed3 	b.w	d4854 <network_disconnect>

000d4aae <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4aae:	2300      	movs	r3, #0
   d4ab0:	461a      	mov	r2, r3
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	f7ff bebe 	b.w	d4834 <network_connect>

000d4ab8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ab8:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4aba:	2203      	movs	r2, #3
   d4abc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4abe:	4a02      	ldr	r2, [pc, #8]	; (d4ac8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ac0:	601a      	str	r2, [r3, #0]
   d4ac2:	4770      	bx	lr
   d4ac4:	2003e368 	.word	0x2003e368
   d4ac8:	000d690c 	.word	0x000d690c

000d4acc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4acc:	4770      	bx	lr

000d4ace <_ZN8SPIClassD0Ev>:
   d4ace:	b510      	push	{r4, lr}
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	f7ff fae0 	bl	d4096 <_ZdlPv>
   d4ad6:	4620      	mov	r0, r4
   d4ad8:	bd10      	pop	{r4, pc}
	...

000d4adc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4adc:	b570      	push	{r4, r5, r6, lr}
   d4ade:	4b08      	ldr	r3, [pc, #32]	; (d4b00 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4ae0:	6003      	str	r3, [r0, #0]
   d4ae2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4ae4:	2500      	movs	r5, #0
   d4ae6:	460e      	mov	r6, r1
   d4ae8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4aec:	f7ff fd6e 	bl	d45cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4af0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4af2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4af4:	f7ff fd1a 	bl	d452c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4af8:	60a5      	str	r5, [r4, #8]
}
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd70      	pop	{r4, r5, r6, pc}
   d4afe:	bf00      	nop
   d4b00:	000d6940 	.word	0x000d6940

000d4b04 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4b04:	7900      	ldrb	r0, [r0, #4]
   d4b06:	f7ff bd19 	b.w	d453c <HAL_SPI_Is_Enabled>

000d4b0a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d4b0a:	4601      	mov	r1, r0
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	208c      	movs	r0, #140	; 0x8c
   d4b10:	f7ff bd34 	b.w	d457c <HAL_Core_System_Reset_Ex>

000d4b14 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d4b14:	2000      	movs	r0, #0
   d4b16:	f7ff bff8 	b.w	d4b0a <_ZN11SystemClass5resetEm>
	...

000d4b1c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	4604      	mov	r4, r0
   d4b20:	4608      	mov	r0, r1
   d4b22:	4611      	mov	r1, r2
   d4b24:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d4b26:	2300      	movs	r3, #0
   d4b28:	f7ff fe60 	bl	d47ec <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d4b2c:	4b06      	ldr	r3, [pc, #24]	; (d4b48 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d4b2e:	2200      	movs	r2, #0
   d4b30:	701a      	strb	r2, [r3, #0]
   d4b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b36:	8058      	strh	r0, [r3, #2]
   d4b38:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d4b3a:	681a      	ldr	r2, [r3, #0]
   d4b3c:	889b      	ldrh	r3, [r3, #4]
   d4b3e:	6022      	str	r2, [r4, #0]
   d4b40:	80a3      	strh	r3, [r4, #4]
}
   d4b42:	4620      	mov	r0, r4
   d4b44:	bd10      	pop	{r4, pc}
   d4b46:	bf00      	nop
   d4b48:	2003e370 	.word	0x2003e370

000d4b4c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4b4c:	4b04      	ldr	r3, [pc, #16]	; (d4b60 <_GLOBAL__sub_I_System+0x14>)
   d4b4e:	2000      	movs	r0, #0
   d4b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b54:	7018      	strb	r0, [r3, #0]
   d4b56:	8058      	strh	r0, [r3, #2]
   d4b58:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b5a:	f7ff be37 	b.w	d47cc <set_system_mode>
   d4b5e:	bf00      	nop
   d4b60:	2003e370 	.word	0x2003e370

000d4b64 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b64:	b510      	push	{r4, lr}
   d4b66:	4604      	mov	r4, r0
{
	free(buffer);
   d4b68:	6800      	ldr	r0, [r0, #0]
   d4b6a:	f7ff fecb 	bl	d4904 <free>
}
   d4b6e:	4620      	mov	r0, r4
   d4b70:	bd10      	pop	{r4, pc}

000d4b72 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4b72:	b510      	push	{r4, lr}
   d4b74:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4b76:	6800      	ldr	r0, [r0, #0]
   d4b78:	b108      	cbz	r0, d4b7e <_ZN6String10invalidateEv+0xc>
   d4b7a:	f7ff fec3 	bl	d4904 <free>
	buffer = NULL;
   d4b7e:	2300      	movs	r3, #0
   d4b80:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4b82:	60a3      	str	r3, [r4, #8]
   d4b84:	6063      	str	r3, [r4, #4]
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b88:	b538      	push	{r3, r4, r5, lr}
   d4b8a:	4604      	mov	r4, r0
   d4b8c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4b8e:	6800      	ldr	r0, [r0, #0]
   d4b90:	3101      	adds	r1, #1
   d4b92:	f7ff febf 	bl	d4914 <realloc>
	if (newbuffer) {
   d4b96:	b110      	cbz	r0, d4b9e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4b98:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4b9c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4b9e:	bd38      	pop	{r3, r4, r5, pc}

000d4ba0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ba0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4ba2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ba4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4ba6:	b113      	cbz	r3, d4bae <_ZN6String7reserveEj+0xe>
   d4ba8:	6843      	ldr	r3, [r0, #4]
   d4baa:	428b      	cmp	r3, r1
   d4bac:	d207      	bcs.n	d4bbe <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff ffea 	bl	d4b88 <_ZN6String12changeBufferEj>
   d4bb4:	b120      	cbz	r0, d4bc0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4bb6:	68a3      	ldr	r3, [r4, #8]
   d4bb8:	b90b      	cbnz	r3, d4bbe <_ZN6String7reserveEj+0x1e>
   d4bba:	6822      	ldr	r2, [r4, #0]
   d4bbc:	7013      	strb	r3, [r2, #0]
   d4bbe:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4bc0:	bd10      	pop	{r4, pc}

000d4bc2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bc2:	b570      	push	{r4, r5, r6, lr}
   d4bc4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4bc6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bc8:	4604      	mov	r4, r0
   d4bca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4bcc:	f7ff ffe8 	bl	d4ba0 <_ZN6String7reserveEj>
   d4bd0:	b918      	cbnz	r0, d4bda <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff ffcd 	bl	d4b72 <_ZN6String10invalidateEv>
		return *this;
   d4bd8:	e009      	b.n	d4bee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4bda:	462a      	mov	r2, r5
   d4bdc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4bde:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4be0:	6820      	ldr	r0, [r4, #0]
   d4be2:	f001 fda7 	bl	d6734 <memcpy>
	buffer[len] = 0;
   d4be6:	6822      	ldr	r2, [r4, #0]
   d4be8:	68a3      	ldr	r3, [r4, #8]
   d4bea:	2100      	movs	r1, #0
   d4bec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4bee:	4620      	mov	r0, r4
   d4bf0:	bd70      	pop	{r4, r5, r6, pc}

000d4bf2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4bf2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bf4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4bf6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bf8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4bfa:	6043      	str	r3, [r0, #4]
	len = 0;
   d4bfc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bfe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c00:	460d      	mov	r5, r1
   d4c02:	b139      	cbz	r1, d4c14 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c04:	4608      	mov	r0, r1
   d4c06:	f001 fdd1 	bl	d67ac <strlen>
   d4c0a:	4629      	mov	r1, r5
   d4c0c:	4602      	mov	r2, r0
   d4c0e:	4620      	mov	r0, r4
   d4c10:	f7ff ffd7 	bl	d4bc2 <_ZN6String4copyEPKcj>
}
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd38      	pop	{r3, r4, r5, pc}

000d4c18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c1a:	4606      	mov	r6, r0
   d4c1c:	460d      	mov	r5, r1
   d4c1e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c20:	2400      	movs	r4, #0
  while (size--) {
   d4c22:	42bd      	cmp	r5, r7
   d4c24:	d00c      	beq.n	d4c40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c26:	6833      	ldr	r3, [r6, #0]
   d4c28:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c2c:	689b      	ldr	r3, [r3, #8]
   d4c2e:	4630      	mov	r0, r6
   d4c30:	4798      	blx	r3
     if (chunk>=0)
   d4c32:	2800      	cmp	r0, #0
   d4c34:	db01      	blt.n	d4c3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c36:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c38:	e7f3      	b.n	d4c22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c3a:	2c00      	cmp	r4, #0
   d4c3c:	bf08      	it	eq
   d4c3e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c40:	4620      	mov	r0, r4
   d4c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c44 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c44:	b570      	push	{r4, r5, r6, lr}
   d4c46:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c48:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c4a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c4c:	b149      	cbz	r1, d4c62 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c4e:	f001 fdad 	bl	d67ac <strlen>
   d4c52:	682b      	ldr	r3, [r5, #0]
   d4c54:	4602      	mov	r2, r0
   d4c56:	4621      	mov	r1, r4
   d4c58:	4628      	mov	r0, r5
   d4c5a:	68db      	ldr	r3, [r3, #12]
    }
   d4c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c60:	4718      	bx	r3
    }
   d4c62:	bd70      	pop	{r4, r5, r6, pc}

000d4c64 <_ZN5Print5printEPKc>:
   d4c64:	b508      	push	{r3, lr}
   d4c66:	f7ff ffed 	bl	d4c44 <_ZN5Print5writeEPKc>
   d4c6a:	bd08      	pop	{r3, pc}

000d4c6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c6c:	6803      	ldr	r3, [r0, #0]
   d4c6e:	689b      	ldr	r3, [r3, #8]
   d4c70:	4718      	bx	r3

000d4c72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4c74:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c76:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4c78:	f7ff fff8 	bl	d4c6c <_ZN5Print5printEc>
  n += print('\n');
   d4c7c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4c7e:	4604      	mov	r4, r0
  n += print('\n');
   d4c80:	4628      	mov	r0, r5
   d4c82:	f7ff fff3 	bl	d4c6c <_ZN5Print5printEc>
  return n;
}
   d4c86:	4420      	add	r0, r4
   d4c88:	bd38      	pop	{r3, r4, r5, pc}

000d4c8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4c8a:	b538      	push	{r3, r4, r5, lr}
   d4c8c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c8e:	f7ff ffd9 	bl	d4c44 <_ZN5Print5writeEPKc>
   d4c92:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4c94:	4628      	mov	r0, r5
   d4c96:	f7ff ffec 	bl	d4c72 <_ZN5Print7printlnEv>
  return n;
}
   d4c9a:	4420      	add	r0, r4
   d4c9c:	bd38      	pop	{r3, r4, r5, pc}

000d4c9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c9e:	b530      	push	{r4, r5, lr}
   d4ca0:	b08b      	sub	sp, #44	; 0x2c
   d4ca2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ca4:	2100      	movs	r1, #0
   d4ca6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4caa:	2a01      	cmp	r2, #1
   d4cac:	bf98      	it	ls
   d4cae:	220a      	movls	r2, #10
   d4cb0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4cb4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4cb8:	fb05 3312 	mls	r3, r5, r2, r3
   d4cbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cc0:	2b09      	cmp	r3, #9
   d4cc2:	bf94      	ite	ls
   d4cc4:	3330      	addls	r3, #48	; 0x30
   d4cc6:	3337      	addhi	r3, #55	; 0x37
   d4cc8:	b2db      	uxtb	r3, r3
   d4cca:	4621      	mov	r1, r4
   d4ccc:	f804 3901 	strb.w	r3, [r4], #-1
   d4cd0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4cd2:	2d00      	cmp	r5, #0
   d4cd4:	d1ee      	bne.n	d4cb4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4cd6:	f7ff ffb5 	bl	d4c44 <_ZN5Print5writeEPKc>
}
   d4cda:	b00b      	add	sp, #44	; 0x2c
   d4cdc:	bd30      	pop	{r4, r5, pc}

000d4cde <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4cde:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4ce0:	b92a      	cbnz	r2, d4cee <_ZN5Print5printEmi+0x10>
   d4ce2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4ce8:	689b      	ldr	r3, [r3, #8]
   d4cea:	b2c9      	uxtb	r1, r1
   d4cec:	4718      	bx	r3
  else return printNumber(n, base);
   d4cee:	b2d2      	uxtb	r2, r2
}
   d4cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4cf4:	f7ff bfd3 	b.w	d4c9e <_ZN5Print11printNumberEmh>

000d4cf8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4cf8:	f7ff bff1 	b.w	d4cde <_ZN5Print5printEmi>

000d4cfc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d00:	4607      	mov	r7, r0
   d4d02:	460e      	mov	r6, r1
  if (base == 0) {
   d4d04:	4615      	mov	r5, r2
   d4d06:	b92a      	cbnz	r2, d4d14 <_ZN5Print5printEli+0x18>
    return write(n);
   d4d08:	6803      	ldr	r3, [r0, #0]
   d4d0a:	b2c9      	uxtb	r1, r1
   d4d0c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4d12:	4718      	bx	r3
  } else if (base == 10) {
   d4d14:	2a0a      	cmp	r2, #10
   d4d16:	d102      	bne.n	d4d1e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4d18:	2900      	cmp	r1, #0
   d4d1a:	da01      	bge.n	d4d20 <_ZN5Print5printEli+0x24>
   d4d1c:	e004      	b.n	d4d28 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d1e:	b2d2      	uxtb	r2, r2
  }
}
   d4d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d24:	f7ff bfbb 	b.w	d4c9e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d28:	212d      	movs	r1, #45	; 0x2d
   d4d2a:	f7ff ff9f 	bl	d4c6c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4d2e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d30:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4d32:	4271      	negs	r1, r6
   d4d34:	4638      	mov	r0, r7
   d4d36:	f7ff ffb2 	bl	d4c9e <_ZN5Print11printNumberEmh>
   d4d3a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d40 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d44:	ec57 6b10 	vmov	r6, r7, d0
   d4d48:	4682      	mov	sl, r0
   d4d4a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4d4c:	ee10 2a10 	vmov	r2, s0
   d4d50:	463b      	mov	r3, r7
   d4d52:	ee10 0a10 	vmov	r0, s0
   d4d56:	4639      	mov	r1, r7
   d4d58:	f001 fc30 	bl	d65bc <__aeabi_dcmpun>
   d4d5c:	b108      	cbz	r0, d4d62 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d5e:	4948      	ldr	r1, [pc, #288]	; (d4e80 <_ZN5Print10printFloatEdh+0x140>)
   d4d60:	e012      	b.n	d4d88 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4d62:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4d66:	f04f 32ff 	mov.w	r2, #4294967295
   d4d6a:	4b46      	ldr	r3, [pc, #280]	; (d4e84 <_ZN5Print10printFloatEdh+0x144>)
   d4d6c:	4630      	mov	r0, r6
   d4d6e:	4649      	mov	r1, r9
   d4d70:	f001 fc24 	bl	d65bc <__aeabi_dcmpun>
   d4d74:	b968      	cbnz	r0, d4d92 <_ZN5Print10printFloatEdh+0x52>
   d4d76:	f04f 32ff 	mov.w	r2, #4294967295
   d4d7a:	4b42      	ldr	r3, [pc, #264]	; (d4e84 <_ZN5Print10printFloatEdh+0x144>)
   d4d7c:	4630      	mov	r0, r6
   d4d7e:	4649      	mov	r1, r9
   d4d80:	f001 fbfe 	bl	d6580 <__aeabi_dcmple>
   d4d84:	b928      	cbnz	r0, d4d92 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d86:	4940      	ldr	r1, [pc, #256]	; (d4e88 <_ZN5Print10printFloatEdh+0x148>)
   d4d88:	4650      	mov	r0, sl
   d4d8a:	f7ff ff5b 	bl	d4c44 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4d92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4d96:	4b3d      	ldr	r3, [pc, #244]	; (d4e8c <_ZN5Print10printFloatEdh+0x14c>)
   d4d98:	4630      	mov	r0, r6
   d4d9a:	4639      	mov	r1, r7
   d4d9c:	f001 fc04 	bl	d65a8 <__aeabi_dcmpgt>
   d4da0:	b108      	cbz	r0, d4da6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4da2:	493b      	ldr	r1, [pc, #236]	; (d4e90 <_ZN5Print10printFloatEdh+0x150>)
   d4da4:	e7f0      	b.n	d4d88 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4da6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4daa:	4b3a      	ldr	r3, [pc, #232]	; (d4e94 <_ZN5Print10printFloatEdh+0x154>)
   d4dac:	4630      	mov	r0, r6
   d4dae:	4639      	mov	r1, r7
   d4db0:	f001 fbdc 	bl	d656c <__aeabi_dcmplt>
   d4db4:	2800      	cmp	r0, #0
   d4db6:	d1f4      	bne.n	d4da2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4db8:	2200      	movs	r2, #0
   d4dba:	2300      	movs	r3, #0
   d4dbc:	4630      	mov	r0, r6
   d4dbe:	4639      	mov	r1, r7
   d4dc0:	f001 fbd4 	bl	d656c <__aeabi_dcmplt>
   d4dc4:	b140      	cbz	r0, d4dd8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4dc6:	212d      	movs	r1, #45	; 0x2d
   d4dc8:	4650      	mov	r0, sl
   d4dca:	f7ff ff4f 	bl	d4c6c <_ZN5Print5printEc>
     number = -number;
   d4dce:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4dd2:	4604      	mov	r4, r0
     number = -number;
   d4dd4:	461f      	mov	r7, r3
   d4dd6:	e000      	b.n	d4dda <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4dd8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4dda:	492f      	ldr	r1, [pc, #188]	; (d4e98 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4ddc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4de0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4de2:	fa5f f388 	uxtb.w	r3, r8
   d4de6:	429d      	cmp	r5, r3
   d4de8:	d906      	bls.n	d4df8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4dea:	2200      	movs	r2, #0
   d4dec:	4b2b      	ldr	r3, [pc, #172]	; (d4e9c <_ZN5Print10printFloatEdh+0x15c>)
   d4dee:	f001 fa75 	bl	d62dc <__aeabi_ddiv>
   d4df2:	f108 0801 	add.w	r8, r8, #1
   d4df6:	e7f4      	b.n	d4de2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4df8:	4632      	mov	r2, r6
   d4dfa:	463b      	mov	r3, r7
   d4dfc:	f000 ff92 	bl	d5d24 <__adddf3>
   d4e00:	460f      	mov	r7, r1
   d4e02:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e04:	f001 fc18 	bl	d6638 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e08:	220a      	movs	r2, #10
   d4e0a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e0c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e0e:	4650      	mov	r0, sl
   d4e10:	f7ff ff45 	bl	d4c9e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e14:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4e16:	b37d      	cbz	r5, d4e78 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4e18:	4640      	mov	r0, r8
   d4e1a:	f001 f8bf 	bl	d5f9c <__aeabi_ui2d>
   d4e1e:	4602      	mov	r2, r0
   d4e20:	460b      	mov	r3, r1
   d4e22:	4630      	mov	r0, r6
   d4e24:	4639      	mov	r1, r7
   d4e26:	f000 ff7b 	bl	d5d20 <__aeabi_dsub>
   d4e2a:	4606      	mov	r6, r0
   d4e2c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e2e:	4650      	mov	r0, sl
   d4e30:	491b      	ldr	r1, [pc, #108]	; (d4ea0 <_ZN5Print10printFloatEdh+0x160>)
   d4e32:	f7ff ff07 	bl	d4c44 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4e36:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4e38:	4b18      	ldr	r3, [pc, #96]	; (d4e9c <_ZN5Print10printFloatEdh+0x15c>)
   d4e3a:	2200      	movs	r2, #0
   d4e3c:	4630      	mov	r0, r6
   d4e3e:	4639      	mov	r1, r7
   d4e40:	f001 f922 	bl	d6088 <__aeabi_dmul>
   d4e44:	460f      	mov	r7, r1
   d4e46:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4e48:	f001 fbce 	bl	d65e8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4e4c:	220a      	movs	r2, #10
   d4e4e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4e50:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4e52:	4650      	mov	r0, sl
   d4e54:	f7ff ff52 	bl	d4cfc <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4e58:	4404      	add	r4, r0
    remainder -= toPrint;
   d4e5a:	4640      	mov	r0, r8
   d4e5c:	f001 f8ae 	bl	d5fbc <__aeabi_i2d>
   d4e60:	4602      	mov	r2, r0
   d4e62:	460b      	mov	r3, r1
   d4e64:	4630      	mov	r0, r6
   d4e66:	4639      	mov	r1, r7
   d4e68:	f000 ff5a 	bl	d5d20 <__aeabi_dsub>
   d4e6c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4e6e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4e72:	4606      	mov	r6, r0
   d4e74:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4e76:	d1df      	bne.n	d4e38 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e78:	4620      	mov	r0, r4
   d4e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4e7e:	bf00      	nop
   d4e80:	000d6948 	.word	0x000d6948
   d4e84:	7fefffff 	.word	0x7fefffff
   d4e88:	000d6952 	.word	0x000d6952
   d4e8c:	41efffff 	.word	0x41efffff
   d4e90:	000d694c 	.word	0x000d694c
   d4e94:	c1efffff 	.word	0xc1efffff
   d4e98:	3fe00000 	.word	0x3fe00000
   d4e9c:	40240000 	.word	0x40240000
   d4ea0:	000d6950 	.word	0x000d6950

000d4ea4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4ea4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ea6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4ea8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4eaa:	f7ff ff49 	bl	d4d40 <_ZN5Print10printFloatEdh>
   d4eae:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	f7ff fede 	bl	d4c72 <_ZN5Print7printlnEv>
  return n;
}
   d4eb6:	4420      	add	r0, r4
   d4eb8:	bd38      	pop	{r3, r4, r5, pc}

000d4eba <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4eba:	b40c      	push	{r2, r3}
   d4ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ec0:	b087      	sub	sp, #28
   d4ec2:	af00      	add	r7, sp, #0
   d4ec4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4ec8:	4605      	mov	r5, r0
   d4eca:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4ece:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4ed0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4ed2:	4623      	mov	r3, r4
   d4ed4:	464a      	mov	r2, r9
   d4ed6:	2114      	movs	r1, #20
   d4ed8:	1d38      	adds	r0, r7, #4
   d4eda:	f7ff fd23 	bl	d4924 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4ede:	2813      	cmp	r0, #19
   d4ee0:	d805      	bhi.n	d4eee <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ee2:	1d39      	adds	r1, r7, #4
   d4ee4:	4628      	mov	r0, r5
   d4ee6:	f7ff fead 	bl	d4c44 <_ZN5Print5writeEPKc>
   d4eea:	4604      	mov	r4, r0
   d4eec:	e013      	b.n	d4f16 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4eee:	f100 0308 	add.w	r3, r0, #8
   d4ef2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4ef6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4ef8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4efc:	1c41      	adds	r1, r0, #1
   d4efe:	4623      	mov	r3, r4
   d4f00:	464a      	mov	r2, r9
   d4f02:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4f04:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4f06:	f7ff fd0d 	bl	d4924 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f0a:	4669      	mov	r1, sp
   d4f0c:	4628      	mov	r0, r5
   d4f0e:	f7ff fe99 	bl	d4c44 <_ZN5Print5writeEPKc>
   d4f12:	4604      	mov	r4, r0
   d4f14:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4f16:	b11e      	cbz	r6, d4f20 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4f18:	4628      	mov	r0, r5
   d4f1a:	f7ff feaa 	bl	d4c72 <_ZN5Print7printlnEv>
   d4f1e:	4404      	add	r4, r0
    return n;
}
   d4f20:	4620      	mov	r0, r4
   d4f22:	371c      	adds	r7, #28
   d4f24:	46bd      	mov	sp, r7
   d4f26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f2a:	b002      	add	sp, #8
   d4f2c:	4770      	bx	lr
	...

000d4f30 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f30:	4b01      	ldr	r3, [pc, #4]	; (d4f38 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f32:	4a02      	ldr	r2, [pc, #8]	; (d4f3c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f34:	601a      	str	r2, [r3, #0]
   d4f36:	4770      	bx	lr
   d4f38:	2003e378 	.word	0x2003e378
   d4f3c:	000d6a09 	.word	0x000d6a09

000d4f40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f40:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f42:	681a      	ldr	r2, [r3, #0]
   d4f44:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f46:	601a      	str	r2, [r3, #0]
   d4f48:	4770      	bx	lr
   d4f4a:	bf00      	nop
   d4f4c:	2003e29c 	.word	0x2003e29c
   d4f50:	2003e37c 	.word	0x2003e37c

000d4f54 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f54:	2100      	movs	r1, #0
   d4f56:	f7ff bc41 	b.w	d47dc <system_delay_ms>

000d4f5a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f5a:	b510      	push	{r4, lr}
   d4f5c:	4604      	mov	r4, r0
   d4f5e:	f7ff f8d6 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d4f62:	4620      	mov	r0, r4
   d4f64:	bd10      	pop	{r4, pc}

000d4f66 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f66:	b513      	push	{r0, r1, r4, lr}
   d4f68:	460b      	mov	r3, r1
   d4f6a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f6c:	c803      	ldmia	r0, {r0, r1}
   d4f6e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f72:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f76:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f7a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4f7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f82:	b002      	add	sp, #8
   d4f84:	bd10      	pop	{r4, pc}
	...

000d4f88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f88:	4803      	ldr	r0, [pc, #12]	; (d4f98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f8a:	4a04      	ldr	r2, [pc, #16]	; (d4f9c <_GLOBAL__sub_I_RGB+0x14>)
   d4f8c:	4904      	ldr	r1, [pc, #16]	; (d4fa0 <_GLOBAL__sub_I_RGB+0x18>)
   d4f8e:	2300      	movs	r3, #0
   d4f90:	6083      	str	r3, [r0, #8]
   d4f92:	f000 bd71 	b.w	d5a78 <__aeabi_atexit>
   d4f96:	bf00      	nop
   d4f98:	2003e380 	.word	0x2003e380
   d4f9c:	2003e304 	.word	0x2003e304
   d4fa0:	000d4f5b 	.word	0x000d4f5b

000d4fa4 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d4fa4:	0909      	lsrs	r1, r1, #4
   d4fa6:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d4faa:	ee07 0a90 	vmov	s15, r0
   d4fae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d4fb2:	eddf 7a02 	vldr	s15, [pc, #8]	; d4fbc <_ZN6detail9_getVCellEhh+0x18>
   d4fb6:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4fba:	4770      	bx	lr
   d4fbc:	44480000 	.word	0x44480000

000d4fc0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d4fc0:	6800      	ldr	r0, [r0, #0]
   d4fc2:	f000 bb39 	b.w	d5638 <_ZN7TwoWire4lockEv>

000d4fc6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d4fc6:	b510      	push	{r4, lr}
   d4fc8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d4fca:	6001      	str	r1, [r0, #0]
   d4fcc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d4fce:	b10a      	cbz	r2, d4fd4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d4fd0:	f7ff fff6 	bl	d4fc0 <_ZN9FuelGauge4lockEv>
    }
}
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	bd10      	pop	{r4, pc}

000d4fd8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d4fd8:	b538      	push	{r3, r4, r5, lr}
   d4fda:	4604      	mov	r4, r0
   d4fdc:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4fde:	f000 fd2b 	bl	d5a38 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d4fe2:	462a      	mov	r2, r5
   d4fe4:	4601      	mov	r1, r0
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	f7ff ffed 	bl	d4fc6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d4fec:	4620      	mov	r0, r4
   d4fee:	bd38      	pop	{r3, r4, r5, pc}

000d4ff0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d4ff0:	6800      	ldr	r0, [r0, #0]
   d4ff2:	f000 bb2a 	b.w	d564a <_ZN7TwoWire6unlockEv>

000d4ff6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d4ff6:	b510      	push	{r4, lr}
{
    if (lock_) {
   d4ff8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d4ffa:	4604      	mov	r4, r0
{
    if (lock_) {
   d4ffc:	b10b      	cbz	r3, d5002 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d4ffe:	f7ff fff7 	bl	d4ff0 <_ZN9FuelGauge6unlockEv>
    }
}
   d5002:	4620      	mov	r0, r4
   d5004:	bd10      	pop	{r4, pc}

000d5006 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d5006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5008:	4604      	mov	r4, r0
   d500a:	4616      	mov	r6, r2
   d500c:	461d      	mov	r5, r3
   d500e:	460f      	mov	r7, r1
   d5010:	f7ff ffd6 	bl	d4fc0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d5014:	6820      	ldr	r0, [r4, #0]
   d5016:	2136      	movs	r1, #54	; 0x36
   d5018:	f000 fb00 	bl	d561c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d501c:	6820      	ldr	r0, [r4, #0]
   d501e:	6803      	ldr	r3, [r0, #0]
   d5020:	4639      	mov	r1, r7
   d5022:	689b      	ldr	r3, [r3, #8]
   d5024:	4798      	blx	r3
    i2c_.endTransmission(true);
   d5026:	2101      	movs	r1, #1
   d5028:	6820      	ldr	r0, [r4, #0]
   d502a:	f000 fafa 	bl	d5622 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d502e:	2202      	movs	r2, #2
   d5030:	2136      	movs	r1, #54	; 0x36
   d5032:	2301      	movs	r3, #1
   d5034:	6820      	ldr	r0, [r4, #0]
   d5036:	f000 fae8 	bl	d560a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d503a:	6820      	ldr	r0, [r4, #0]
   d503c:	6803      	ldr	r3, [r0, #0]
   d503e:	695b      	ldr	r3, [r3, #20]
   d5040:	4798      	blx	r3
   d5042:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d5044:	6820      	ldr	r0, [r4, #0]
   d5046:	6803      	ldr	r3, [r0, #0]
   d5048:	695b      	ldr	r3, [r3, #20]
   d504a:	4798      	blx	r3
   d504c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d504e:	4620      	mov	r0, r4
}
   d5050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d5054:	f7ff bfcc 	b.w	d4ff0 <_ZN9FuelGauge6unlockEv>

000d5058 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d5058:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d505a:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d505c:	2200      	movs	r2, #0
   d505e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d5062:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d5066:	2102      	movs	r1, #2
   d5068:	f10d 0206 	add.w	r2, sp, #6
   d506c:	f7ff ffcb 	bl	d5006 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d5070:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5074:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d5078:	b003      	add	sp, #12
   d507a:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d507e:	f7ff bf91 	b.w	d4fa4 <_ZN6detail9_getVCellEhh>
	...

000d5084 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d5084:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d5086:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d5088:	2200      	movs	r2, #0
	byte LSB = 0;
   d508a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d508e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d5092:	2104      	movs	r1, #4
   d5094:	f10d 0206 	add.w	r2, sp, #6
   d5098:	f7ff ffb5 	bl	d5006 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d509c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d50a0:	f000 ff8c 	bl	d5fbc <__aeabi_i2d>
   d50a4:	2200      	movs	r2, #0
   d50a6:	4b09      	ldr	r3, [pc, #36]	; (d50cc <_ZN9FuelGauge6getSoCEv+0x48>)
   d50a8:	f000 ffee 	bl	d6088 <__aeabi_dmul>
   d50ac:	f001 fae4 	bl	d6678 <__aeabi_d2f>
   d50b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d50b4:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d50b8:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d50bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d50c0:	ee37 0a80 	vadd.f32	s0, s15, s0
   d50c4:	b003      	add	sp, #12
   d50c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d50ca:	bf00      	nop
   d50cc:	3f700000 	.word	0x3f700000

000d50d0 <_ZN9FuelGauge18readConfigRegisterERhS0_>:

}


void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
   d50d0:	4613      	mov	r3, r2
   d50d2:	460a      	mov	r2, r1
   d50d4:	210c      	movs	r1, #12
   d50d6:	f7ff bf96 	b.w	d5006 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d50da <_ZN9FuelGauge13writeRegisterEhhh>:
    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
    MSB = i2c_.read();
    LSB = i2c_.read();
}

void FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d50da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50dc:	4604      	mov	r4, r0
   d50de:	4616      	mov	r6, r2
   d50e0:	461d      	mov	r5, r3
   d50e2:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d50e4:	f7ff ff6c 	bl	d4fc0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d50e8:	6820      	ldr	r0, [r4, #0]
   d50ea:	2136      	movs	r1, #54	; 0x36
   d50ec:	f000 fa96 	bl	d561c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(address);
   d50f0:	6820      	ldr	r0, [r4, #0]
   d50f2:	6803      	ldr	r3, [r0, #0]
   d50f4:	4639      	mov	r1, r7
   d50f6:	689b      	ldr	r3, [r3, #8]
   d50f8:	4798      	blx	r3
    i2c_.write(MSB);
   d50fa:	6820      	ldr	r0, [r4, #0]
   d50fc:	6803      	ldr	r3, [r0, #0]
   d50fe:	4631      	mov	r1, r6
   d5100:	689b      	ldr	r3, [r3, #8]
   d5102:	4798      	blx	r3
    i2c_.write(LSB);
   d5104:	6820      	ldr	r0, [r4, #0]
   d5106:	6803      	ldr	r3, [r0, #0]
   d5108:	4629      	mov	r1, r5
   d510a:	689a      	ldr	r2, [r3, #8]
   d510c:	4790      	blx	r2
    i2c_.endTransmission(true);
   d510e:	6820      	ldr	r0, [r4, #0]
   d5110:	2101      	movs	r1, #1
   d5112:	f000 fa86 	bl	d5622 <_ZN7TwoWire15endTransmissionEh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5116:	4620      	mov	r0, r4
}
   d5118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d511c:	f7ff bf68 	b.w	d4ff0 <_ZN9FuelGauge6unlockEv>

000d5120 <_ZN9FuelGauge5sleepEv>:
void FuelGauge::quickStart() {

	writeRegister(MODE_REGISTER, 0x40, 0x00);
}

void FuelGauge::sleep() {
   d5120:	b513      	push	{r0, r1, r4, lr}
   d5122:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5124:	f7ff ff4c 	bl	d4fc0 <_ZN9FuelGauge4lockEv>

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
	byte LSB = 0;
   d5128:	aa02      	add	r2, sp, #8
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d512a:	2300      	movs	r3, #0
	byte LSB = 0;
   d512c:	f802 3d01 	strb.w	r3, [r2, #-1]!

	readConfigRegister(MSB, LSB);
   d5130:	f10d 0106 	add.w	r1, sp, #6
   d5134:	4620      	mov	r0, r4
}

void FuelGauge::sleep() {

    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
   d5136:	f88d 3006 	strb.w	r3, [sp, #6]
	byte LSB = 0;

	readConfigRegister(MSB, LSB);
   d513a:	f7ff ffc9 	bl	d50d0 <_ZN9FuelGauge18readConfigRegisterERhS0_>

	writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000));
   d513e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5142:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d514a:	210c      	movs	r1, #12
   d514c:	4620      	mov	r0, r4
   d514e:	f7ff ffc4 	bl	d50da <_ZN9FuelGauge13writeRegisterEhhh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5152:	4620      	mov	r0, r4
   d5154:	f7ff ff4c 	bl	d4ff0 <_ZN9FuelGauge6unlockEv>

}
   d5158:	b002      	add	sp, #8
   d515a:	bd10      	pop	{r4, pc}

000d515c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d515c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d515e:	4b0c      	ldr	r3, [pc, #48]	; (d5190 <serialEventRun+0x34>)
   d5160:	b133      	cbz	r3, d5170 <serialEventRun+0x14>
   d5162:	f000 f921 	bl	d53a8 <_Z16_fetch_usbserialv>
   d5166:	6803      	ldr	r3, [r0, #0]
   d5168:	691b      	ldr	r3, [r3, #16]
   d516a:	4798      	blx	r3
   d516c:	2800      	cmp	r0, #0
   d516e:	dc09      	bgt.n	d5184 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5170:	4b08      	ldr	r3, [pc, #32]	; (d5194 <serialEventRun+0x38>)
   d5172:	b163      	cbz	r3, d518e <serialEventRun+0x32>
   d5174:	f000 f9d6 	bl	d5524 <_Z22__fetch_global_Serial1v>
   d5178:	6803      	ldr	r3, [r0, #0]
   d517a:	691b      	ldr	r3, [r3, #16]
   d517c:	4798      	blx	r3
   d517e:	2800      	cmp	r0, #0
   d5180:	dc03      	bgt.n	d518a <serialEventRun+0x2e>
   d5182:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5184:	f3af 8000 	nop.w
   d5188:	e7f2      	b.n	d5170 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d518a:	f3af 8000 	nop.w
   d518e:	bd08      	pop	{r3, pc}
	...

000d5198 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5198:	b508      	push	{r3, lr}
	serialEventRun();
   d519a:	f7ff ffdf 	bl	d515c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d519e:	f7ff f9e5 	bl	d456c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d51a2:	4b01      	ldr	r3, [pc, #4]	; (d51a8 <_post_loop+0x10>)
   d51a4:	6018      	str	r0, [r3, #0]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	2003e71c 	.word	0x2003e71c

000d51ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d51ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51ae:	2300      	movs	r3, #0
   d51b0:	9300      	str	r3, [sp, #0]
   d51b2:	461a      	mov	r2, r3
   d51b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51b8:	f7ff fb32 	bl	d4820 <system_ctrl_set_result>
}
   d51bc:	b003      	add	sp, #12
   d51be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d51c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d51c6:	8843      	ldrh	r3, [r0, #2]
   d51c8:	2b0a      	cmp	r3, #10
   d51ca:	d008      	beq.n	d51de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51cc:	2b50      	cmp	r3, #80	; 0x50
   d51ce:	d109      	bne.n	d51e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d51d0:	4b09      	ldr	r3, [pc, #36]	; (d51f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51d2:	681b      	ldr	r3, [r3, #0]
   d51d4:	b13b      	cbz	r3, d51e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d51d6:	b003      	add	sp, #12
   d51d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d51dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d51de:	f7ff ffe5 	bl	d51ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d51e2:	e006      	b.n	d51f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51e4:	2300      	movs	r3, #0
   d51e6:	9300      	str	r3, [sp, #0]
   d51e8:	461a      	mov	r2, r3
   d51ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51ee:	f7ff fb17 	bl	d4820 <system_ctrl_set_result>
        break;
    }
}
   d51f2:	b003      	add	sp, #12
   d51f4:	f85d fb04 	ldr.w	pc, [sp], #4
   d51f8:	2003e390 	.word	0x2003e390

000d51fc <module_user_init_hook>:

void module_user_init_hook()
{
   d51fc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51fe:	f7ff f9a5 	bl	d454c <HAL_RNG_GetRandomNumber>
   d5202:	4604      	mov	r4, r0
    srand(seed);
   d5204:	f001 faaa 	bl	d675c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5208:	4b07      	ldr	r3, [pc, #28]	; (d5228 <module_user_init_hook+0x2c>)
   d520a:	b113      	cbz	r3, d5212 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d520c:	4620      	mov	r0, r4
   d520e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5212:	2100      	movs	r1, #0
   d5214:	4804      	ldr	r0, [pc, #16]	; (d5228 <module_user_init_hook+0x2c>)
   d5216:	f7ff fb65 	bl	d48e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d521a:	2100      	movs	r1, #0
   d521c:	4803      	ldr	r0, [pc, #12]	; (d522c <module_user_init_hook+0x30>)
}
   d521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5222:	f7ff baf3 	b.w	d480c <system_ctrl_set_app_request_handler>
   d5226:	bf00      	nop
   d5228:	00000000 	.word	0x00000000
   d522c:	000d51c5 	.word	0x000d51c5

000d5230 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5230:	4770      	bx	lr

000d5232 <_ZN9IPAddressD0Ev>:
   d5232:	b510      	push	{r4, lr}
   d5234:	4604      	mov	r4, r0
   d5236:	f7fe ff2e 	bl	d4096 <_ZdlPv>
   d523a:	4620      	mov	r0, r4
   d523c:	bd10      	pop	{r4, pc}

000d523e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d523e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5240:	7d03      	ldrb	r3, [r0, #20]
   d5242:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5244:	b08d      	sub	sp, #52	; 0x34
   d5246:	460e      	mov	r6, r1
   d5248:	f100 0704 	add.w	r7, r0, #4
   d524c:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5250:	d002      	beq.n	d5258 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5252:	f100 0508 	add.w	r5, r0, #8
   d5256:	e018      	b.n	d528a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5258:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d525a:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d525c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5260:	232f      	movs	r3, #47	; 0x2f
   d5262:	462a      	mov	r2, r5
   d5264:	200a      	movs	r0, #10
   d5266:	f7ff f9c9 	bl	d45fc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d526a:	4628      	mov	r0, r5
   d526c:	f001 fa9e 	bl	d67ac <strlen>
   d5270:	6833      	ldr	r3, [r6, #0]
   d5272:	4602      	mov	r2, r0
   d5274:	68db      	ldr	r3, [r3, #12]
   d5276:	4629      	mov	r1, r5
   d5278:	4630      	mov	r0, r6
   d527a:	4798      	blx	r3
   d527c:	e00f      	b.n	d529e <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d527e:	b124      	cbz	r4, d528a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5280:	212e      	movs	r1, #46	; 0x2e
   d5282:	4630      	mov	r0, r6
   d5284:	f7ff fcf2 	bl	d4c6c <_ZN5Print5printEc>
   d5288:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d528a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d528e:	220a      	movs	r2, #10
   d5290:	4630      	mov	r0, r6
   d5292:	f7ff fd31 	bl	d4cf8 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5296:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5298:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d529a:	d1f0      	bne.n	d527e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d529c:	4620      	mov	r0, r4
    }
    return n;
}
   d529e:	b00d      	add	sp, #52	; 0x34
   d52a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d52a4 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d52a4:	b510      	push	{r4, lr}
   d52a6:	4b05      	ldr	r3, [pc, #20]	; (d52bc <_ZN9IPAddressC1Ev+0x18>)
   d52a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d52aa:	2211      	movs	r2, #17
   d52ac:	f840 3b04 	str.w	r3, [r0], #4
   d52b0:	2100      	movs	r1, #0
   d52b2:	f001 fa4a 	bl	d674a <memset>
{
    clear();
}
   d52b6:	4620      	mov	r0, r4
   d52b8:	bd10      	pop	{r4, pc}
   d52ba:	bf00      	nop
   d52bc:	000d6a64 	.word	0x000d6a64

000d52c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d52c0:	4603      	mov	r3, r0
   d52c2:	4a07      	ldr	r2, [pc, #28]	; (d52e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52c4:	b510      	push	{r4, lr}
   d52c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52ca:	f101 0210 	add.w	r2, r1, #16
   d52ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d52d2:	f843 4b04 	str.w	r4, [r3], #4
   d52d6:	4291      	cmp	r1, r2
   d52d8:	d1f9      	bne.n	d52ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52da:	780a      	ldrb	r2, [r1, #0]
   d52dc:	701a      	strb	r2, [r3, #0]
}
   d52de:	bd10      	pop	{r4, pc}
   d52e0:	000d6a64 	.word	0x000d6a64

000d52e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52f6:	2304      	movs	r3, #4
   d52f8:	6041      	str	r1, [r0, #4]
   d52fa:	7503      	strb	r3, [r0, #20]
   d52fc:	bd10      	pop	{r4, pc}

000d52fe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d52fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5300:	780d      	ldrb	r5, [r1, #0]
   d5302:	788b      	ldrb	r3, [r1, #2]
   d5304:	784a      	ldrb	r2, [r1, #1]
   d5306:	78c9      	ldrb	r1, [r1, #3]
   d5308:	9100      	str	r1, [sp, #0]
   d530a:	4629      	mov	r1, r5
   d530c:	f7ff ffea 	bl	d52e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5310:	b003      	add	sp, #12
   d5312:	bd30      	pop	{r4, r5, pc}

000d5314 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5314:	7441      	strb	r1, [r0, #17]
   d5316:	4770      	bx	lr

000d5318 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5318:	4770      	bx	lr

000d531a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d531a:	2100      	movs	r1, #0
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	f7ff ba3d 	b.w	d479c <HAL_USB_USART_Receive_Data>

000d5322 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5322:	2101      	movs	r1, #1
   d5324:	7c00      	ldrb	r0, [r0, #16]
   d5326:	f7ff ba39 	b.w	d479c <HAL_USB_USART_Receive_Data>

000d532a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d532a:	7c00      	ldrb	r0, [r0, #16]
   d532c:	f7ff ba2e 	b.w	d478c <HAL_USB_USART_Available_Data_For_Write>

000d5330 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5330:	7c00      	ldrb	r0, [r0, #16]
   d5332:	f7ff ba23 	b.w	d477c <HAL_USB_USART_Available_Data>

000d5336 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5336:	b538      	push	{r3, r4, r5, lr}
   d5338:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d533a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d533c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d533e:	f7ff fa25 	bl	d478c <HAL_USB_USART_Available_Data_For_Write>
   d5342:	2800      	cmp	r0, #0
   d5344:	dc01      	bgt.n	d534a <_ZN9USBSerial5writeEh+0x14>
   d5346:	7c60      	ldrb	r0, [r4, #17]
   d5348:	b120      	cbz	r0, d5354 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d534a:	4629      	mov	r1, r5
   d534c:	7c20      	ldrb	r0, [r4, #16]
   d534e:	f7ff fa2d 	bl	d47ac <HAL_USB_USART_Send_Data>
    return 1;
   d5352:	2001      	movs	r0, #1
  }
  return 0;
}
   d5354:	bd38      	pop	{r3, r4, r5, pc}

000d5356 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5356:	7c00      	ldrb	r0, [r0, #16]
   d5358:	f7ff ba30 	b.w	d47bc <HAL_USB_USART_Flush_Data>

000d535c <_ZN9USBSerialD0Ev>:
   d535c:	b510      	push	{r4, lr}
   d535e:	4604      	mov	r4, r0
   d5360:	f7fe fe99 	bl	d4096 <_ZdlPv>
   d5364:	4620      	mov	r0, r4
   d5366:	bd10      	pop	{r4, pc}

000d5368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5368:	b510      	push	{r4, lr}
   d536a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d536c:	2300      	movs	r3, #0
   d536e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5374:	60a3      	str	r3, [r4, #8]
   d5376:	4b05      	ldr	r3, [pc, #20]	; (d538c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5378:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d537a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d537c:	4608      	mov	r0, r1
{
  _serial = serial;
   d537e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5380:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5382:	4611      	mov	r1, r2
   d5384:	f7ff f9ea 	bl	d475c <HAL_USB_USART_Init>
}
   d5388:	4620      	mov	r0, r4
   d538a:	bd10      	pop	{r4, pc}
   d538c:	000d6a78 	.word	0x000d6a78

000d5390 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5390:	2200      	movs	r2, #0
   d5392:	7c00      	ldrb	r0, [r0, #16]
   d5394:	f7ff b9ea 	b.w	d476c <HAL_USB_USART_Begin>

000d5398 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5398:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d539a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d539c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d539e:	2100      	movs	r1, #0
   d53a0:	f001 f9d3 	bl	d674a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53a4:	4620      	mov	r0, r4
   d53a6:	bd10      	pop	{r4, pc}

000d53a8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53a8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53aa:	4d0e      	ldr	r5, [pc, #56]	; (d53e4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53ac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53ae:	a801      	add	r0, sp, #4
   d53b0:	f7ff fff2 	bl	d5398 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53b4:	6829      	ldr	r1, [r5, #0]
   d53b6:	f011 0401 	ands.w	r4, r1, #1
   d53ba:	d110      	bne.n	d53de <_Z16_fetch_usbserialv+0x36>
   d53bc:	4628      	mov	r0, r5
   d53be:	f7fe fe6e 	bl	d409e <__cxa_guard_acquire>
   d53c2:	b160      	cbz	r0, d53de <_Z16_fetch_usbserialv+0x36>
   d53c4:	aa01      	add	r2, sp, #4
   d53c6:	4621      	mov	r1, r4
   d53c8:	4807      	ldr	r0, [pc, #28]	; (d53e8 <_Z16_fetch_usbserialv+0x40>)
   d53ca:	f7ff ffcd 	bl	d5368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53ce:	4628      	mov	r0, r5
   d53d0:	f7fe fe6a 	bl	d40a8 <__cxa_guard_release>
   d53d4:	4a05      	ldr	r2, [pc, #20]	; (d53ec <_Z16_fetch_usbserialv+0x44>)
   d53d6:	4906      	ldr	r1, [pc, #24]	; (d53f0 <_Z16_fetch_usbserialv+0x48>)
   d53d8:	4803      	ldr	r0, [pc, #12]	; (d53e8 <_Z16_fetch_usbserialv+0x40>)
   d53da:	f000 fb4d 	bl	d5a78 <__aeabi_atexit>
	return _usbserial;
}
   d53de:	4802      	ldr	r0, [pc, #8]	; (d53e8 <_Z16_fetch_usbserialv+0x40>)
   d53e0:	b007      	add	sp, #28
   d53e2:	bd30      	pop	{r4, r5, pc}
   d53e4:	2003e394 	.word	0x2003e394
   d53e8:	2003e398 	.word	0x2003e398
   d53ec:	2003e304 	.word	0x2003e304
   d53f0:	000d5319 	.word	0x000d5319

000d53f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d53f4:	2200      	movs	r2, #0
   d53f6:	4611      	mov	r1, r2
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	f7ff ba33 	b.w	d4864 <network_ready>

000d53fe <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53fe:	2200      	movs	r2, #0
   d5400:	4611      	mov	r1, r2
   d5402:	6840      	ldr	r0, [r0, #4]
   d5404:	f7ff ba4e 	b.w	d48a4 <network_listening>

000d5408 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5408:	2200      	movs	r2, #0
   d540a:	4611      	mov	r1, r2
   d540c:	6840      	ldr	r0, [r0, #4]
   d540e:	f7ff ba59 	b.w	d48c4 <network_get_listen_timeout>

000d5412 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5412:	2200      	movs	r2, #0
   d5414:	6840      	ldr	r0, [r0, #4]
   d5416:	f7ff ba4d 	b.w	d48b4 <network_set_listen_timeout>

000d541a <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d541a:	2200      	movs	r2, #0
   d541c:	f081 0101 	eor.w	r1, r1, #1
   d5420:	6840      	ldr	r0, [r0, #4]
   d5422:	f7ff ba37 	b.w	d4894 <network_listen>

000d5426 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5426:	2300      	movs	r3, #0
   d5428:	461a      	mov	r2, r3
   d542a:	4619      	mov	r1, r3
   d542c:	6840      	ldr	r0, [r0, #4]
   d542e:	f7ff ba29 	b.w	d4884 <network_off>

000d5432 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5432:	2300      	movs	r3, #0
   d5434:	461a      	mov	r2, r3
   d5436:	4619      	mov	r1, r3
   d5438:	6840      	ldr	r0, [r0, #4]
   d543a:	f7ff ba1b 	b.w	d4874 <network_on>

000d543e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d543e:	2200      	movs	r2, #0
   d5440:	4611      	mov	r1, r2
   d5442:	6840      	ldr	r0, [r0, #4]
   d5444:	f7ff b9fe 	b.w	d4844 <network_connecting>

000d5448 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5448:	2200      	movs	r2, #0
   d544a:	2102      	movs	r1, #2
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	f7ff ba01 	b.w	d4854 <network_disconnect>

000d5452 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5452:	2300      	movs	r3, #0
   d5454:	461a      	mov	r2, r3
   d5456:	6840      	ldr	r0, [r0, #4]
   d5458:	f7ff b9ec 	b.w	d4834 <network_connect>

000d545c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d545c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d545e:	4d0c      	ldr	r5, [pc, #48]	; (d5490 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d5460:	2428      	movs	r4, #40	; 0x28
   d5462:	4622      	mov	r2, r4
   d5464:	2100      	movs	r1, #0
   d5466:	4628      	mov	r0, r5
   d5468:	f001 f96f 	bl	d674a <memset>
        cid = -1;
   d546c:	f04f 33ff 	mov.w	r3, #4294967295
   d5470:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d5472:	802c      	strh	r4, [r5, #0]
   d5474:	4d07      	ldr	r5, [pc, #28]	; (d5494 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d5476:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5478:	4628      	mov	r0, r5
   d547a:	606b      	str	r3, [r5, #4]
   d547c:	4b06      	ldr	r3, [pc, #24]	; (d5498 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d547e:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d5482:	4622      	mov	r2, r4
   d5484:	2100      	movs	r1, #0
   d5486:	f001 f960 	bl	d674a <memset>
        size = sizeof(*this);
   d548a:	812c      	strh	r4, [r5, #8]
   d548c:	bd38      	pop	{r3, r4, r5, pc}
   d548e:	bf00      	nop
   d5490:	2003e3dc 	.word	0x2003e3dc
   d5494:	2003e3ac 	.word	0x2003e3ac
   d5498:	000d6aa8 	.word	0x000d6aa8

000d549c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d549c:	4770      	bx	lr

000d549e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d549e:	7441      	strb	r1, [r0, #17]
   d54a0:	4770      	bx	lr

000d54a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d54a2:	7c00      	ldrb	r0, [r0, #16]
   d54a4:	f7ff b8ea 	b.w	d467c <HAL_USART_Available_Data_For_Write>

000d54a8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d54a8:	7c00      	ldrb	r0, [r0, #16]
   d54aa:	f7ff b8bf 	b.w	d462c <HAL_USART_Available_Data>

000d54ae <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d54ae:	7c00      	ldrb	r0, [r0, #16]
   d54b0:	f7ff b8cc 	b.w	d464c <HAL_USART_Peek_Data>

000d54b4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d54b4:	7c00      	ldrb	r0, [r0, #16]
   d54b6:	f7ff b8c1 	b.w	d463c <HAL_USART_Read_Data>

000d54ba <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d54ba:	7c00      	ldrb	r0, [r0, #16]
   d54bc:	f7ff b8ce 	b.w	d465c <HAL_USART_Flush_Data>

000d54c0 <_ZN11USARTSerialD0Ev>:
   d54c0:	b510      	push	{r4, lr}
   d54c2:	4604      	mov	r4, r0
   d54c4:	f7fe fde7 	bl	d4096 <_ZdlPv>
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd10      	pop	{r4, pc}

000d54cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54cc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54ce:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d54d0:	4604      	mov	r4, r0
   d54d2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d54d4:	b925      	cbnz	r5, d54e0 <_ZN11USARTSerial5writeEh+0x14>
   d54d6:	7c00      	ldrb	r0, [r0, #16]
   d54d8:	f7ff f8d0 	bl	d467c <HAL_USART_Available_Data_For_Write>
   d54dc:	2800      	cmp	r0, #0
   d54de:	dd05      	ble.n	d54ec <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54e0:	4631      	mov	r1, r6
   d54e2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54e8:	f7ff b898 	b.w	d461c <HAL_USART_Write_Data>
  }
  return 0;
}
   d54ec:	4628      	mov	r0, r5
   d54ee:	bd70      	pop	{r4, r5, r6, pc}

000d54f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54f0:	b510      	push	{r4, lr}
   d54f2:	4604      	mov	r4, r0
   d54f4:	4608      	mov	r0, r1
   d54f6:	4611      	mov	r1, r2
   d54f8:	2200      	movs	r2, #0
   d54fa:	6062      	str	r2, [r4, #4]
   d54fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5500:	60a2      	str	r2, [r4, #8]
   d5502:	4a05      	ldr	r2, [pc, #20]	; (d5518 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5504:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5506:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5508:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d550a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d550c:	461a      	mov	r2, r3
   d550e:	f7ff f87d 	bl	d460c <HAL_USART_Init>
}
   d5512:	4620      	mov	r0, r4
   d5514:	bd10      	pop	{r4, pc}
   d5516:	bf00      	nop
   d5518:	000d6adc 	.word	0x000d6adc

000d551c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d551c:	7c00      	ldrb	r0, [r0, #16]
   d551e:	f7ff b8a5 	b.w	d466c <HAL_USART_Is_Enabled>
	...

000d5524 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5524:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5526:	4d0c      	ldr	r5, [pc, #48]	; (d5558 <_Z22__fetch_global_Serial1v+0x34>)
   d5528:	6829      	ldr	r1, [r5, #0]
   d552a:	f011 0401 	ands.w	r4, r1, #1
   d552e:	d111      	bne.n	d5554 <_Z22__fetch_global_Serial1v+0x30>
   d5530:	4628      	mov	r0, r5
   d5532:	f7fe fdb4 	bl	d409e <__cxa_guard_acquire>
   d5536:	b168      	cbz	r0, d5554 <_Z22__fetch_global_Serial1v+0x30>
   d5538:	4a08      	ldr	r2, [pc, #32]	; (d555c <_Z22__fetch_global_Serial1v+0x38>)
   d553a:	4b09      	ldr	r3, [pc, #36]	; (d5560 <_Z22__fetch_global_Serial1v+0x3c>)
   d553c:	4809      	ldr	r0, [pc, #36]	; (d5564 <_Z22__fetch_global_Serial1v+0x40>)
   d553e:	4621      	mov	r1, r4
   d5540:	f7ff ffd6 	bl	d54f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5544:	4628      	mov	r0, r5
   d5546:	f7fe fdaf 	bl	d40a8 <__cxa_guard_release>
   d554a:	4a07      	ldr	r2, [pc, #28]	; (d5568 <_Z22__fetch_global_Serial1v+0x44>)
   d554c:	4907      	ldr	r1, [pc, #28]	; (d556c <_Z22__fetch_global_Serial1v+0x48>)
   d554e:	4805      	ldr	r0, [pc, #20]	; (d5564 <_Z22__fetch_global_Serial1v+0x40>)
   d5550:	f000 fa92 	bl	d5a78 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5554:	4803      	ldr	r0, [pc, #12]	; (d5564 <_Z22__fetch_global_Serial1v+0x40>)
   d5556:	bd38      	pop	{r3, r4, r5, pc}
   d5558:	2003e49c 	.word	0x2003e49c
   d555c:	2003e4a0 	.word	0x2003e4a0
   d5560:	2003e418 	.word	0x2003e418
   d5564:	2003e404 	.word	0x2003e404
   d5568:	2003e304 	.word	0x2003e304
   d556c:	000d549d 	.word	0x000d549d

000d5570 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5570:	4770      	bx	lr

000d5572 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5574:	4606      	mov	r6, r0
   d5576:	4615      	mov	r5, r2
   d5578:	460c      	mov	r4, r1
   d557a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d557c:	42bc      	cmp	r4, r7
   d557e:	d006      	beq.n	d558e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5580:	6833      	ldr	r3, [r6, #0]
   d5582:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5586:	689b      	ldr	r3, [r3, #8]
   d5588:	4630      	mov	r0, r6
   d558a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d558c:	e7f6      	b.n	d557c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d558e:	4628      	mov	r0, r5
   d5590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5592 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5592:	2200      	movs	r2, #0
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	f7ff b899 	b.w	d46cc <HAL_I2C_Write_Data>

000d559a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d559a:	2100      	movs	r1, #0
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	f7ff b89d 	b.w	d46dc <HAL_I2C_Available_Data>

000d55a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55a2:	2100      	movs	r1, #0
   d55a4:	7c00      	ldrb	r0, [r0, #16]
   d55a6:	f7ff b8a1 	b.w	d46ec <HAL_I2C_Read_Data>

000d55aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d55aa:	2100      	movs	r1, #0
   d55ac:	7c00      	ldrb	r0, [r0, #16]
   d55ae:	f7ff b8a5 	b.w	d46fc <HAL_I2C_Peek_Data>

000d55b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d55b2:	2100      	movs	r1, #0
   d55b4:	7c00      	ldrb	r0, [r0, #16]
   d55b6:	f7ff b8a9 	b.w	d470c <HAL_I2C_Flush_Data>

000d55ba <_ZN7TwoWireD0Ev>:
   d55ba:	b510      	push	{r4, lr}
   d55bc:	4604      	mov	r4, r0
   d55be:	f7fe fd6a 	bl	d4096 <_ZdlPv>
   d55c2:	4620      	mov	r0, r4
   d55c4:	bd10      	pop	{r4, pc}
	...

000d55c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d55c8:	b510      	push	{r4, lr}
   d55ca:	4604      	mov	r4, r0
   d55cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55d0:	4608      	mov	r0, r1
   d55d2:	60a3      	str	r3, [r4, #8]
   d55d4:	2100      	movs	r1, #0
   d55d6:	4b04      	ldr	r3, [pc, #16]	; (d55e8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d55d8:	7420      	strb	r0, [r4, #16]
   d55da:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d55dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d55de:	f7ff f8a5 	bl	d472c <HAL_I2C_Init>

}
   d55e2:	4620      	mov	r0, r4
   d55e4:	bd10      	pop	{r4, pc}
   d55e6:	bf00      	nop
   d55e8:	000d6b0c 	.word	0x000d6b0c

000d55ec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d55ec:	2300      	movs	r3, #0
   d55ee:	461a      	mov	r2, r3
   d55f0:	4619      	mov	r1, r3
   d55f2:	7c00      	ldrb	r0, [r0, #16]
   d55f4:	f7ff b84a 	b.w	d468c <HAL_I2C_Begin>

000d55f8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d55f8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d55fa:	2400      	movs	r4, #0
   d55fc:	7c00      	ldrb	r0, [r0, #16]
   d55fe:	9400      	str	r4, [sp, #0]
   d5600:	f7ff f84c 	bl	d469c <HAL_I2C_Request_Data>
  return result;
}
   d5604:	b2c0      	uxtb	r0, r0
   d5606:	b002      	add	sp, #8
   d5608:	bd10      	pop	{r4, pc}

000d560a <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d560a:	b2db      	uxtb	r3, r3
   d560c:	b2d2      	uxtb	r2, r2
   d560e:	b2c9      	uxtb	r1, r1
   d5610:	f7ff bff2 	b.w	d55f8 <_ZN7TwoWire11requestFromEhhh>

000d5614 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5614:	2200      	movs	r2, #0
   d5616:	7c00      	ldrb	r0, [r0, #16]
   d5618:	f7ff b848 	b.w	d46ac <HAL_I2C_Begin_Transmission>

000d561c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d561c:	b2c9      	uxtb	r1, r1
   d561e:	f7ff bff9 	b.w	d5614 <_ZN7TwoWire17beginTransmissionEh>

000d5622 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5622:	2200      	movs	r2, #0
   d5624:	7c00      	ldrb	r0, [r0, #16]
   d5626:	f7ff b849 	b.w	d46bc <HAL_I2C_End_Transmission>

000d562a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d562a:	2101      	movs	r1, #1
   d562c:	f7ff bff9 	b.w	d5622 <_ZN7TwoWire15endTransmissionEh>

000d5630 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5630:	2100      	movs	r1, #0
   d5632:	7c00      	ldrb	r0, [r0, #16]
   d5634:	f7ff b872 	b.w	d471c <HAL_I2C_Is_Enabled>

000d5638 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5638:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d563a:	2100      	movs	r1, #0
   d563c:	7c00      	ldrb	r0, [r0, #16]
   d563e:	f7ff f87d 	bl	d473c <HAL_I2C_Acquire>
}
   d5642:	fab0 f080 	clz	r0, r0
   d5646:	0940      	lsrs	r0, r0, #5
   d5648:	bd08      	pop	{r3, pc}

000d564a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d564a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d564c:	2100      	movs	r1, #0
   d564e:	7c00      	ldrb	r0, [r0, #16]
   d5650:	f7ff f87c 	bl	d474c <HAL_I2C_Release>
}
   d5654:	fab0 f080 	clz	r0, r0
   d5658:	0940      	lsrs	r0, r0, #5
   d565a:	bd08      	pop	{r3, pc}

000d565c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d565c:	2200      	movs	r2, #0
   d565e:	4611      	mov	r1, r2
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	f7ff b91f 	b.w	d48a4 <network_listening>

000d5666 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5666:	2200      	movs	r2, #0
   d5668:	4611      	mov	r1, r2
   d566a:	6840      	ldr	r0, [r0, #4]
   d566c:	f7ff b92a 	b.w	d48c4 <network_get_listen_timeout>

000d5670 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5670:	2200      	movs	r2, #0
   d5672:	6840      	ldr	r0, [r0, #4]
   d5674:	f7ff b91e 	b.w	d48b4 <network_set_listen_timeout>

000d5678 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	f081 0101 	eor.w	r1, r1, #1
   d567e:	6840      	ldr	r0, [r0, #4]
   d5680:	f7ff b908 	b.w	d4894 <network_listen>

000d5684 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5684:	2300      	movs	r3, #0
   d5686:	461a      	mov	r2, r3
   d5688:	4619      	mov	r1, r3
   d568a:	6840      	ldr	r0, [r0, #4]
   d568c:	f7ff b8fa 	b.w	d4884 <network_off>

000d5690 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5690:	2300      	movs	r3, #0
   d5692:	461a      	mov	r2, r3
   d5694:	4619      	mov	r1, r3
   d5696:	6840      	ldr	r0, [r0, #4]
   d5698:	f7ff b8ec 	b.w	d4874 <network_on>

000d569c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d569c:	2200      	movs	r2, #0
   d569e:	4611      	mov	r1, r2
   d56a0:	6840      	ldr	r0, [r0, #4]
   d56a2:	f7ff b8df 	b.w	d4864 <network_ready>

000d56a6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56a6:	2200      	movs	r2, #0
   d56a8:	4611      	mov	r1, r2
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	f7ff b8ca 	b.w	d4844 <network_connecting>

000d56b0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56b0:	2200      	movs	r2, #0
   d56b2:	2102      	movs	r1, #2
   d56b4:	6840      	ldr	r0, [r0, #4]
   d56b6:	f7ff b8cd 	b.w	d4854 <network_disconnect>

000d56ba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56ba:	2300      	movs	r3, #0
   d56bc:	461a      	mov	r2, r3
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	f7ff b8b8 	b.w	d4834 <network_connect>

000d56c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56c4:	b110      	cbz	r0, d56cc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d56c6:	6803      	ldr	r3, [r0, #0]
   d56c8:	685b      	ldr	r3, [r3, #4]
   d56ca:	4718      	bx	r3
   d56cc:	4770      	bx	lr

000d56ce <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d56ce:	b538      	push	{r3, r4, r5, lr}
   d56d0:	4604      	mov	r4, r0
   d56d2:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d56d4:	b1d0      	cbz	r0, d570c <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d56d6:	f7fe ff61 	bl	d459c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d56da:	b9b8      	cbnz	r0, d570c <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d56dc:	7c23      	ldrb	r3, [r4, #16]
   d56de:	b91b      	cbnz	r3, d56e8 <_ZN6Thread7disposeEv+0x1a>
   d56e0:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d56e2:	b108      	cbz	r0, d56e8 <_ZN6Thread7disposeEv+0x1a>
   d56e4:	f7fe ff62 	bl	d45ac <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d56e8:	6865      	ldr	r5, [r4, #4]
   d56ea:	b155      	cbz	r5, d5702 <_ZN6Thread7disposeEv+0x34>

    ~_Function_base()
    {
      if (_M_manager)
   d56ec:	68ab      	ldr	r3, [r5, #8]
   d56ee:	b11b      	cbz	r3, d56f8 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56f0:	2203      	movs	r2, #3
   d56f2:	4629      	mov	r1, r5
   d56f4:	4628      	mov	r0, r5
   d56f6:	4798      	blx	r3
            delete wrapper;
   d56f8:	4628      	mov	r0, r5
   d56fa:	f7fe fccc 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d56fe:	2300      	movs	r3, #0
   d5700:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5702:	6820      	ldr	r0, [r4, #0]
   d5704:	f7fe ff5a 	bl	d45bc <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5708:	2300      	movs	r3, #0
   d570a:	6023      	str	r3, [r4, #0]
   d570c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5710 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5710:	b538      	push	{r3, r4, r5, lr}
   d5712:	4b0b      	ldr	r3, [pc, #44]	; (d5740 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5714:	6003      	str	r3, [r0, #0]
   d5716:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5718:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d571c:	b108      	cbz	r0, d5722 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d571e:	f7fe fcbc 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5722:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5726:	b12d      	cbz	r5, d5734 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5728:	4628      	mov	r0, r5
   d572a:	f7ff ffd0 	bl	d56ce <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d572e:	4628      	mov	r0, r5
   d5730:	f7fe fcb1 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5734:	68a0      	ldr	r0, [r4, #8]
   d5736:	b108      	cbz	r0, d573c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5738:	f7ff ffc4 	bl	d56c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d573c:	4620      	mov	r0, r4
   d573e:	bd38      	pop	{r3, r4, r5, pc}
   d5740:	000d6b34 	.word	0x000d6b34

000d5744 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5744:	b538      	push	{r3, r4, r5, lr}
   d5746:	4c0d      	ldr	r4, [pc, #52]	; (d577c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5748:	4b0d      	ldr	r3, [pc, #52]	; (d5780 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d574a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d574c:	2500      	movs	r5, #0
   d574e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5750:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5754:	6063      	str	r3, [r4, #4]
   d5756:	60a5      	str	r5, [r4, #8]
   d5758:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d575c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5760:	f7fe ff3c 	bl	d45dc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5764:	4b07      	ldr	r3, [pc, #28]	; (d5784 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5766:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d576a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d576c:	4620      	mov	r0, r4
   d576e:	4a06      	ldr	r2, [pc, #24]	; (d5788 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5770:	4906      	ldr	r1, [pc, #24]	; (d578c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5776:	f000 b97f 	b.w	d5a78 <__aeabi_atexit>
   d577a:	bf00      	nop
   d577c:	2003e524 	.word	0x2003e524
   d5780:	000d6b68 	.word	0x000d6b68
   d5784:	000d6b34 	.word	0x000d6b34
   d5788:	2003e304 	.word	0x2003e304
   d578c:	000d5711 	.word	0x000d5711

000d5790 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5790:	2300      	movs	r3, #0
   d5792:	461a      	mov	r2, r3
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	f7ff b84d 	b.w	d4834 <network_connect>

000d579a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d579a:	2200      	movs	r2, #0
   d579c:	2102      	movs	r1, #2
   d579e:	6840      	ldr	r0, [r0, #4]
   d57a0:	f7ff b858 	b.w	d4854 <network_disconnect>

000d57a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57a4:	2200      	movs	r2, #0
   d57a6:	4611      	mov	r1, r2
   d57a8:	6840      	ldr	r0, [r0, #4]
   d57aa:	f7ff b84b 	b.w	d4844 <network_connecting>

000d57ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57ae:	2200      	movs	r2, #0
   d57b0:	4611      	mov	r1, r2
   d57b2:	6840      	ldr	r0, [r0, #4]
   d57b4:	f7ff b856 	b.w	d4864 <network_ready>

000d57b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57b8:	2300      	movs	r3, #0
   d57ba:	461a      	mov	r2, r3
   d57bc:	4619      	mov	r1, r3
   d57be:	6840      	ldr	r0, [r0, #4]
   d57c0:	f7ff b858 	b.w	d4874 <network_on>

000d57c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57c4:	2300      	movs	r3, #0
   d57c6:	461a      	mov	r2, r3
   d57c8:	4619      	mov	r1, r3
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	f7ff b85a 	b.w	d4884 <network_off>

000d57d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57d0:	2200      	movs	r2, #0
   d57d2:	f081 0101 	eor.w	r1, r1, #1
   d57d6:	6840      	ldr	r0, [r0, #4]
   d57d8:	f7ff b85c 	b.w	d4894 <network_listen>

000d57dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d57dc:	2200      	movs	r2, #0
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	f7ff b868 	b.w	d48b4 <network_set_listen_timeout>

000d57e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d57e4:	2200      	movs	r2, #0
   d57e6:	4611      	mov	r1, r2
   d57e8:	6840      	ldr	r0, [r0, #4]
   d57ea:	f7ff b86b 	b.w	d48c4 <network_get_listen_timeout>

000d57ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d57ee:	2200      	movs	r2, #0
   d57f0:	4611      	mov	r1, r2
   d57f2:	6840      	ldr	r0, [r0, #4]
   d57f4:	f7ff b856 	b.w	d48a4 <network_listening>

000d57f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d57f8:	b570      	push	{r4, r5, r6, lr}
   d57fa:	b08c      	sub	sp, #48	; 0x30
   d57fc:	4614      	mov	r4, r2
   d57fe:	4606      	mov	r6, r0
    IPAddress addr;
   d5800:	f7ff fd50 	bl	d52a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5804:	ab0c      	add	r3, sp, #48	; 0x30
   d5806:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5808:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d580a:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d580e:	4620      	mov	r0, r4
   d5810:	f7fe fe64 	bl	d44dc <netdb_getaddrinfo>
    if (!r && ai) {
   d5814:	4601      	mov	r1, r0
   d5816:	bb58      	cbnz	r0, d5870 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5818:	9b00      	ldr	r3, [sp, #0]
   d581a:	b34b      	cbz	r3, d5870 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d581c:	685a      	ldr	r2, [r3, #4]
   d581e:	2a02      	cmp	r2, #2
   d5820:	d00e      	beq.n	d5840 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5822:	2a0a      	cmp	r2, #10
   d5824:	d124      	bne.n	d5870 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5826:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5828:	2211      	movs	r2, #17
   d582a:	a801      	add	r0, sp, #4
   d582c:	f000 ff8d 	bl	d674a <memset>
                a.v = 6;
   d5830:	2306      	movs	r3, #6
   d5832:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5836:	ad01      	add	r5, sp, #4
   d5838:	f104 0308 	add.w	r3, r4, #8
   d583c:	3418      	adds	r4, #24
   d583e:	e005      	b.n	d584c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5840:	6959      	ldr	r1, [r3, #20]
   d5842:	4630      	mov	r0, r6
   d5844:	3104      	adds	r1, #4
   d5846:	f7ff fd5a 	bl	d52fe <_ZN9IPAddressaSEPKh>
                break;
   d584a:	e011      	b.n	d5870 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d584c:	6818      	ldr	r0, [r3, #0]
   d584e:	6859      	ldr	r1, [r3, #4]
   d5850:	462a      	mov	r2, r5
   d5852:	c203      	stmia	r2!, {r0, r1}
   d5854:	3308      	adds	r3, #8
   d5856:	42a3      	cmp	r3, r4
   d5858:	4615      	mov	r5, r2
   d585a:	d1f7      	bne.n	d584c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d585c:	a901      	add	r1, sp, #4
   d585e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5860:	ad07      	add	r5, sp, #28
   d5862:	f7ff fd2d 	bl	d52c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5868:	1d34      	adds	r4, r6, #4
   d586a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d586c:	682b      	ldr	r3, [r5, #0]
   d586e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5870:	9800      	ldr	r0, [sp, #0]
   d5872:	f7fe fe2b 	bl	d44cc <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5876:	4630      	mov	r0, r6
   d5878:	b00c      	add	sp, #48	; 0x30
   d587a:	bd70      	pop	{r4, r5, r6, pc}

000d587c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d587c:	4b02      	ldr	r3, [pc, #8]	; (d5888 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d587e:	4a03      	ldr	r2, [pc, #12]	; (d588c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5880:	601a      	str	r2, [r3, #0]
   d5882:	2200      	movs	r2, #0
   d5884:	605a      	str	r2, [r3, #4]
   d5886:	4770      	bx	lr
   d5888:	2003e6f4 	.word	0x2003e6f4
   d588c:	000d6b68 	.word	0x000d6b68

000d5890 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5890:	b510      	push	{r4, lr}
   d5892:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5894:	480f      	ldr	r0, [pc, #60]	; (d58d4 <pinAvailable+0x44>)
   d5896:	f7ff f935 	bl	d4b04 <_ZN8SPIClass9isEnabledEv>
   d589a:	b128      	cbz	r0, d58a8 <pinAvailable+0x18>
   d589c:	f1a4 030b 	sub.w	r3, r4, #11
   d58a0:	2b02      	cmp	r3, #2
   d58a2:	d801      	bhi.n	d58a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d58a4:	2000      	movs	r0, #0
   d58a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d58a8:	f000 f8a6 	bl	d59f8 <_Z19__fetch_global_Wirev>
   d58ac:	f7ff fec0 	bl	d5630 <_ZN7TwoWire9isEnabledEv>
   d58b0:	b108      	cbz	r0, d58b6 <pinAvailable+0x26>
   d58b2:	2c01      	cmp	r4, #1
   d58b4:	d9f6      	bls.n	d58a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d58b6:	f7ff fe35 	bl	d5524 <_Z22__fetch_global_Serial1v>
   d58ba:	f7ff fe2f 	bl	d551c <_ZN11USARTSerial9isEnabledEv>
   d58be:	b118      	cbz	r0, d58c8 <pinAvailable+0x38>
   d58c0:	f1a4 0309 	sub.w	r3, r4, #9
   d58c4:	2b01      	cmp	r3, #1
   d58c6:	d9ed      	bls.n	d58a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d58c8:	2c23      	cmp	r4, #35	; 0x23
   d58ca:	bf8c      	ite	hi
   d58cc:	2000      	movhi	r0, #0
   d58ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d58d0:	bd10      	pop	{r4, pc}
   d58d2:	bf00      	nop
   d58d4:	2003e6fc 	.word	0x2003e6fc

000d58d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58d8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d58da:	b538      	push	{r3, r4, r5, lr}
   d58dc:	4604      	mov	r4, r0
   d58de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58e0:	d80a      	bhi.n	d58f8 <pinMode+0x20>
   d58e2:	29ff      	cmp	r1, #255	; 0xff
   d58e4:	d008      	beq.n	d58f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d58e6:	f7ff ffd3 	bl	d5890 <pinAvailable>
   d58ea:	b128      	cbz	r0, d58f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58ec:	4629      	mov	r1, r5
   d58ee:	4620      	mov	r0, r4
}
   d58f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58f4:	f7fe be02 	b.w	d44fc <HAL_Pin_Mode>
   d58f8:	bd38      	pop	{r3, r4, r5, pc}

000d58fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d58fa:	b538      	push	{r3, r4, r5, lr}
   d58fc:	4604      	mov	r4, r0
   d58fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5900:	f7fe fe04 	bl	d450c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5904:	28ff      	cmp	r0, #255	; 0xff
   d5906:	d010      	beq.n	d592a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5908:	2806      	cmp	r0, #6
   d590a:	d804      	bhi.n	d5916 <digitalWrite+0x1c>
   d590c:	234d      	movs	r3, #77	; 0x4d
   d590e:	fa23 f000 	lsr.w	r0, r3, r0
   d5912:	07c3      	lsls	r3, r0, #31
   d5914:	d409      	bmi.n	d592a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5916:	4620      	mov	r0, r4
   d5918:	f7ff ffba 	bl	d5890 <pinAvailable>
   d591c:	b128      	cbz	r0, d592a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d591e:	4629      	mov	r1, r5
   d5920:	4620      	mov	r0, r4
}
   d5922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5926:	f7fe bdf9 	b.w	d451c <HAL_GPIO_Write>
   d592a:	bd38      	pop	{r3, r4, r5, pc}

000d592c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d592c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d592e:	4c0c      	ldr	r4, [pc, #48]	; (d5960 <_GLOBAL__sub_I_SPI+0x34>)
   d5930:	4e0c      	ldr	r6, [pc, #48]	; (d5964 <_GLOBAL__sub_I_SPI+0x38>)
   d5932:	4d0d      	ldr	r5, [pc, #52]	; (d5968 <_GLOBAL__sub_I_SPI+0x3c>)
   d5934:	2100      	movs	r1, #0
   d5936:	4620      	mov	r0, r4
   d5938:	f7ff f8d0 	bl	d4adc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d593c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d593e:	4c0b      	ldr	r4, [pc, #44]	; (d596c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5940:	4632      	mov	r2, r6
   d5942:	4629      	mov	r1, r5
   d5944:	f000 f898 	bl	d5a78 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5948:	2101      	movs	r1, #1
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff f8c6 	bl	d4adc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5950:	4632      	mov	r2, r6
   d5952:	4629      	mov	r1, r5
   d5954:	4620      	mov	r0, r4
   d5956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d595a:	f000 b88d 	b.w	d5a78 <__aeabi_atexit>
   d595e:	bf00      	nop
   d5960:	2003e6fc 	.word	0x2003e6fc
   d5964:	2003e304 	.word	0x2003e304
   d5968:	000d4acd 	.word	0x000d4acd
   d596c:	2003e70c 	.word	0x2003e70c

000d5970 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d5970:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d5972:	4d1c      	ldr	r5, [pc, #112]	; (d59e4 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d5974:	b089      	sub	sp, #36	; 0x24
   d5976:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d5978:	6820      	ldr	r0, [r4, #0]
   d597a:	f7fe fdef 	bl	d455c <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d597e:	f7fe fdf5 	bl	d456c <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d5982:	682b      	ldr	r3, [r5, #0]
   d5984:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d5986:	1ac0      	subs	r0, r0, r3
   d5988:	4290      	cmp	r0, r2
   d598a:	d3f5      	bcc.n	d5978 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d598c:	6823      	ldr	r3, [r4, #0]
   d598e:	b333      	cbz	r3, d59de <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d5990:	68e3      	ldr	r3, [r4, #12]
   d5992:	b323      	cbz	r3, d59de <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5994:	1d25      	adds	r5, r4, #4
   d5996:	6923      	ldr	r3, [r4, #16]
   d5998:	4628      	mov	r0, r5
   d599a:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d599c:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d599e:	a904      	add	r1, sp, #16
   d59a0:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59a2:	9302      	str	r3, [sp, #8]
   d59a4:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d59a6:	f7ff fade 	bl	d4f66 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59aa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d59ac:	9a06      	ldr	r2, [sp, #24]
   d59ae:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59b0:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59b2:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59b4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d59b6:	9307      	str	r3, [sp, #28]
   d59b8:	4629      	mov	r1, r5
   d59ba:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59bc:	9203      	str	r2, [sp, #12]
   d59be:	f7ff fad2 	bl	d4f66 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59c2:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d59c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d59c6:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59c8:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d59ca:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59cc:	a804      	add	r0, sp, #16
   d59ce:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d59d0:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59d2:	9207      	str	r2, [sp, #28]
   d59d4:	f7fe fb9b 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d59d8:	4668      	mov	r0, sp
   d59da:	f7fe fb98 	bl	d410e <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d59de:	b009      	add	sp, #36	; 0x24
   d59e0:	bd30      	pop	{r4, r5, pc}
   d59e2:	bf00      	nop
   d59e4:	2003e71c 	.word	0x2003e71c

000d59e8 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d59e8:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d59ea:	f7ff ffc1 	bl	d5970 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d59ee:	2000      	movs	r0, #0
}
   d59f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d59f4:	f7fe bde2 	b.w	d45bc <os_thread_cleanup>

000d59f8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d59f8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d59fa:	4d0b      	ldr	r5, [pc, #44]	; (d5a28 <_Z19__fetch_global_Wirev+0x30>)
   d59fc:	6829      	ldr	r1, [r5, #0]
   d59fe:	f011 0401 	ands.w	r4, r1, #1
   d5a02:	d10f      	bne.n	d5a24 <_Z19__fetch_global_Wirev+0x2c>
   d5a04:	4628      	mov	r0, r5
   d5a06:	f7fe fb4a 	bl	d409e <__cxa_guard_acquire>
   d5a0a:	b158      	cbz	r0, d5a24 <_Z19__fetch_global_Wirev+0x2c>
   d5a0c:	4621      	mov	r1, r4
   d5a0e:	4807      	ldr	r0, [pc, #28]	; (d5a2c <_Z19__fetch_global_Wirev+0x34>)
   d5a10:	f7ff fdda 	bl	d55c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5a14:	4628      	mov	r0, r5
   d5a16:	f7fe fb47 	bl	d40a8 <__cxa_guard_release>
   d5a1a:	4a05      	ldr	r2, [pc, #20]	; (d5a30 <_Z19__fetch_global_Wirev+0x38>)
   d5a1c:	4905      	ldr	r1, [pc, #20]	; (d5a34 <_Z19__fetch_global_Wirev+0x3c>)
   d5a1e:	4803      	ldr	r0, [pc, #12]	; (d5a2c <_Z19__fetch_global_Wirev+0x34>)
   d5a20:	f000 f82a 	bl	d5a78 <__aeabi_atexit>
	return wire;
}
   d5a24:	4801      	ldr	r0, [pc, #4]	; (d5a2c <_Z19__fetch_global_Wirev+0x34>)
   d5a26:	bd38      	pop	{r3, r4, r5, pc}
   d5a28:	2003e720 	.word	0x2003e720
   d5a2c:	2003e738 	.word	0x2003e738
   d5a30:	2003e304 	.word	0x2003e304
   d5a34:	000d5571 	.word	0x000d5571

000d5a38 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d5a38:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d5a3a:	4c0b      	ldr	r4, [pc, #44]	; (d5a68 <_Z20__fetch_global_Wire1v+0x30>)
   d5a3c:	6823      	ldr	r3, [r4, #0]
   d5a3e:	07db      	lsls	r3, r3, #31
   d5a40:	d40f      	bmi.n	d5a62 <_Z20__fetch_global_Wire1v+0x2a>
   d5a42:	4620      	mov	r0, r4
   d5a44:	f7fe fb2b 	bl	d409e <__cxa_guard_acquire>
   d5a48:	b158      	cbz	r0, d5a62 <_Z20__fetch_global_Wire1v+0x2a>
   d5a4a:	2101      	movs	r1, #1
   d5a4c:	4807      	ldr	r0, [pc, #28]	; (d5a6c <_Z20__fetch_global_Wire1v+0x34>)
   d5a4e:	f7ff fdbb 	bl	d55c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5a52:	4620      	mov	r0, r4
   d5a54:	f7fe fb28 	bl	d40a8 <__cxa_guard_release>
   d5a58:	4a05      	ldr	r2, [pc, #20]	; (d5a70 <_Z20__fetch_global_Wire1v+0x38>)
   d5a5a:	4906      	ldr	r1, [pc, #24]	; (d5a74 <_Z20__fetch_global_Wire1v+0x3c>)
   d5a5c:	4803      	ldr	r0, [pc, #12]	; (d5a6c <_Z20__fetch_global_Wire1v+0x34>)
   d5a5e:	f000 f80b 	bl	d5a78 <__aeabi_atexit>
	return wire;
}
   d5a62:	4802      	ldr	r0, [pc, #8]	; (d5a6c <_Z20__fetch_global_Wire1v+0x34>)
   d5a64:	bd10      	pop	{r4, pc}
   d5a66:	bf00      	nop
   d5a68:	2003e74c 	.word	0x2003e74c
   d5a6c:	2003e724 	.word	0x2003e724
   d5a70:	2003e304 	.word	0x2003e304
   d5a74:	000d5571 	.word	0x000d5571

000d5a78 <__aeabi_atexit>:
   d5a78:	460b      	mov	r3, r1
   d5a7a:	4601      	mov	r1, r0
   d5a7c:	4618      	mov	r0, r3
   d5a7e:	f000 be4b 	b.w	d6718 <__cxa_atexit>

000d5a82 <_ZSt25__throw_bad_function_callv>:
   d5a82:	b508      	push	{r3, lr}
   d5a84:	f7fe ff56 	bl	d4934 <abort>

000d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a88:	4b18      	ldr	r3, [pc, #96]	; (d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a8a:	681a      	ldr	r2, [r3, #0]
   d5a8c:	07d1      	lsls	r1, r2, #31
   d5a8e:	bf5c      	itt	pl
   d5a90:	2201      	movpl	r2, #1
   d5a92:	601a      	strpl	r2, [r3, #0]
   d5a94:	4b16      	ldr	r3, [pc, #88]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a96:	681a      	ldr	r2, [r3, #0]
   d5a98:	07d2      	lsls	r2, r2, #31
   d5a9a:	bf5c      	itt	pl
   d5a9c:	2201      	movpl	r2, #1
   d5a9e:	601a      	strpl	r2, [r3, #0]
   d5aa0:	4b14      	ldr	r3, [pc, #80]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5aa2:	681a      	ldr	r2, [r3, #0]
   d5aa4:	07d0      	lsls	r0, r2, #31
   d5aa6:	bf5c      	itt	pl
   d5aa8:	2201      	movpl	r2, #1
   d5aaa:	601a      	strpl	r2, [r3, #0]
   d5aac:	4b12      	ldr	r3, [pc, #72]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5aae:	681a      	ldr	r2, [r3, #0]
   d5ab0:	07d1      	lsls	r1, r2, #31
   d5ab2:	bf5c      	itt	pl
   d5ab4:	2201      	movpl	r2, #1
   d5ab6:	601a      	strpl	r2, [r3, #0]
   d5ab8:	4b10      	ldr	r3, [pc, #64]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5aba:	681a      	ldr	r2, [r3, #0]
   d5abc:	07d2      	lsls	r2, r2, #31
   d5abe:	bf5c      	itt	pl
   d5ac0:	2201      	movpl	r2, #1
   d5ac2:	601a      	strpl	r2, [r3, #0]
   d5ac4:	4b0e      	ldr	r3, [pc, #56]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ac6:	681a      	ldr	r2, [r3, #0]
   d5ac8:	07d0      	lsls	r0, r2, #31
   d5aca:	bf5c      	itt	pl
   d5acc:	2201      	movpl	r2, #1
   d5ace:	601a      	strpl	r2, [r3, #0]
   d5ad0:	4b0c      	ldr	r3, [pc, #48]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ad2:	681a      	ldr	r2, [r3, #0]
   d5ad4:	07d1      	lsls	r1, r2, #31
   d5ad6:	bf5c      	itt	pl
   d5ad8:	2201      	movpl	r2, #1
   d5ada:	601a      	strpl	r2, [r3, #0]
   d5adc:	4b0a      	ldr	r3, [pc, #40]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5ade:	681a      	ldr	r2, [r3, #0]
   d5ae0:	07d2      	lsls	r2, r2, #31
   d5ae2:	bf5c      	itt	pl
   d5ae4:	2201      	movpl	r2, #1
   d5ae6:	601a      	strpl	r2, [r3, #0]
   d5ae8:	4770      	bx	lr
   d5aea:	bf00      	nop
   d5aec:	2003e76c 	.word	0x2003e76c
   d5af0:	2003e768 	.word	0x2003e768
   d5af4:	2003e764 	.word	0x2003e764
   d5af8:	2003e760 	.word	0x2003e760
   d5afc:	2003e75c 	.word	0x2003e75c
   d5b00:	2003e758 	.word	0x2003e758
   d5b04:	2003e754 	.word	0x2003e754
   d5b08:	2003e750 	.word	0x2003e750

000d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5b0c:	4b24      	ldr	r3, [pc, #144]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5b0e:	681a      	ldr	r2, [r3, #0]
   d5b10:	07d0      	lsls	r0, r2, #31
   d5b12:	bf5c      	itt	pl
   d5b14:	2201      	movpl	r2, #1
   d5b16:	601a      	strpl	r2, [r3, #0]
   d5b18:	4b22      	ldr	r3, [pc, #136]	; (d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5b1a:	681a      	ldr	r2, [r3, #0]
   d5b1c:	07d1      	lsls	r1, r2, #31
   d5b1e:	bf5c      	itt	pl
   d5b20:	2201      	movpl	r2, #1
   d5b22:	601a      	strpl	r2, [r3, #0]
   d5b24:	4b20      	ldr	r3, [pc, #128]	; (d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5b26:	681a      	ldr	r2, [r3, #0]
   d5b28:	07d2      	lsls	r2, r2, #31
   d5b2a:	bf5c      	itt	pl
   d5b2c:	2201      	movpl	r2, #1
   d5b2e:	601a      	strpl	r2, [r3, #0]
   d5b30:	4b1e      	ldr	r3, [pc, #120]	; (d5bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5b32:	681a      	ldr	r2, [r3, #0]
   d5b34:	07d0      	lsls	r0, r2, #31
   d5b36:	bf5c      	itt	pl
   d5b38:	2201      	movpl	r2, #1
   d5b3a:	601a      	strpl	r2, [r3, #0]
   d5b3c:	4b1c      	ldr	r3, [pc, #112]	; (d5bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5b3e:	681a      	ldr	r2, [r3, #0]
   d5b40:	07d1      	lsls	r1, r2, #31
   d5b42:	bf5c      	itt	pl
   d5b44:	2201      	movpl	r2, #1
   d5b46:	601a      	strpl	r2, [r3, #0]
   d5b48:	4b1a      	ldr	r3, [pc, #104]	; (d5bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5b4a:	681a      	ldr	r2, [r3, #0]
   d5b4c:	07d2      	lsls	r2, r2, #31
   d5b4e:	bf5c      	itt	pl
   d5b50:	2201      	movpl	r2, #1
   d5b52:	601a      	strpl	r2, [r3, #0]
   d5b54:	4b18      	ldr	r3, [pc, #96]	; (d5bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5b56:	681a      	ldr	r2, [r3, #0]
   d5b58:	07d0      	lsls	r0, r2, #31
   d5b5a:	bf5c      	itt	pl
   d5b5c:	2201      	movpl	r2, #1
   d5b5e:	601a      	strpl	r2, [r3, #0]
   d5b60:	4b16      	ldr	r3, [pc, #88]	; (d5bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d1      	lsls	r1, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4b14      	ldr	r3, [pc, #80]	; (d5bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b6e:	681a      	ldr	r2, [r3, #0]
   d5b70:	07d2      	lsls	r2, r2, #31
   d5b72:	bf5c      	itt	pl
   d5b74:	2201      	movpl	r2, #1
   d5b76:	601a      	strpl	r2, [r3, #0]
   d5b78:	4b12      	ldr	r3, [pc, #72]	; (d5bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d0      	lsls	r0, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b10      	ldr	r3, [pc, #64]	; (d5bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d1      	lsls	r1, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b0e      	ldr	r3, [pc, #56]	; (d5bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d2      	lsls	r2, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4770      	bx	lr
   d5b9e:	bf00      	nop
   d5ba0:	2003e79c 	.word	0x2003e79c
   d5ba4:	2003e798 	.word	0x2003e798
   d5ba8:	2003e794 	.word	0x2003e794
   d5bac:	2003e790 	.word	0x2003e790
   d5bb0:	2003e78c 	.word	0x2003e78c
   d5bb4:	2003e788 	.word	0x2003e788
   d5bb8:	2003e784 	.word	0x2003e784
   d5bbc:	2003e780 	.word	0x2003e780
   d5bc0:	2003e77c 	.word	0x2003e77c
   d5bc4:	2003e778 	.word	0x2003e778
   d5bc8:	2003e774 	.word	0x2003e774
   d5bcc:	2003e770 	.word	0x2003e770

000d5bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5bd0:	4b24      	ldr	r3, [pc, #144]	; (d5c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	07d0      	lsls	r0, r2, #31
   d5bd6:	bf5c      	itt	pl
   d5bd8:	2201      	movpl	r2, #1
   d5bda:	601a      	strpl	r2, [r3, #0]
   d5bdc:	4b22      	ldr	r3, [pc, #136]	; (d5c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5bde:	681a      	ldr	r2, [r3, #0]
   d5be0:	07d1      	lsls	r1, r2, #31
   d5be2:	bf5c      	itt	pl
   d5be4:	2201      	movpl	r2, #1
   d5be6:	601a      	strpl	r2, [r3, #0]
   d5be8:	4b20      	ldr	r3, [pc, #128]	; (d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5bea:	681a      	ldr	r2, [r3, #0]
   d5bec:	07d2      	lsls	r2, r2, #31
   d5bee:	bf5c      	itt	pl
   d5bf0:	2201      	movpl	r2, #1
   d5bf2:	601a      	strpl	r2, [r3, #0]
   d5bf4:	4b1e      	ldr	r3, [pc, #120]	; (d5c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5bf6:	681a      	ldr	r2, [r3, #0]
   d5bf8:	07d0      	lsls	r0, r2, #31
   d5bfa:	bf5c      	itt	pl
   d5bfc:	2201      	movpl	r2, #1
   d5bfe:	601a      	strpl	r2, [r3, #0]
   d5c00:	4b1c      	ldr	r3, [pc, #112]	; (d5c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c02:	681a      	ldr	r2, [r3, #0]
   d5c04:	07d1      	lsls	r1, r2, #31
   d5c06:	bf5c      	itt	pl
   d5c08:	2201      	movpl	r2, #1
   d5c0a:	601a      	strpl	r2, [r3, #0]
   d5c0c:	4b1a      	ldr	r3, [pc, #104]	; (d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c0e:	681a      	ldr	r2, [r3, #0]
   d5c10:	07d2      	lsls	r2, r2, #31
   d5c12:	bf5c      	itt	pl
   d5c14:	2201      	movpl	r2, #1
   d5c16:	601a      	strpl	r2, [r3, #0]
   d5c18:	4b18      	ldr	r3, [pc, #96]	; (d5c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c1a:	681a      	ldr	r2, [r3, #0]
   d5c1c:	07d0      	lsls	r0, r2, #31
   d5c1e:	bf5c      	itt	pl
   d5c20:	2201      	movpl	r2, #1
   d5c22:	601a      	strpl	r2, [r3, #0]
   d5c24:	4b16      	ldr	r3, [pc, #88]	; (d5c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c26:	681a      	ldr	r2, [r3, #0]
   d5c28:	07d1      	lsls	r1, r2, #31
   d5c2a:	bf5c      	itt	pl
   d5c2c:	2201      	movpl	r2, #1
   d5c2e:	601a      	strpl	r2, [r3, #0]
   d5c30:	4b14      	ldr	r3, [pc, #80]	; (d5c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5c32:	681a      	ldr	r2, [r3, #0]
   d5c34:	07d2      	lsls	r2, r2, #31
   d5c36:	bf5c      	itt	pl
   d5c38:	2201      	movpl	r2, #1
   d5c3a:	601a      	strpl	r2, [r3, #0]
   d5c3c:	4b12      	ldr	r3, [pc, #72]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	07d0      	lsls	r0, r2, #31
   d5c42:	bf5c      	itt	pl
   d5c44:	2201      	movpl	r2, #1
   d5c46:	601a      	strpl	r2, [r3, #0]
   d5c48:	4b10      	ldr	r3, [pc, #64]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d1      	lsls	r1, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b0e      	ldr	r3, [pc, #56]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d2      	lsls	r2, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4770      	bx	lr
   d5c62:	bf00      	nop
   d5c64:	2003e7cc 	.word	0x2003e7cc
   d5c68:	2003e7c8 	.word	0x2003e7c8
   d5c6c:	2003e7c4 	.word	0x2003e7c4
   d5c70:	2003e7c0 	.word	0x2003e7c0
   d5c74:	2003e7bc 	.word	0x2003e7bc
   d5c78:	2003e7b8 	.word	0x2003e7b8
   d5c7c:	2003e7b4 	.word	0x2003e7b4
   d5c80:	2003e7b0 	.word	0x2003e7b0
   d5c84:	2003e7ac 	.word	0x2003e7ac
   d5c88:	2003e7a8 	.word	0x2003e7a8
   d5c8c:	2003e7a4 	.word	0x2003e7a4
   d5c90:	2003e7a0 	.word	0x2003e7a0

000d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c94:	4b18      	ldr	r3, [pc, #96]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d1      	lsls	r1, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b16      	ldr	r3, [pc, #88]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d2      	lsls	r2, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b14      	ldr	r3, [pc, #80]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d0      	lsls	r0, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4b12      	ldr	r3, [pc, #72]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5cba:	681a      	ldr	r2, [r3, #0]
   d5cbc:	07d1      	lsls	r1, r2, #31
   d5cbe:	bf5c      	itt	pl
   d5cc0:	2201      	movpl	r2, #1
   d5cc2:	601a      	strpl	r2, [r3, #0]
   d5cc4:	4b10      	ldr	r3, [pc, #64]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5cc6:	681a      	ldr	r2, [r3, #0]
   d5cc8:	07d2      	lsls	r2, r2, #31
   d5cca:	bf5c      	itt	pl
   d5ccc:	2201      	movpl	r2, #1
   d5cce:	601a      	strpl	r2, [r3, #0]
   d5cd0:	4b0e      	ldr	r3, [pc, #56]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5cd2:	681a      	ldr	r2, [r3, #0]
   d5cd4:	07d0      	lsls	r0, r2, #31
   d5cd6:	bf5c      	itt	pl
   d5cd8:	2201      	movpl	r2, #1
   d5cda:	601a      	strpl	r2, [r3, #0]
   d5cdc:	4b0c      	ldr	r3, [pc, #48]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5cde:	681a      	ldr	r2, [r3, #0]
   d5ce0:	07d1      	lsls	r1, r2, #31
   d5ce2:	bf5c      	itt	pl
   d5ce4:	2201      	movpl	r2, #1
   d5ce6:	601a      	strpl	r2, [r3, #0]
   d5ce8:	4b0a      	ldr	r3, [pc, #40]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	07d2      	lsls	r2, r2, #31
   d5cee:	bf5c      	itt	pl
   d5cf0:	2201      	movpl	r2, #1
   d5cf2:	601a      	strpl	r2, [r3, #0]
   d5cf4:	4770      	bx	lr
   d5cf6:	bf00      	nop
   d5cf8:	2003e7ec 	.word	0x2003e7ec
   d5cfc:	2003e7e8 	.word	0x2003e7e8
   d5d00:	2003e7e4 	.word	0x2003e7e4
   d5d04:	2003e7e0 	.word	0x2003e7e0
   d5d08:	2003e7dc 	.word	0x2003e7dc
   d5d0c:	2003e7d8 	.word	0x2003e7d8
   d5d10:	2003e7d4 	.word	0x2003e7d4
   d5d14:	2003e7d0 	.word	0x2003e7d0

000d5d18 <__aeabi_drsub>:
   d5d18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5d1c:	e002      	b.n	d5d24 <__adddf3>
   d5d1e:	bf00      	nop

000d5d20 <__aeabi_dsub>:
   d5d20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5d24 <__adddf3>:
   d5d24:	b530      	push	{r4, r5, lr}
   d5d26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5d2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5d2e:	ea94 0f05 	teq	r4, r5
   d5d32:	bf08      	it	eq
   d5d34:	ea90 0f02 	teqeq	r0, r2
   d5d38:	bf1f      	itttt	ne
   d5d3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5d3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5d42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5d46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d4a:	f000 80e2 	beq.w	d5f12 <__adddf3+0x1ee>
   d5d4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5d52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5d56:	bfb8      	it	lt
   d5d58:	426d      	neglt	r5, r5
   d5d5a:	dd0c      	ble.n	d5d76 <__adddf3+0x52>
   d5d5c:	442c      	add	r4, r5
   d5d5e:	ea80 0202 	eor.w	r2, r0, r2
   d5d62:	ea81 0303 	eor.w	r3, r1, r3
   d5d66:	ea82 0000 	eor.w	r0, r2, r0
   d5d6a:	ea83 0101 	eor.w	r1, r3, r1
   d5d6e:	ea80 0202 	eor.w	r2, r0, r2
   d5d72:	ea81 0303 	eor.w	r3, r1, r3
   d5d76:	2d36      	cmp	r5, #54	; 0x36
   d5d78:	bf88      	it	hi
   d5d7a:	bd30      	pophi	{r4, r5, pc}
   d5d7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d8c:	d002      	beq.n	d5d94 <__adddf3+0x70>
   d5d8e:	4240      	negs	r0, r0
   d5d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5da0:	d002      	beq.n	d5da8 <__adddf3+0x84>
   d5da2:	4252      	negs	r2, r2
   d5da4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5da8:	ea94 0f05 	teq	r4, r5
   d5dac:	f000 80a7 	beq.w	d5efe <__adddf3+0x1da>
   d5db0:	f1a4 0401 	sub.w	r4, r4, #1
   d5db4:	f1d5 0e20 	rsbs	lr, r5, #32
   d5db8:	db0d      	blt.n	d5dd6 <__adddf3+0xb2>
   d5dba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5dbe:	fa22 f205 	lsr.w	r2, r2, r5
   d5dc2:	1880      	adds	r0, r0, r2
   d5dc4:	f141 0100 	adc.w	r1, r1, #0
   d5dc8:	fa03 f20e 	lsl.w	r2, r3, lr
   d5dcc:	1880      	adds	r0, r0, r2
   d5dce:	fa43 f305 	asr.w	r3, r3, r5
   d5dd2:	4159      	adcs	r1, r3
   d5dd4:	e00e      	b.n	d5df4 <__adddf3+0xd0>
   d5dd6:	f1a5 0520 	sub.w	r5, r5, #32
   d5dda:	f10e 0e20 	add.w	lr, lr, #32
   d5dde:	2a01      	cmp	r2, #1
   d5de0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5de4:	bf28      	it	cs
   d5de6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5dea:	fa43 f305 	asr.w	r3, r3, r5
   d5dee:	18c0      	adds	r0, r0, r3
   d5df0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5df8:	d507      	bpl.n	d5e0a <__adddf3+0xe6>
   d5dfa:	f04f 0e00 	mov.w	lr, #0
   d5dfe:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e02:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e06:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e0e:	d31b      	bcc.n	d5e48 <__adddf3+0x124>
   d5e10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5e14:	d30c      	bcc.n	d5e30 <__adddf3+0x10c>
   d5e16:	0849      	lsrs	r1, r1, #1
   d5e18:	ea5f 0030 	movs.w	r0, r0, rrx
   d5e1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5e20:	f104 0401 	add.w	r4, r4, #1
   d5e24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5e28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5e2c:	f080 809a 	bcs.w	d5f64 <__adddf3+0x240>
   d5e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5e34:	bf08      	it	eq
   d5e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e3a:	f150 0000 	adcs.w	r0, r0, #0
   d5e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e42:	ea41 0105 	orr.w	r1, r1, r5
   d5e46:	bd30      	pop	{r4, r5, pc}
   d5e48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5e4c:	4140      	adcs	r0, r0
   d5e4e:	eb41 0101 	adc.w	r1, r1, r1
   d5e52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e56:	f1a4 0401 	sub.w	r4, r4, #1
   d5e5a:	d1e9      	bne.n	d5e30 <__adddf3+0x10c>
   d5e5c:	f091 0f00 	teq	r1, #0
   d5e60:	bf04      	itt	eq
   d5e62:	4601      	moveq	r1, r0
   d5e64:	2000      	moveq	r0, #0
   d5e66:	fab1 f381 	clz	r3, r1
   d5e6a:	bf08      	it	eq
   d5e6c:	3320      	addeq	r3, #32
   d5e6e:	f1a3 030b 	sub.w	r3, r3, #11
   d5e72:	f1b3 0220 	subs.w	r2, r3, #32
   d5e76:	da0c      	bge.n	d5e92 <__adddf3+0x16e>
   d5e78:	320c      	adds	r2, #12
   d5e7a:	dd08      	ble.n	d5e8e <__adddf3+0x16a>
   d5e7c:	f102 0c14 	add.w	ip, r2, #20
   d5e80:	f1c2 020c 	rsb	r2, r2, #12
   d5e84:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e88:	fa21 f102 	lsr.w	r1, r1, r2
   d5e8c:	e00c      	b.n	d5ea8 <__adddf3+0x184>
   d5e8e:	f102 0214 	add.w	r2, r2, #20
   d5e92:	bfd8      	it	le
   d5e94:	f1c2 0c20 	rsble	ip, r2, #32
   d5e98:	fa01 f102 	lsl.w	r1, r1, r2
   d5e9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5ea0:	bfdc      	itt	le
   d5ea2:	ea41 010c 	orrle.w	r1, r1, ip
   d5ea6:	4090      	lslle	r0, r2
   d5ea8:	1ae4      	subs	r4, r4, r3
   d5eaa:	bfa2      	ittt	ge
   d5eac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5eb0:	4329      	orrge	r1, r5
   d5eb2:	bd30      	popge	{r4, r5, pc}
   d5eb4:	ea6f 0404 	mvn.w	r4, r4
   d5eb8:	3c1f      	subs	r4, #31
   d5eba:	da1c      	bge.n	d5ef6 <__adddf3+0x1d2>
   d5ebc:	340c      	adds	r4, #12
   d5ebe:	dc0e      	bgt.n	d5ede <__adddf3+0x1ba>
   d5ec0:	f104 0414 	add.w	r4, r4, #20
   d5ec4:	f1c4 0220 	rsb	r2, r4, #32
   d5ec8:	fa20 f004 	lsr.w	r0, r0, r4
   d5ecc:	fa01 f302 	lsl.w	r3, r1, r2
   d5ed0:	ea40 0003 	orr.w	r0, r0, r3
   d5ed4:	fa21 f304 	lsr.w	r3, r1, r4
   d5ed8:	ea45 0103 	orr.w	r1, r5, r3
   d5edc:	bd30      	pop	{r4, r5, pc}
   d5ede:	f1c4 040c 	rsb	r4, r4, #12
   d5ee2:	f1c4 0220 	rsb	r2, r4, #32
   d5ee6:	fa20 f002 	lsr.w	r0, r0, r2
   d5eea:	fa01 f304 	lsl.w	r3, r1, r4
   d5eee:	ea40 0003 	orr.w	r0, r0, r3
   d5ef2:	4629      	mov	r1, r5
   d5ef4:	bd30      	pop	{r4, r5, pc}
   d5ef6:	fa21 f004 	lsr.w	r0, r1, r4
   d5efa:	4629      	mov	r1, r5
   d5efc:	bd30      	pop	{r4, r5, pc}
   d5efe:	f094 0f00 	teq	r4, #0
   d5f02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f06:	bf06      	itte	eq
   d5f08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f0c:	3401      	addeq	r4, #1
   d5f0e:	3d01      	subne	r5, #1
   d5f10:	e74e      	b.n	d5db0 <__adddf3+0x8c>
   d5f12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f16:	bf18      	it	ne
   d5f18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f1c:	d029      	beq.n	d5f72 <__adddf3+0x24e>
   d5f1e:	ea94 0f05 	teq	r4, r5
   d5f22:	bf08      	it	eq
   d5f24:	ea90 0f02 	teqeq	r0, r2
   d5f28:	d005      	beq.n	d5f36 <__adddf3+0x212>
   d5f2a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5f2e:	bf04      	itt	eq
   d5f30:	4619      	moveq	r1, r3
   d5f32:	4610      	moveq	r0, r2
   d5f34:	bd30      	pop	{r4, r5, pc}
   d5f36:	ea91 0f03 	teq	r1, r3
   d5f3a:	bf1e      	ittt	ne
   d5f3c:	2100      	movne	r1, #0
   d5f3e:	2000      	movne	r0, #0
   d5f40:	bd30      	popne	{r4, r5, pc}
   d5f42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5f46:	d105      	bne.n	d5f54 <__adddf3+0x230>
   d5f48:	0040      	lsls	r0, r0, #1
   d5f4a:	4149      	adcs	r1, r1
   d5f4c:	bf28      	it	cs
   d5f4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5f52:	bd30      	pop	{r4, r5, pc}
   d5f54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5f58:	bf3c      	itt	cc
   d5f5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5f5e:	bd30      	popcc	{r4, r5, pc}
   d5f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5f68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f6c:	f04f 0000 	mov.w	r0, #0
   d5f70:	bd30      	pop	{r4, r5, pc}
   d5f72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f76:	bf1a      	itte	ne
   d5f78:	4619      	movne	r1, r3
   d5f7a:	4610      	movne	r0, r2
   d5f7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f80:	bf1c      	itt	ne
   d5f82:	460b      	movne	r3, r1
   d5f84:	4602      	movne	r2, r0
   d5f86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f8a:	bf06      	itte	eq
   d5f8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f90:	ea91 0f03 	teqeq	r1, r3
   d5f94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f98:	bd30      	pop	{r4, r5, pc}
   d5f9a:	bf00      	nop

000d5f9c <__aeabi_ui2d>:
   d5f9c:	f090 0f00 	teq	r0, #0
   d5fa0:	bf04      	itt	eq
   d5fa2:	2100      	moveq	r1, #0
   d5fa4:	4770      	bxeq	lr
   d5fa6:	b530      	push	{r4, r5, lr}
   d5fa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5fac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5fb0:	f04f 0500 	mov.w	r5, #0
   d5fb4:	f04f 0100 	mov.w	r1, #0
   d5fb8:	e750      	b.n	d5e5c <__adddf3+0x138>
   d5fba:	bf00      	nop

000d5fbc <__aeabi_i2d>:
   d5fbc:	f090 0f00 	teq	r0, #0
   d5fc0:	bf04      	itt	eq
   d5fc2:	2100      	moveq	r1, #0
   d5fc4:	4770      	bxeq	lr
   d5fc6:	b530      	push	{r4, r5, lr}
   d5fc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5fcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5fd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5fd4:	bf48      	it	mi
   d5fd6:	4240      	negmi	r0, r0
   d5fd8:	f04f 0100 	mov.w	r1, #0
   d5fdc:	e73e      	b.n	d5e5c <__adddf3+0x138>
   d5fde:	bf00      	nop

000d5fe0 <__aeabi_f2d>:
   d5fe0:	0042      	lsls	r2, r0, #1
   d5fe2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5fe6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5fea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5fee:	bf1f      	itttt	ne
   d5ff0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ff4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ff8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5ffc:	4770      	bxne	lr
   d5ffe:	f092 0f00 	teq	r2, #0
   d6002:	bf14      	ite	ne
   d6004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6008:	4770      	bxeq	lr
   d600a:	b530      	push	{r4, r5, lr}
   d600c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6018:	e720      	b.n	d5e5c <__adddf3+0x138>
   d601a:	bf00      	nop

000d601c <__aeabi_ul2d>:
   d601c:	ea50 0201 	orrs.w	r2, r0, r1
   d6020:	bf08      	it	eq
   d6022:	4770      	bxeq	lr
   d6024:	b530      	push	{r4, r5, lr}
   d6026:	f04f 0500 	mov.w	r5, #0
   d602a:	e00a      	b.n	d6042 <__aeabi_l2d+0x16>

000d602c <__aeabi_l2d>:
   d602c:	ea50 0201 	orrs.w	r2, r0, r1
   d6030:	bf08      	it	eq
   d6032:	4770      	bxeq	lr
   d6034:	b530      	push	{r4, r5, lr}
   d6036:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d603a:	d502      	bpl.n	d6042 <__aeabi_l2d+0x16>
   d603c:	4240      	negs	r0, r0
   d603e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6042:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6046:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d604a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d604e:	f43f aedc 	beq.w	d5e0a <__adddf3+0xe6>
   d6052:	f04f 0203 	mov.w	r2, #3
   d6056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d605a:	bf18      	it	ne
   d605c:	3203      	addne	r2, #3
   d605e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6062:	bf18      	it	ne
   d6064:	3203      	addne	r2, #3
   d6066:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d606a:	f1c2 0320 	rsb	r3, r2, #32
   d606e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6072:	fa20 f002 	lsr.w	r0, r0, r2
   d6076:	fa01 fe03 	lsl.w	lr, r1, r3
   d607a:	ea40 000e 	orr.w	r0, r0, lr
   d607e:	fa21 f102 	lsr.w	r1, r1, r2
   d6082:	4414      	add	r4, r2
   d6084:	e6c1      	b.n	d5e0a <__adddf3+0xe6>
   d6086:	bf00      	nop

000d6088 <__aeabi_dmul>:
   d6088:	b570      	push	{r4, r5, r6, lr}
   d608a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d608e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6096:	bf1d      	ittte	ne
   d6098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d609c:	ea94 0f0c 	teqne	r4, ip
   d60a0:	ea95 0f0c 	teqne	r5, ip
   d60a4:	f000 f8de 	bleq	d6264 <__aeabi_dmul+0x1dc>
   d60a8:	442c      	add	r4, r5
   d60aa:	ea81 0603 	eor.w	r6, r1, r3
   d60ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d60b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d60b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d60ba:	bf18      	it	ne
   d60bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d60c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d60c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d60c8:	d038      	beq.n	d613c <__aeabi_dmul+0xb4>
   d60ca:	fba0 ce02 	umull	ip, lr, r0, r2
   d60ce:	f04f 0500 	mov.w	r5, #0
   d60d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d60d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d60da:	fbe0 e503 	umlal	lr, r5, r0, r3
   d60de:	f04f 0600 	mov.w	r6, #0
   d60e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d60e6:	f09c 0f00 	teq	ip, #0
   d60ea:	bf18      	it	ne
   d60ec:	f04e 0e01 	orrne.w	lr, lr, #1
   d60f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d60f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d60f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d60fc:	d204      	bcs.n	d6108 <__aeabi_dmul+0x80>
   d60fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6102:	416d      	adcs	r5, r5
   d6104:	eb46 0606 	adc.w	r6, r6, r6
   d6108:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d610c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6110:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6114:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6118:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d611c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6120:	bf88      	it	hi
   d6122:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6126:	d81e      	bhi.n	d6166 <__aeabi_dmul+0xde>
   d6128:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d612c:	bf08      	it	eq
   d612e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6132:	f150 0000 	adcs.w	r0, r0, #0
   d6136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d613a:	bd70      	pop	{r4, r5, r6, pc}
   d613c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6140:	ea46 0101 	orr.w	r1, r6, r1
   d6144:	ea40 0002 	orr.w	r0, r0, r2
   d6148:	ea81 0103 	eor.w	r1, r1, r3
   d614c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6150:	bfc2      	ittt	gt
   d6152:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d615a:	bd70      	popgt	{r4, r5, r6, pc}
   d615c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6160:	f04f 0e00 	mov.w	lr, #0
   d6164:	3c01      	subs	r4, #1
   d6166:	f300 80ab 	bgt.w	d62c0 <__aeabi_dmul+0x238>
   d616a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d616e:	bfde      	ittt	le
   d6170:	2000      	movle	r0, #0
   d6172:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6176:	bd70      	pople	{r4, r5, r6, pc}
   d6178:	f1c4 0400 	rsb	r4, r4, #0
   d617c:	3c20      	subs	r4, #32
   d617e:	da35      	bge.n	d61ec <__aeabi_dmul+0x164>
   d6180:	340c      	adds	r4, #12
   d6182:	dc1b      	bgt.n	d61bc <__aeabi_dmul+0x134>
   d6184:	f104 0414 	add.w	r4, r4, #20
   d6188:	f1c4 0520 	rsb	r5, r4, #32
   d618c:	fa00 f305 	lsl.w	r3, r0, r5
   d6190:	fa20 f004 	lsr.w	r0, r0, r4
   d6194:	fa01 f205 	lsl.w	r2, r1, r5
   d6198:	ea40 0002 	orr.w	r0, r0, r2
   d619c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d61a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d61a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d61a8:	fa21 f604 	lsr.w	r6, r1, r4
   d61ac:	eb42 0106 	adc.w	r1, r2, r6
   d61b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61b4:	bf08      	it	eq
   d61b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61ba:	bd70      	pop	{r4, r5, r6, pc}
   d61bc:	f1c4 040c 	rsb	r4, r4, #12
   d61c0:	f1c4 0520 	rsb	r5, r4, #32
   d61c4:	fa00 f304 	lsl.w	r3, r0, r4
   d61c8:	fa20 f005 	lsr.w	r0, r0, r5
   d61cc:	fa01 f204 	lsl.w	r2, r1, r4
   d61d0:	ea40 0002 	orr.w	r0, r0, r2
   d61d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d61dc:	f141 0100 	adc.w	r1, r1, #0
   d61e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61e4:	bf08      	it	eq
   d61e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61ea:	bd70      	pop	{r4, r5, r6, pc}
   d61ec:	f1c4 0520 	rsb	r5, r4, #32
   d61f0:	fa00 f205 	lsl.w	r2, r0, r5
   d61f4:	ea4e 0e02 	orr.w	lr, lr, r2
   d61f8:	fa20 f304 	lsr.w	r3, r0, r4
   d61fc:	fa01 f205 	lsl.w	r2, r1, r5
   d6200:	ea43 0302 	orr.w	r3, r3, r2
   d6204:	fa21 f004 	lsr.w	r0, r1, r4
   d6208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d620c:	fa21 f204 	lsr.w	r2, r1, r4
   d6210:	ea20 0002 	bic.w	r0, r0, r2
   d6214:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d621c:	bf08      	it	eq
   d621e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6222:	bd70      	pop	{r4, r5, r6, pc}
   d6224:	f094 0f00 	teq	r4, #0
   d6228:	d10f      	bne.n	d624a <__aeabi_dmul+0x1c2>
   d622a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d622e:	0040      	lsls	r0, r0, #1
   d6230:	eb41 0101 	adc.w	r1, r1, r1
   d6234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6238:	bf08      	it	eq
   d623a:	3c01      	subeq	r4, #1
   d623c:	d0f7      	beq.n	d622e <__aeabi_dmul+0x1a6>
   d623e:	ea41 0106 	orr.w	r1, r1, r6
   d6242:	f095 0f00 	teq	r5, #0
   d6246:	bf18      	it	ne
   d6248:	4770      	bxne	lr
   d624a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d624e:	0052      	lsls	r2, r2, #1
   d6250:	eb43 0303 	adc.w	r3, r3, r3
   d6254:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6258:	bf08      	it	eq
   d625a:	3d01      	subeq	r5, #1
   d625c:	d0f7      	beq.n	d624e <__aeabi_dmul+0x1c6>
   d625e:	ea43 0306 	orr.w	r3, r3, r6
   d6262:	4770      	bx	lr
   d6264:	ea94 0f0c 	teq	r4, ip
   d6268:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d626c:	bf18      	it	ne
   d626e:	ea95 0f0c 	teqne	r5, ip
   d6272:	d00c      	beq.n	d628e <__aeabi_dmul+0x206>
   d6274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6278:	bf18      	it	ne
   d627a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d627e:	d1d1      	bne.n	d6224 <__aeabi_dmul+0x19c>
   d6280:	ea81 0103 	eor.w	r1, r1, r3
   d6284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6288:	f04f 0000 	mov.w	r0, #0
   d628c:	bd70      	pop	{r4, r5, r6, pc}
   d628e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6292:	bf06      	itte	eq
   d6294:	4610      	moveq	r0, r2
   d6296:	4619      	moveq	r1, r3
   d6298:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d629c:	d019      	beq.n	d62d2 <__aeabi_dmul+0x24a>
   d629e:	ea94 0f0c 	teq	r4, ip
   d62a2:	d102      	bne.n	d62aa <__aeabi_dmul+0x222>
   d62a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d62a8:	d113      	bne.n	d62d2 <__aeabi_dmul+0x24a>
   d62aa:	ea95 0f0c 	teq	r5, ip
   d62ae:	d105      	bne.n	d62bc <__aeabi_dmul+0x234>
   d62b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d62b4:	bf1c      	itt	ne
   d62b6:	4610      	movne	r0, r2
   d62b8:	4619      	movne	r1, r3
   d62ba:	d10a      	bne.n	d62d2 <__aeabi_dmul+0x24a>
   d62bc:	ea81 0103 	eor.w	r1, r1, r3
   d62c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d62c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d62cc:	f04f 0000 	mov.w	r0, #0
   d62d0:	bd70      	pop	{r4, r5, r6, pc}
   d62d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d62d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d62da:	bd70      	pop	{r4, r5, r6, pc}

000d62dc <__aeabi_ddiv>:
   d62dc:	b570      	push	{r4, r5, r6, lr}
   d62de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d62e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d62e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d62ea:	bf1d      	ittte	ne
   d62ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d62f0:	ea94 0f0c 	teqne	r4, ip
   d62f4:	ea95 0f0c 	teqne	r5, ip
   d62f8:	f000 f8a7 	bleq	d644a <__aeabi_ddiv+0x16e>
   d62fc:	eba4 0405 	sub.w	r4, r4, r5
   d6300:	ea81 0e03 	eor.w	lr, r1, r3
   d6304:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6308:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d630c:	f000 8088 	beq.w	d6420 <__aeabi_ddiv+0x144>
   d6310:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6314:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6318:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d631c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6320:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6324:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6328:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d632c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6330:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6334:	429d      	cmp	r5, r3
   d6336:	bf08      	it	eq
   d6338:	4296      	cmpeq	r6, r2
   d633a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d633e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6342:	d202      	bcs.n	d634a <__aeabi_ddiv+0x6e>
   d6344:	085b      	lsrs	r3, r3, #1
   d6346:	ea4f 0232 	mov.w	r2, r2, rrx
   d634a:	1ab6      	subs	r6, r6, r2
   d634c:	eb65 0503 	sbc.w	r5, r5, r3
   d6350:	085b      	lsrs	r3, r3, #1
   d6352:	ea4f 0232 	mov.w	r2, r2, rrx
   d6356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d635a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d635e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6362:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6366:	bf22      	ittt	cs
   d6368:	1ab6      	subcs	r6, r6, r2
   d636a:	4675      	movcs	r5, lr
   d636c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6370:	085b      	lsrs	r3, r3, #1
   d6372:	ea4f 0232 	mov.w	r2, r2, rrx
   d6376:	ebb6 0e02 	subs.w	lr, r6, r2
   d637a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d637e:	bf22      	ittt	cs
   d6380:	1ab6      	subcs	r6, r6, r2
   d6382:	4675      	movcs	r5, lr
   d6384:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6388:	085b      	lsrs	r3, r3, #1
   d638a:	ea4f 0232 	mov.w	r2, r2, rrx
   d638e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6392:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6396:	bf22      	ittt	cs
   d6398:	1ab6      	subcs	r6, r6, r2
   d639a:	4675      	movcs	r5, lr
   d639c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d63a0:	085b      	lsrs	r3, r3, #1
   d63a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63ae:	bf22      	ittt	cs
   d63b0:	1ab6      	subcs	r6, r6, r2
   d63b2:	4675      	movcs	r5, lr
   d63b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d63b8:	ea55 0e06 	orrs.w	lr, r5, r6
   d63bc:	d018      	beq.n	d63f0 <__aeabi_ddiv+0x114>
   d63be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d63c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d63c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d63ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d63ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d63d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d63d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d63da:	d1c0      	bne.n	d635e <__aeabi_ddiv+0x82>
   d63dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63e0:	d10b      	bne.n	d63fa <__aeabi_ddiv+0x11e>
   d63e2:	ea41 0100 	orr.w	r1, r1, r0
   d63e6:	f04f 0000 	mov.w	r0, #0
   d63ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d63ee:	e7b6      	b.n	d635e <__aeabi_ddiv+0x82>
   d63f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63f4:	bf04      	itt	eq
   d63f6:	4301      	orreq	r1, r0
   d63f8:	2000      	moveq	r0, #0
   d63fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63fe:	bf88      	it	hi
   d6400:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6404:	f63f aeaf 	bhi.w	d6166 <__aeabi_dmul+0xde>
   d6408:	ebb5 0c03 	subs.w	ip, r5, r3
   d640c:	bf04      	itt	eq
   d640e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6416:	f150 0000 	adcs.w	r0, r0, #0
   d641a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d641e:	bd70      	pop	{r4, r5, r6, pc}
   d6420:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6424:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6428:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d642c:	bfc2      	ittt	gt
   d642e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6436:	bd70      	popgt	{r4, r5, r6, pc}
   d6438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d643c:	f04f 0e00 	mov.w	lr, #0
   d6440:	3c01      	subs	r4, #1
   d6442:	e690      	b.n	d6166 <__aeabi_dmul+0xde>
   d6444:	ea45 0e06 	orr.w	lr, r5, r6
   d6448:	e68d      	b.n	d6166 <__aeabi_dmul+0xde>
   d644a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d644e:	ea94 0f0c 	teq	r4, ip
   d6452:	bf08      	it	eq
   d6454:	ea95 0f0c 	teqeq	r5, ip
   d6458:	f43f af3b 	beq.w	d62d2 <__aeabi_dmul+0x24a>
   d645c:	ea94 0f0c 	teq	r4, ip
   d6460:	d10a      	bne.n	d6478 <__aeabi_ddiv+0x19c>
   d6462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6466:	f47f af34 	bne.w	d62d2 <__aeabi_dmul+0x24a>
   d646a:	ea95 0f0c 	teq	r5, ip
   d646e:	f47f af25 	bne.w	d62bc <__aeabi_dmul+0x234>
   d6472:	4610      	mov	r0, r2
   d6474:	4619      	mov	r1, r3
   d6476:	e72c      	b.n	d62d2 <__aeabi_dmul+0x24a>
   d6478:	ea95 0f0c 	teq	r5, ip
   d647c:	d106      	bne.n	d648c <__aeabi_ddiv+0x1b0>
   d647e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6482:	f43f aefd 	beq.w	d6280 <__aeabi_dmul+0x1f8>
   d6486:	4610      	mov	r0, r2
   d6488:	4619      	mov	r1, r3
   d648a:	e722      	b.n	d62d2 <__aeabi_dmul+0x24a>
   d648c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6490:	bf18      	it	ne
   d6492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6496:	f47f aec5 	bne.w	d6224 <__aeabi_dmul+0x19c>
   d649a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d649e:	f47f af0d 	bne.w	d62bc <__aeabi_dmul+0x234>
   d64a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d64a6:	f47f aeeb 	bne.w	d6280 <__aeabi_dmul+0x1f8>
   d64aa:	e712      	b.n	d62d2 <__aeabi_dmul+0x24a>

000d64ac <__gedf2>:
   d64ac:	f04f 3cff 	mov.w	ip, #4294967295
   d64b0:	e006      	b.n	d64c0 <__cmpdf2+0x4>
   d64b2:	bf00      	nop

000d64b4 <__ledf2>:
   d64b4:	f04f 0c01 	mov.w	ip, #1
   d64b8:	e002      	b.n	d64c0 <__cmpdf2+0x4>
   d64ba:	bf00      	nop

000d64bc <__cmpdf2>:
   d64bc:	f04f 0c01 	mov.w	ip, #1
   d64c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d64c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64d0:	bf18      	it	ne
   d64d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d64d6:	d01b      	beq.n	d6510 <__cmpdf2+0x54>
   d64d8:	b001      	add	sp, #4
   d64da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d64de:	bf0c      	ite	eq
   d64e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d64e4:	ea91 0f03 	teqne	r1, r3
   d64e8:	bf02      	ittt	eq
   d64ea:	ea90 0f02 	teqeq	r0, r2
   d64ee:	2000      	moveq	r0, #0
   d64f0:	4770      	bxeq	lr
   d64f2:	f110 0f00 	cmn.w	r0, #0
   d64f6:	ea91 0f03 	teq	r1, r3
   d64fa:	bf58      	it	pl
   d64fc:	4299      	cmppl	r1, r3
   d64fe:	bf08      	it	eq
   d6500:	4290      	cmpeq	r0, r2
   d6502:	bf2c      	ite	cs
   d6504:	17d8      	asrcs	r0, r3, #31
   d6506:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d650a:	f040 0001 	orr.w	r0, r0, #1
   d650e:	4770      	bx	lr
   d6510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6518:	d102      	bne.n	d6520 <__cmpdf2+0x64>
   d651a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d651e:	d107      	bne.n	d6530 <__cmpdf2+0x74>
   d6520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6528:	d1d6      	bne.n	d64d8 <__cmpdf2+0x1c>
   d652a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d652e:	d0d3      	beq.n	d64d8 <__cmpdf2+0x1c>
   d6530:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6534:	4770      	bx	lr
   d6536:	bf00      	nop

000d6538 <__aeabi_cdrcmple>:
   d6538:	4684      	mov	ip, r0
   d653a:	4610      	mov	r0, r2
   d653c:	4662      	mov	r2, ip
   d653e:	468c      	mov	ip, r1
   d6540:	4619      	mov	r1, r3
   d6542:	4663      	mov	r3, ip
   d6544:	e000      	b.n	d6548 <__aeabi_cdcmpeq>
   d6546:	bf00      	nop

000d6548 <__aeabi_cdcmpeq>:
   d6548:	b501      	push	{r0, lr}
   d654a:	f7ff ffb7 	bl	d64bc <__cmpdf2>
   d654e:	2800      	cmp	r0, #0
   d6550:	bf48      	it	mi
   d6552:	f110 0f00 	cmnmi.w	r0, #0
   d6556:	bd01      	pop	{r0, pc}

000d6558 <__aeabi_dcmpeq>:
   d6558:	f84d ed08 	str.w	lr, [sp, #-8]!
   d655c:	f7ff fff4 	bl	d6548 <__aeabi_cdcmpeq>
   d6560:	bf0c      	ite	eq
   d6562:	2001      	moveq	r0, #1
   d6564:	2000      	movne	r0, #0
   d6566:	f85d fb08 	ldr.w	pc, [sp], #8
   d656a:	bf00      	nop

000d656c <__aeabi_dcmplt>:
   d656c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6570:	f7ff ffea 	bl	d6548 <__aeabi_cdcmpeq>
   d6574:	bf34      	ite	cc
   d6576:	2001      	movcc	r0, #1
   d6578:	2000      	movcs	r0, #0
   d657a:	f85d fb08 	ldr.w	pc, [sp], #8
   d657e:	bf00      	nop

000d6580 <__aeabi_dcmple>:
   d6580:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6584:	f7ff ffe0 	bl	d6548 <__aeabi_cdcmpeq>
   d6588:	bf94      	ite	ls
   d658a:	2001      	movls	r0, #1
   d658c:	2000      	movhi	r0, #0
   d658e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6592:	bf00      	nop

000d6594 <__aeabi_dcmpge>:
   d6594:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6598:	f7ff ffce 	bl	d6538 <__aeabi_cdrcmple>
   d659c:	bf94      	ite	ls
   d659e:	2001      	movls	r0, #1
   d65a0:	2000      	movhi	r0, #0
   d65a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d65a6:	bf00      	nop

000d65a8 <__aeabi_dcmpgt>:
   d65a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65ac:	f7ff ffc4 	bl	d6538 <__aeabi_cdrcmple>
   d65b0:	bf34      	ite	cc
   d65b2:	2001      	movcc	r0, #1
   d65b4:	2000      	movcs	r0, #0
   d65b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d65ba:	bf00      	nop

000d65bc <__aeabi_dcmpun>:
   d65bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d65c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65c4:	d102      	bne.n	d65cc <__aeabi_dcmpun+0x10>
   d65c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d65ca:	d10a      	bne.n	d65e2 <__aeabi_dcmpun+0x26>
   d65cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d65d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65d4:	d102      	bne.n	d65dc <__aeabi_dcmpun+0x20>
   d65d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d65da:	d102      	bne.n	d65e2 <__aeabi_dcmpun+0x26>
   d65dc:	f04f 0000 	mov.w	r0, #0
   d65e0:	4770      	bx	lr
   d65e2:	f04f 0001 	mov.w	r0, #1
   d65e6:	4770      	bx	lr

000d65e8 <__aeabi_d2iz>:
   d65e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d65ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d65f0:	d215      	bcs.n	d661e <__aeabi_d2iz+0x36>
   d65f2:	d511      	bpl.n	d6618 <__aeabi_d2iz+0x30>
   d65f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d65fc:	d912      	bls.n	d6624 <__aeabi_d2iz+0x3c>
   d65fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d660a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d660e:	fa23 f002 	lsr.w	r0, r3, r2
   d6612:	bf18      	it	ne
   d6614:	4240      	negne	r0, r0
   d6616:	4770      	bx	lr
   d6618:	f04f 0000 	mov.w	r0, #0
   d661c:	4770      	bx	lr
   d661e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6622:	d105      	bne.n	d6630 <__aeabi_d2iz+0x48>
   d6624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6628:	bf08      	it	eq
   d662a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d662e:	4770      	bx	lr
   d6630:	f04f 0000 	mov.w	r0, #0
   d6634:	4770      	bx	lr
   d6636:	bf00      	nop

000d6638 <__aeabi_d2uiz>:
   d6638:	004a      	lsls	r2, r1, #1
   d663a:	d211      	bcs.n	d6660 <__aeabi_d2uiz+0x28>
   d663c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6640:	d211      	bcs.n	d6666 <__aeabi_d2uiz+0x2e>
   d6642:	d50d      	bpl.n	d6660 <__aeabi_d2uiz+0x28>
   d6644:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6648:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d664c:	d40e      	bmi.n	d666c <__aeabi_d2uiz+0x34>
   d664e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6656:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d665a:	fa23 f002 	lsr.w	r0, r3, r2
   d665e:	4770      	bx	lr
   d6660:	f04f 0000 	mov.w	r0, #0
   d6664:	4770      	bx	lr
   d6666:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d666a:	d102      	bne.n	d6672 <__aeabi_d2uiz+0x3a>
   d666c:	f04f 30ff 	mov.w	r0, #4294967295
   d6670:	4770      	bx	lr
   d6672:	f04f 0000 	mov.w	r0, #0
   d6676:	4770      	bx	lr

000d6678 <__aeabi_d2f>:
   d6678:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d667c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6680:	bf24      	itt	cs
   d6682:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6686:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d668a:	d90d      	bls.n	d66a8 <__aeabi_d2f+0x30>
   d668c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6690:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6694:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6698:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d669c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d66a0:	bf08      	it	eq
   d66a2:	f020 0001 	biceq.w	r0, r0, #1
   d66a6:	4770      	bx	lr
   d66a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d66ac:	d121      	bne.n	d66f2 <__aeabi_d2f+0x7a>
   d66ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d66b2:	bfbc      	itt	lt
   d66b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d66b8:	4770      	bxlt	lr
   d66ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d66c2:	f1c2 0218 	rsb	r2, r2, #24
   d66c6:	f1c2 0c20 	rsb	ip, r2, #32
   d66ca:	fa10 f30c 	lsls.w	r3, r0, ip
   d66ce:	fa20 f002 	lsr.w	r0, r0, r2
   d66d2:	bf18      	it	ne
   d66d4:	f040 0001 	orrne.w	r0, r0, #1
   d66d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d66e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d66e4:	ea40 000c 	orr.w	r0, r0, ip
   d66e8:	fa23 f302 	lsr.w	r3, r3, r2
   d66ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d66f0:	e7cc      	b.n	d668c <__aeabi_d2f+0x14>
   d66f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d66f6:	d107      	bne.n	d6708 <__aeabi_d2f+0x90>
   d66f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d66fc:	bf1e      	ittt	ne
   d66fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6702:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6706:	4770      	bxne	lr
   d6708:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d670c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6710:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6714:	4770      	bx	lr
   d6716:	bf00      	nop

000d6718 <__cxa_atexit>:
   d6718:	b510      	push	{r4, lr}
   d671a:	4c05      	ldr	r4, [pc, #20]	; (d6730 <__cxa_atexit+0x18>)
   d671c:	4613      	mov	r3, r2
   d671e:	b12c      	cbz	r4, d672c <__cxa_atexit+0x14>
   d6720:	460a      	mov	r2, r1
   d6722:	4601      	mov	r1, r0
   d6724:	2002      	movs	r0, #2
   d6726:	f3af 8000 	nop.w
   d672a:	bd10      	pop	{r4, pc}
   d672c:	4620      	mov	r0, r4
   d672e:	bd10      	pop	{r4, pc}
   d6730:	00000000 	.word	0x00000000

000d6734 <memcpy>:
   d6734:	b510      	push	{r4, lr}
   d6736:	1e43      	subs	r3, r0, #1
   d6738:	440a      	add	r2, r1
   d673a:	4291      	cmp	r1, r2
   d673c:	d004      	beq.n	d6748 <memcpy+0x14>
   d673e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6742:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6746:	e7f8      	b.n	d673a <memcpy+0x6>
   d6748:	bd10      	pop	{r4, pc}

000d674a <memset>:
   d674a:	4402      	add	r2, r0
   d674c:	4603      	mov	r3, r0
   d674e:	4293      	cmp	r3, r2
   d6750:	d002      	beq.n	d6758 <memset+0xe>
   d6752:	f803 1b01 	strb.w	r1, [r3], #1
   d6756:	e7fa      	b.n	d674e <memset+0x4>
   d6758:	4770      	bx	lr
	...

000d675c <srand>:
   d675c:	b538      	push	{r3, r4, r5, lr}
   d675e:	4b12      	ldr	r3, [pc, #72]	; (d67a8 <srand+0x4c>)
   d6760:	681c      	ldr	r4, [r3, #0]
   d6762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6764:	4605      	mov	r5, r0
   d6766:	b9d3      	cbnz	r3, d679e <srand+0x42>
   d6768:	2018      	movs	r0, #24
   d676a:	f7fe f8c3 	bl	d48f4 <malloc>
   d676e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6772:	63a0      	str	r0, [r4, #56]	; 0x38
   d6774:	8003      	strh	r3, [r0, #0]
   d6776:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d677a:	8043      	strh	r3, [r0, #2]
   d677c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6780:	8083      	strh	r3, [r0, #4]
   d6782:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6786:	80c3      	strh	r3, [r0, #6]
   d6788:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d678c:	8103      	strh	r3, [r0, #8]
   d678e:	2305      	movs	r3, #5
   d6790:	8143      	strh	r3, [r0, #10]
   d6792:	230b      	movs	r3, #11
   d6794:	8183      	strh	r3, [r0, #12]
   d6796:	2201      	movs	r2, #1
   d6798:	2300      	movs	r3, #0
   d679a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d679e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67a0:	2200      	movs	r2, #0
   d67a2:	611d      	str	r5, [r3, #16]
   d67a4:	615a      	str	r2, [r3, #20]
   d67a6:	bd38      	pop	{r3, r4, r5, pc}
   d67a8:	2003e300 	.word	0x2003e300

000d67ac <strlen>:
   d67ac:	4603      	mov	r3, r0
   d67ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   d67b2:	2a00      	cmp	r2, #0
   d67b4:	d1fb      	bne.n	d67ae <strlen+0x2>
   d67b6:	1a18      	subs	r0, r3, r0
   d67b8:	3801      	subs	r0, #1
   d67ba:	4770      	bx	lr

000d67bc <dynalib_user>:
   d67bc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d67cc:	0000 0000 6157 6374 6468 676f 7420 6d69     ....Watchdog tim
   d67dc:	6f65 7475 5700 6165 6874 7265 5320 6174     eout.Weather Sta
   d67ec:	6974 6e6f 4400 7665 6369 2065 4449 203a     tion.Device ID: 
   d67fc:	7325 5300 7379 6574 206d 6576 7372 6f69     %s.System versio
   d680c:	3a6e 2520 0073 6e49 7570 2074 6f56 746c     n: %s.Input Volt
   d681c:	6761 2065 694c 696d 3a74 2520 0064 6e49     age Limit: %d.In
   d682c:	7570 2074 7543 7272 6e65 2074 694c 696d     put Current Limi
   d683c:	3a74 2520 0064 694d 696e 756d 206d 7953     t: %d.Minimum Sy
   d684c:	7473 6d65 5620 6c6f 6174 6567 203a 6425     stem Voltage: %d
   d685c:	4300 6168 6772 2065 7543 7272 6e65 3a74     .Charge Current:
   d686c:	2520 0064 6843 7261 6567 5620 6c6f 6174      %d.Charge Volta
   d687c:	6567 203a 6425 4300 6168 6772 3a65 0020     ge: %d.Charge: .
   d688c:	6f56 746c 6761 3a65 0020 6544 7065 5320     Voltage: .Deep S
   d689c:	656c 7065 6620 726f 2520 2064 696d 6c6c     leep for %d mill
   d68ac:	7369 6365 6e6f 7364 5400 6172 736e 696d     iseconds.Transmi
   d68bc:	7373 6f69 206e 7473 7461 7375 2520 0064     ssion status %d.
   d68cc:	7061 7770 7464 0000                         appwdt..

000d68d4 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d68d4:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

000d68e4 <CSWTCH.24>:
   d68e4:	0bb8 0000 0c1c 0000 0c80 0000 0ce4 0000     ................
   d68f4:	0d48 0000 0dac 0000 0e10 0000 0e74 0000     H...........t...

000d6904 <_ZTVN5spark13EthernetClassE>:
	...
   d690c:	4aaf 000d 4aa5 000d 4a9b 000d 4a91 000d     .J...J...J...J..
   d691c:	4a85 000d 4a79 000d 4a6d 000d 4a65 000d     .J..yJ..mJ..eJ..
   d692c:	4a5b 000d 4a51 000d 57f9 000d               [J..QJ...W..

000d6938 <_ZTV8SPIClass>:
	...
   d6940:	4acd 000d 4acf 000d 616e 006e 766f 0066     .J...J..nan.ovf.
   d6950:	002e 6e69 0066 6e6c 6600 006e 6f63 6564     ..inf.ln.fn.code
   d6960:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   d6970:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d6980:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d6990:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
   d69a0:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d69b0:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d69c0:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d69d0:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d69e0:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d69f0:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d6a00:	4867 6e61 6c64 7265 6100 7070 6e00 6e6f     gHandler.app.non
   d6a10:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   d6a20:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   d6a30:	006c 005a 2b25 3330 3a64 3025 7532 2500     l.Z.%+03d:%02u.%
   d6a40:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d6a50:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d6a5c <_ZTV9IPAddress>:
	...
   d6a64:	523f 000d 5231 000d 5233 000d               ?R..1R..3R..

000d6a70 <_ZTV9USBSerial>:
	...
   d6a78:	5319 000d 535d 000d 5337 000d 4c19 000d     .S..]S..7S...L..
   d6a88:	5331 000d 531b 000d 5323 000d 5357 000d     1S...S..#S..WS..
   d6a98:	532b 000d 5315 000d                         +S...S..

000d6aa0 <_ZTVN5spark13CellularClassE>:
	...
   d6aa8:	5453 000d 5449 000d 543f 000d 53f5 000d     ST..IT..?T...S..
   d6ab8:	5433 000d 5427 000d 541b 000d 5413 000d     3T..'T...T...T..
   d6ac8:	5409 000d 53ff 000d 57f9 000d               .T...S...W..

000d6ad4 <_ZTV11USARTSerial>:
	...
   d6adc:	549d 000d 54c1 000d 54cd 000d 4c19 000d     .T...T...T...L..
   d6aec:	54a9 000d 54b5 000d 54af 000d 54bb 000d     .T...T...T...T..
   d6afc:	549f 000d 54a3 000d                         .T...T..

000d6b04 <_ZTV7TwoWire>:
	...
   d6b0c:	5571 000d 55bb 000d 5593 000d 5573 000d     qU...U...U..sU..
   d6b1c:	559b 000d 55a3 000d 55ab 000d 55b3 000d     .U...U...U...U..

000d6b2c <_ZTVN5spark9MeshClassE>:
	...
   d6b34:	56bb 000d 56b1 000d 56a7 000d 569d 000d     .V...V...V...V..
   d6b44:	5691 000d 5685 000d 5679 000d 5671 000d     .V...V..yV..qV..
   d6b54:	5667 000d 565d 000d 57f9 000d               gV..]V...W..

000d6b60 <_ZTVN5spark12NetworkClassE>:
	...
   d6b68:	5791 000d 579b 000d 57a5 000d 57af 000d     .W...W...W...W..
   d6b78:	57b9 000d 57c5 000d 57d1 000d 57dd 000d     .W...W...W...W..
   d6b88:	57e5 000d 57ef 000d 57f9 000d               .W...W...W..

000d6b94 <__sf_fake_stdin>:
	...

000d6bb4 <__sf_fake_stdout>:
	...

000d6bd4 <__sf_fake_stderr>:
	...
   d6bf4:	0043                                        C.

000d6bf6 <link_const_variable_data_end>:
	...

000d6bf8 <link_constructors_location>:
   d6bf8:	000d4391 	.word	0x000d4391
   d6bfc:	000d44ad 	.word	0x000d44ad
   d6c00:	000d44c1 	.word	0x000d44c1
   d6c04:	000d44c7 	.word	0x000d44c7
   d6c08:	000d4ab9 	.word	0x000d4ab9
   d6c0c:	000d4b4d 	.word	0x000d4b4d
   d6c10:	000d4f31 	.word	0x000d4f31
   d6c14:	000d4f41 	.word	0x000d4f41
   d6c18:	000d4f89 	.word	0x000d4f89
   d6c1c:	000d545d 	.word	0x000d545d
   d6c20:	000d5745 	.word	0x000d5745
   d6c24:	000d587d 	.word	0x000d587d
   d6c28:	000d592d 	.word	0x000d592d
   d6c2c:	000d5a89 	.word	0x000d5a89
   d6c30:	000d5b0d 	.word	0x000d5b0d
   d6c34:	000d5bd1 	.word	0x000d5bd1
   d6c38:	000d5c95 	.word	0x000d5c95

000d6c3c <link_constructors_end>:
   d6c3c:	00000000 	.word	0x00000000
