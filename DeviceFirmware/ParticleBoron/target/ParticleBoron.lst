
c:/working/WeatherStation/DeviceFirmware/ParticleBoron/target/ParticleBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b98  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016c44  2**0
                  CONTENTS
  3 .data         00000068  2003e2a0  000d6bb0  0000e2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004e8  2003e308  2003e308  0001e308  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6c18  000d6c18  00016c18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6c40  000d6c40  00016c40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a9786  00000000  00000000  00016c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011041  00000000  00000000  000c03ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014f70  00000000  00000000  000d140b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002110  00000000  00000000  000e637b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033b0  00000000  00000000  000e848b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00037cdd  00000000  00000000  000eb83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002bc48  00000000  00000000  00123518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d44e3  00000000  00000000  0014f160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bdc0  00000000  00000000  00223644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	64 67 0d 00                                         dg..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb55 	bl	d66dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb5a 	bl	d66f2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2a0 	.word	0x2003e2a0
   d4048:	000d6bb0 	.word	0x000d6bb0
   d404c:	2003e308 	.word	0x2003e308
   d4050:	2003e308 	.word	0x2003e308
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8a5 	bl	d51a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6bb0 	.word	0x000d6bb0
   d4080:	000d6b6c 	.word	0x000d6b6c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86c 	b.w	d4160 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f93d 	bl	d4308 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b857 	b.w	d5144 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bc69 	b.w	d496c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bc67 	b.w	d496c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	4718      	bx	r3

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z15watchDogTimeoutv>:
Compass compassSensor;

ApplicationWatchdog wd(10000, watchDogTimeout);

void watchDogTimeout()
{
   d40cc:	b508      	push	{r3, lr}
  Serial.println("Watchdog timeout");
   d40ce:	f001 f941 	bl	d5354 <_Z16_fetch_usbserialv>
   d40d2:	4903      	ldr	r1, [pc, #12]	; (d40e0 <_Z15watchDogTimeoutv+0x14>)
   d40d4:	f000 fdf5 	bl	d4cc2 <_ZN5Print7printlnEPKc>
  System.reset();
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
ApplicationWatchdog wd(10000, watchDogTimeout);

void watchDogTimeout()
{
  Serial.println("Watchdog timeout");
  System.reset();
   d40dc:	f000 bd4e 	b.w	d4b7c <_ZN11SystemClass5resetEv>
   d40e0:	000d6778 	.word	0x000d6778

000d40e4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e4:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d40e6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e8:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d40ea:	b10b      	cbz	r3, d40f0 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d40ec:	68c0      	ldr	r0, [r0, #12]
   d40ee:	e006      	b.n	d40fe <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d40f0:	6840      	ldr	r0, [r0, #4]
   d40f2:	b128      	cbz	r0, d4100 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d40f4:	6883      	ldr	r3, [r0, #8]
   d40f6:	b90b      	cbnz	r3, d40fc <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d40f8:	f001 fc97 	bl	d5a2a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40fc:	68c3      	ldr	r3, [r0, #12]
   d40fe:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d4100:	2301      	movs	r3, #1
   d4102:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4104:	2000      	movs	r0, #0
    }
   d4106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d410a:	f000 bab3 	b.w	d4674 <os_thread_exit>

000d410e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d410e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4110:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4112:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4114:	b113      	cbz	r3, d411c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4116:	2203      	movs	r2, #3
   d4118:	4601      	mov	r1, r0
   d411a:	4798      	blx	r3
    }
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
   d4120:	b538      	push	{r3, r4, r5, lr}
   d4122:	4604      	mov	r4, r0
   d4124:	6940      	ldr	r0, [r0, #20]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
   d4126:	b1b0      	cbz	r0, d4156 <_ZN19ApplicationWatchdogD1Ev+0x36>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4128:	f000 fa7c 	bl	d4624 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d412c:	b998      	cbnz	r0, d4156 <_ZN19ApplicationWatchdogD1Ev+0x36>
            return;

        if (!exited_) {
   d412e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d4132:	b91b      	cbnz	r3, d413c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4134:	6960      	ldr	r0, [r4, #20]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4136:	b108      	cbz	r0, d413c <_ZN19ApplicationWatchdogD1Ev+0x1c>
   d4138:	f000 fa7c 	bl	d4634 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d413c:	69a5      	ldr	r5, [r4, #24]
   d413e:	b13d      	cbz	r5, d4150 <_ZN19ApplicationWatchdogD1Ev+0x30>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4140:	4628      	mov	r0, r5
   d4142:	f7ff ffe4 	bl	d410e <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   d4146:	4628      	mov	r0, r5
   d4148:	f7ff ffa5 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d414c:	2300      	movs	r3, #0
   d414e:	61a3      	str	r3, [r4, #24]
        }

        os_thread_cleanup(handle);
   d4150:	6960      	ldr	r0, [r4, #20]
   d4152:	f000 fa77 	bl	d4644 <os_thread_cleanup>
   d4156:	1d20      	adds	r0, r4, #4
   d4158:	f7ff ffd9 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	bd38      	pop	{r3, r4, r5, pc}

000d4160 <setup>:
}

void setup()
{
   d4160:	b508      	push	{r3, lr}
  pinMode(LED_BUILTIN, OUTPUT);
   d4162:	2101      	movs	r1, #1
   d4164:	2007      	movs	r0, #7
   d4166:	f001 fb8b 	bl	d5880 <pinMode>

  Serial.begin(9600);  
   d416a:	f001 f8f3 	bl	d5354 <_Z16_fetch_usbserialv>
   d416e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   d4172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(9600);  
   d4176:	f001 b8e1 	b.w	d533c <_ZN9USBSerial5beginEl>
	...

000d417c <_Z15printSystemInfov>:
}

void printSystemInfo()
{
   d417c:	b530      	push	{r4, r5, lr}
   d417e:	b097      	sub	sp, #92	; 0x5c
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4180:	a807      	add	r0, sp, #28
   d4182:	f000 fbdb 	bl	d493c <spark_deviceID>
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
   d4186:	f001 f8e5 	bl	d5354 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d418a:	4a52      	ldr	r2, [pc, #328]	; (d42d4 <_Z15printSystemInfov+0x158>)
   d418c:	9b07      	ldr	r3, [sp, #28]
   d418e:	2101      	movs	r1, #1
   d4190:	f000 feaf 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("System version: %s", System.version().c_str());
   d4194:	f001 f8de 	bl	d5354 <_Z16_fetch_usbserialv>
   d4198:	4604      	mov	r4, r0
#define SYSTEM_VERSION_080RC27
#define SYSTEM_VERSION_090RC1
#define SYSTEM_VERSION_090RC2
#define SYSTEM_VERSION_090RC3

typedef struct __attribute__((packed)) SystemVersionInfo
   d419a:	a816      	add	r0, sp, #88	; 0x58
   d419c:	231c      	movs	r3, #28
   d419e:	f820 3d1c 	strh.w	r3, [r0, #-28]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   d41a2:	2100      	movs	r1, #0
   d41a4:	f000 fb5e 	bl	d4864 <system_version_info>
        return String(info.versionString);
   d41a8:	a911      	add	r1, sp, #68	; 0x44
   d41aa:	a80b      	add	r0, sp, #44	; 0x2c
   d41ac:	f000 fd3d 	bl	d4c2a <_ZN6StringC1EPK19__FlashStringHelper>
   d41b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d41b2:	4a49      	ldr	r2, [pc, #292]	; (d42d8 <_Z15printSystemInfov+0x15c>)
   d41b4:	2101      	movs	r1, #1
   d41b6:	4620      	mov	r0, r4

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d41b8:	4c48      	ldr	r4, [pc, #288]	; (d42dc <_Z15printSystemInfov+0x160>)
   d41ba:	f000 fe9a 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>

void printSystemInfo()
{
  String myID = System.deviceID();
  Serial.printlnf("Device ID: %s", myID.c_str());
  Serial.printlnf("System version: %s", System.version().c_str());
   d41be:	a80b      	add	r0, sp, #44	; 0x2c
   d41c0:	f000 fcec 	bl	d4b9c <_ZN6StringD1Ev>

  byte inputVoltageLimit = pmic.getInputVoltageLimit();
   d41c4:	4620      	mov	r0, r4
   d41c6:	f000 fbf1 	bl	d49ac <_ZN4PMIC20getInputVoltageLimitEv>
   d41ca:	4605      	mov	r5, r0
  Serial.printlnf("Input Voltage Limit: %d", inputVoltageLimit);
   d41cc:	f001 f8c2 	bl	d5354 <_Z16_fetch_usbserialv>
   d41d0:	462b      	mov	r3, r5
   d41d2:	4a43      	ldr	r2, [pc, #268]	; (d42e0 <_Z15printSystemInfov+0x164>)
   d41d4:	2101      	movs	r1, #1
   d41d6:	f000 fe8c 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>

  byte inputCurrentLimit = pmic.getInputCurrentLimit();
   d41da:	4620      	mov	r0, r4
   d41dc:	f000 fc3a 	bl	d4a54 <_ZN4PMIC20getInputCurrentLimitEv>
   d41e0:	4605      	mov	r5, r0
  Serial.printlnf("Input Current Limit: %d", inputCurrentLimit);
   d41e2:	f001 f8b7 	bl	d5354 <_Z16_fetch_usbserialv>
   d41e6:	b2eb      	uxtb	r3, r5
   d41e8:	4a3e      	ldr	r2, [pc, #248]	; (d42e4 <_Z15printSystemInfov+0x168>)
   d41ea:	2101      	movs	r1, #1
   d41ec:	f000 fe81 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>

  uint16_t minimumSystemVoltage = pmic.getMinimumSystemVoltage();
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fc3b 	bl	d4a6c <_ZN4PMIC23getMinimumSystemVoltageEv>
   d41f6:	4605      	mov	r5, r0
  Serial.printlnf("Minimum System Voltage: %d", minimumSystemVoltage);
   d41f8:	f001 f8ac 	bl	d5354 <_Z16_fetch_usbserialv>
   d41fc:	462b      	mov	r3, r5
   d41fe:	4a3a      	ldr	r2, [pc, #232]	; (d42e8 <_Z15printSystemInfov+0x16c>)
   d4200:	2101      	movs	r1, #1
   d4202:	f000 fe76 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>

  byte chargeCurrent = pmic.getChargeCurrent();
   d4206:	4620      	mov	r0, r4
   d4208:	f000 fc3c 	bl	d4a84 <_ZN4PMIC16getChargeCurrentEv>
   d420c:	4605      	mov	r5, r0
  Serial.printlnf("Charge Current: %d", chargeCurrent);
   d420e:	f001 f8a1 	bl	d5354 <_Z16_fetch_usbserialv>
   d4212:	462b      	mov	r3, r5
   d4214:	4a35      	ldr	r2, [pc, #212]	; (d42ec <_Z15printSystemInfov+0x170>)
   d4216:	2101      	movs	r1, #1
   d4218:	f000 fe6b 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fc37 	bl	d4a90 <_ZN4PMIC21getChargeVoltageValueEv>
   d4222:	4604      	mov	r4, r0
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);
   d4224:	f001 f896 	bl	d5354 <_Z16_fetch_usbserialv>
   d4228:	4623      	mov	r3, r4
   d422a:	4a31      	ldr	r2, [pc, #196]	; (d42f0 <_Z15printSystemInfov+0x174>)

  Serial.print("Charge: ");
  Serial.println(fuel.getSoC());
   d422c:	4c31      	ldr	r4, [pc, #196]	; (d42f4 <_Z15printSystemInfov+0x178>)
   d422e:	2101      	movs	r1, #1
   d4230:	f000 fe5f 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Charge Current: %d", chargeCurrent);

  uint16_t chargeVoltage = pmic.getChargeVoltageValue();
  Serial.printlnf("Charge Voltage: %d", chargeVoltage);

  Serial.print("Charge: ");
   d4234:	f001 f88e 	bl	d5354 <_Z16_fetch_usbserialv>
   d4238:	492f      	ldr	r1, [pc, #188]	; (d42f8 <_Z15printSystemInfov+0x17c>)
   d423a:	f000 fd2f 	bl	d4c9c <_ZN5Print5printEPKc>
  Serial.println(fuel.getSoC());
   d423e:	f001 f889 	bl	d5354 <_Z16_fetch_usbserialv>
   d4242:	4605      	mov	r5, r0
   d4244:	4620      	mov	r0, r4
   d4246:	f000 ff39 	bl	d50bc <_ZN9FuelGauge6getSoCEv>
   d424a:	ee10 0a10 	vmov	r0, s0
   d424e:	f001 fe9b 	bl	d5f88 <__aeabi_f2d>
   d4252:	ec41 0b10 	vmov	d0, r0, r1
   d4256:	2102      	movs	r1, #2
   d4258:	4628      	mov	r0, r5
   d425a:	f000 fe3f 	bl	d4edc <_ZN5Print7printlnEdi>

  Serial.print("Voltage: ");
   d425e:	f001 f879 	bl	d5354 <_Z16_fetch_usbserialv>
   d4262:	4926      	ldr	r1, [pc, #152]	; (d42fc <_Z15printSystemInfov+0x180>)
   d4264:	f000 fd1a 	bl	d4c9c <_ZN5Print5printEPKc>
  Serial.println(fuel.getVCell());
   d4268:	f001 f874 	bl	d5354 <_Z16_fetch_usbserialv>
   d426c:	4605      	mov	r5, r0
   d426e:	4620      	mov	r0, r4
   d4270:	f000 ff0e 	bl	d5090 <_ZN9FuelGauge8getVCellEv>
   d4274:	ee10 0a10 	vmov	r0, s0
   d4278:	f001 fe86 	bl	d5f88 <__aeabi_f2d>
   d427c:	ec41 0b10 	vmov	d0, r0, r1
   d4280:	2102      	movs	r1, #2
   d4282:	4628      	mov	r0, r5
   d4284:	f000 fe2a 	bl	d4edc <_ZN5Print7printlnEdi>
  compassSensor = Compass();
  Serial.println(compassSensor.begin());
  Serial.println("Compass initialed");
  */

  CompassReading reading = compassSensor.getReading();
   d4288:	481d      	ldr	r0, [pc, #116]	; (d4300 <_Z15printSystemInfov+0x184>)
   d428a:	f000 f8e2 	bl	d4452 <_ZN7Compass10getReadingEv>
   d428e:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
   d4292:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
   d4296:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
   d429a:	f001 f85b 	bl	d5354 <_Z16_fetch_usbserialv>
   d429e:	4604      	mov	r4, r0
   d42a0:	9811      	ldr	r0, [sp, #68]	; 0x44
   d42a2:	f001 fe71 	bl	d5f88 <__aeabi_f2d>
   d42a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   d42ac:	f001 fe6c 	bl	d5f88 <__aeabi_f2d>
   d42b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   d42b6:	f001 fe67 	bl	d5f88 <__aeabi_f2d>
   d42ba:	4a12      	ldr	r2, [pc, #72]	; (d4304 <_Z15printSystemInfov+0x188>)
   d42bc:	e9cd 0100 	strd	r0, r1, [sp]
   d42c0:	2101      	movs	r1, #1
   d42c2:	4620      	mov	r0, r4
   d42c4:	f000 fe15 	bl	d4ef2 <_ZN5Print11printf_implEbPKcz>
  Serial.begin(9600);  
}

void printSystemInfo()
{
  String myID = System.deviceID();
   d42c8:	a807      	add	r0, sp, #28
   d42ca:	f000 fc67 	bl	d4b9c <_ZN6StringD1Ev>
  Serial.println("Compass initialed");
  */

  CompassReading reading = compassSensor.getReading();
  Serial.printlnf("X: %d, Y: %d, Z: %d", reading.x, reading.y, reading.z);
}
   d42ce:	b017      	add	sp, #92	; 0x5c
   d42d0:	bd30      	pop	{r4, r5, pc}
   d42d2:	bf00      	nop
   d42d4:	000d6789 	.word	0x000d6789
   d42d8:	000d6797 	.word	0x000d6797
   d42dc:	2003e30c 	.word	0x2003e30c
   d42e0:	000d67aa 	.word	0x000d67aa
   d42e4:	000d67c2 	.word	0x000d67c2
   d42e8:	000d67da 	.word	0x000d67da
   d42ec:	000d67f5 	.word	0x000d67f5
   d42f0:	000d6808 	.word	0x000d6808
   d42f4:	2003e350 	.word	0x2003e350
   d42f8:	000d681b 	.word	0x000d681b
   d42fc:	000d6824 	.word	0x000d6824
   d4300:	2003e338 	.word	0x2003e338
   d4304:	000d682e 	.word	0x000d682e

000d4308 <loop>:

void loop()
{
   d4308:	b508      	push	{r3, lr}
  digitalWrite(LED_BUILTIN, HIGH);
   d430a:	2101      	movs	r1, #1
   d430c:	2007      	movs	r0, #7
   d430e:	f001 fac8 	bl	d58a2 <digitalWrite>

  delay(1000);
   d4312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4316:	f000 fe39 	bl	d4f8c <delay>

  digitalWrite(LED_BUILTIN, LOW);
   d431a:	2100      	movs	r1, #0
   d431c:	2007      	movs	r0, #7
   d431e:	f001 fac0 	bl	d58a2 <digitalWrite>

  // And repeat!
  printSystemInfo();
   d4322:	f7ff ff2b 	bl	d417c <_Z15printSystemInfov>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4326:	f000 f965 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d432a:	4b04      	ldr	r3, [pc, #16]	; (d433c <loop+0x34>)
   d432c:	6018      	str	r0, [r3, #0]

  wd.checkin();

  delay(2000);
}
   d432e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // And repeat!
  printSystemInfo();

  wd.checkin();

  delay(2000);
   d4332:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4336:	f000 be29 	b.w	d4f8c <delay>
   d433a:	bf00      	nop
   d433c:	2003e71c 	.word	0x2003e71c

000d4340 <_GLOBAL__sub_I_SystemMode>:
}
   d4340:	b570      	push	{r4, r5, r6, lr}
   d4342:	b086      	sub	sp, #24

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4344:	f000 f916 	bl	d4574 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4348:	4b2a      	ldr	r3, [pc, #168]	; (d43f4 <_GLOBAL__sub_I_SystemMode+0xb4>)
#include <Wire.h>
#include "Compass.h"

SYSTEM_MODE(SEMI_AUTOMATIC);

FuelGauge fuel;
   d434a:	4c2b      	ldr	r4, [pc, #172]	; (d43f8 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d434c:	4e2b      	ldr	r6, [pc, #172]	; (d43fc <_GLOBAL__sub_I_SystemMode+0xbc>)
   d434e:	2500      	movs	r5, #0
   d4350:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4354:	701d      	strb	r5, [r3, #0]
   d4356:	805d      	strh	r5, [r3, #2]
   d4358:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d435a:	2002      	movs	r0, #2
   d435c:	f000 fa72 	bl	d4844 <set_system_mode>
   d4360:	4629      	mov	r1, r5
   d4362:	4620      	mov	r0, r4
   d4364:	f000 fe54 	bl	d5010 <_ZN9FuelGaugeC1Eb>
   d4368:	4620      	mov	r0, r4
PMIC pmic;
   d436a:	4c25      	ldr	r4, [pc, #148]	; (d4400 <_GLOBAL__sub_I_SystemMode+0xc0>)
#include <Wire.h>
#include "Compass.h"

SYSTEM_MODE(SEMI_AUTOMATIC);

FuelGauge fuel;
   d436c:	4925      	ldr	r1, [pc, #148]	; (d4404 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d436e:	4632      	mov	r2, r6
   d4370:	f001 fb56 	bl	d5a20 <__aeabi_atexit>
PMIC pmic;
   d4374:	4629      	mov	r1, r5
   d4376:	4620      	mov	r0, r4
   d4378:	f000 fb21 	bl	d49be <_ZN4PMICC1Eb>
   d437c:	4632      	mov	r2, r6
   d437e:	4922      	ldr	r1, [pc, #136]	; (d4408 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d4380:	4620      	mov	r0, r4
   d4382:	f001 fb4d 	bl	d5a20 <__aeabi_atexit>
Compass compassSensor;
   d4386:	4821      	ldr	r0, [pc, #132]	; (d440c <_GLOBAL__sub_I_SystemMode+0xcc>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
   d4388:	4c21      	ldr	r4, [pc, #132]	; (d4410 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d438a:	f000 f853 	bl	d4434 <_ZN7CompassC1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d438e:	4b21      	ldr	r3, [pc, #132]	; (d4414 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4390:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4392:	4b21      	ldr	r3, [pc, #132]	; (d4418 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d4394:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d4396:	4b21      	ldr	r3, [pc, #132]	; (d441c <_GLOBAL__sub_I_SystemMode+0xdc>)
   d4398:	9304      	str	r3, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d439a:	a902      	add	r1, sp, #8
   d439c:	f242 7310 	movw	r3, #10000	; 0x2710
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d43a0:	60e5      	str	r5, [r4, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d43a2:	2202      	movs	r2, #2
   d43a4:	1d20      	adds	r0, r4, #4
   d43a6:	6023      	str	r3, [r4, #0]
   d43a8:	f7ff fe83 	bl	d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
   d43ac:	9b05      	ldr	r3, [sp, #20]
   d43ae:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
   d43b0:	9b04      	ldr	r3, [sp, #16]
   d43b2:	60e3      	str	r3, [r4, #12]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d43b4:	4b1a      	ldr	r3, [pc, #104]	; (d4420 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d43b6:	61e3      	str	r3, [r4, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d43b8:	f104 0014 	add.w	r0, r4, #20
   d43bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   d43c0:	2209      	movs	r2, #9
   d43c2:	4918      	ldr	r1, [pc, #96]	; (d4424 <_GLOBAL__sub_I_SystemMode+0xe4>)

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d43c4:	6165      	str	r5, [r4, #20]
   d43c6:	61a5      	str	r5, [r4, #24]
   d43c8:	6224      	str	r4, [r4, #32]
   d43ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d43ce:	e88d 0009 	stmia.w	sp, {r0, r3}
   d43d2:	4b15      	ldr	r3, [pc, #84]	; (d4428 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d43d4:	f000 f91e 	bl	d4614 <os_thread_create>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d43d8:	f000 f90c 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d43dc:	4b13      	ldr	r3, [pc, #76]	; (d442c <_GLOBAL__sub_I_SystemMode+0xec>)
   d43de:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43e0:	a802      	add	r0, sp, #8
   d43e2:	f7ff fe94 	bl	d410e <_ZNSt14_Function_baseD1Ev>

ApplicationWatchdog wd(10000, watchDogTimeout);
   d43e6:	4632      	mov	r2, r6
   d43e8:	4911      	ldr	r1, [pc, #68]	; (d4430 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d43ea:	4620      	mov	r0, r4
   d43ec:	f001 fb18 	bl	d5a20 <__aeabi_atexit>
  printSystemInfo();

  wd.checkin();

  delay(2000);
}
   d43f0:	b006      	add	sp, #24
   d43f2:	bd70      	pop	{r4, r5, r6, pc}
   d43f4:	2003e348 	.word	0x2003e348
   d43f8:	2003e350 	.word	0x2003e350
   d43fc:	2003e308 	.word	0x2003e308
   d4400:	2003e30c 	.word	0x2003e30c
   d4404:	000d502f 	.word	0x000d502f
   d4408:	000d49dd 	.word	0x000d49dd
   d440c:	2003e338 	.word	0x2003e338
   d4410:	2003e310 	.word	0x2003e310
   d4414:	000d40cd 	.word	0x000d40cd
   d4418:	000d40af 	.word	0x000d40af
   d441c:	000d40b3 	.word	0x000d40b3
   d4420:	000d5991 	.word	0x000d5991
   d4424:	000d6842 	.word	0x000d6842
   d4428:	000d40e5 	.word	0x000d40e5
   d442c:	2003e71c 	.word	0x2003e71c
   d4430:	000d4121 	.word	0x000d4121

000d4434 <_ZN7CompassC1Ev>:
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;

Compass::Compass()
   d4434:	b530      	push	{r4, r5, lr}
   d4436:	b085      	sub	sp, #20
   d4438:	4604      	mov	r4, r0
   d443a:	f000 f823 	bl	d4484 <_ZN8QMC5883LC1Ev>
{
    compass = QMC5883L();
   d443e:	4668      	mov	r0, sp
   d4440:	f000 f820 	bl	d4484 <_ZN8QMC5883LC1Ev>
   d4444:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   d4448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   d444c:	4620      	mov	r0, r4
   d444e:	b005      	add	sp, #20
   d4450:	bd30      	pop	{r4, r5, pc}

000d4452 <_ZN7Compass10getReadingEv>:
    }
    return !error;
}

CompassReading Compass::getReading()
{
   d4452:	b500      	push	{lr}
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d4454:	4601      	mov	r1, r0
    }
    return !error;
}

CompassReading Compass::getReading()
{
   d4456:	b08b      	sub	sp, #44	; 0x2c
    CompassReading result;

    MagnetometerScaled scaled = compass.ReadScaledAxis(&compass.dataRegister);
   d4458:	f000 f85c 	bl	d4514 <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d445c:	b00b      	add	sp, #44	; 0x2c
   d445e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4464 <_GLOBAL__sub_I_compass>:
   d4464:	b508      	push	{r3, lr}
   d4466:	f000 f885 	bl	d4574 <HAL_Pin_Map>
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d446a:	4802      	ldr	r0, [pc, #8]	; (d4474 <_GLOBAL__sub_I_compass+0x10>)
    result.x = scaled.XAxis;
    result.y = scaled.YAxis;
    result.z = scaled.ZAxis;

    return result;
   d446c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "Compass.h"

/* Assign a unique ID to this sensor at the same time */
QMC5883L compass;
   d4470:	f000 b808 	b.w	d4484 <_ZN8QMC5883LC1Ev>
   d4474:	2003e358 	.word	0x2003e358

000d4478 <_GLOBAL__sub_I__ZN24Adafruit_HMC5883_Unified6write8Ehhh>:
   d4478:	f000 b87c 	b.w	d4574 <HAL_Pin_Map>

000d447c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d447c:	6803      	ldr	r3, [r0, #0]
   d447e:	b2c9      	uxtb	r1, r1
   d4480:	689b      	ldr	r3, [r3, #8]
   d4482:	4718      	bx	r3

000d4484 <_ZN8QMC5883LC1Ev>:
#include "QMC5883L.h"

QMC5883L::QMC5883L()
{
  
}
   d4484:	4770      	bx	lr

000d4486 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>:
  Wire.write(data);
  Wire.endTransmission();
}

void QMC5883L::Read(int address, int length, QMC5883L_ODR* dataRegister)
{
   d4486:	b570      	push	{r4, r5, r6, lr}
   d4488:	461e      	mov	r6, r3
   d448a:	4615      	mov	r5, r2
   d448c:	460c      	mov	r4, r1
  Wire.beginTransmission(QMC5883L_Address);
   d448e:	f001 fa87 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d4492:	210d      	movs	r1, #13
   d4494:	f001 f897 	bl	d55c6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   d4498:	f001 fa82 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d449c:	4621      	mov	r1, r4
   d449e:	f7ff ffed 	bl	d447c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d44a2:	f001 fa7d 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d44a6:	f001 f895 	bl	d55d4 <_ZN7TwoWire15endTransmissionEv>
  

  Wire.beginTransmission(QMC5883L_Address);
   d44aa:	f001 fa79 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d44ae:	210d      	movs	r1, #13
   d44b0:	f001 f889 	bl	d55c6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(QMC5883L_Address, length);
   d44b4:	f001 fa74 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d44b8:	462a      	mov	r2, r5
   d44ba:	210d      	movs	r1, #13
   d44bc:	f001 f875 	bl	d55aa <_ZN7TwoWire11requestFromEii>

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
   d44c0:	f001 fa6e 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d44c4:	6803      	ldr	r3, [r0, #0]
   d44c6:	691b      	ldr	r3, [r3, #16]
   d44c8:	4798      	blx	r3
   d44ca:	4285      	cmp	r5, r0
   d44cc:	d10b      	bne.n	d44e6 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
   d44ce:	4634      	mov	r4, r6
  {
 for(int i = 0; i < length; i++)
   d44d0:	1ba3      	subs	r3, r4, r6
   d44d2:	429d      	cmp	r5, r3
   d44d4:	dd07      	ble.n	d44e6 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x60>
	  {
		reg[i] = Wire.read();
   d44d6:	f001 fa63 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d44da:	6803      	ldr	r3, [r0, #0]
   d44dc:	695b      	ldr	r3, [r3, #20]
   d44de:	4798      	blx	r3
   d44e0:	f804 0b01 	strb.w	r0, [r4], #1

  byte *reg = &(dataRegister->X_LSB);  // write into the 
  
  if(Wire.available() == length)
  {
 for(int i = 0; i < length; i++)
   d44e4:	e7f4      	b.n	d44d0 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR+0x4a>
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d44e6:	f001 fa5b 	bl	d59a0 <_Z19__fetch_global_Wirev>

  return;
}
   d44ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Serial.print(" from address ");
Serial.println(address + i, HEX);
*/
	  }
  }
  Wire.endTransmission();
   d44ee:	f001 b871 	b.w	d55d4 <_ZN7TwoWire15endTransmissionEv>

000d44f2 <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>:
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d44f2:	b538      	push	{r3, r4, r5, lr}
   d44f4:	4615      	mov	r5, r2
   d44f6:	4604      	mov	r4, r0
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d44f8:	4613      	mov	r3, r2
{
  
}

MagnetometerRaw QMC5883L::ReadRawAxis(QMC5883L_ODR* dataRegister)
{
   d44fa:	4608      	mov	r0, r1
  // also read DOR/OVL/DRDY and temperature data whilst we are about it...
  Read(DataRegisterBegin, 9, dataRegister);
   d44fc:	2209      	movs	r2, #9
   d44fe:	2100      	movs	r1, #0
   d4500:	f7ff ffc1 	bl	d4486 <_ZN8QMC5883L4ReadEiiP12QMC5883L_ODR>
  MagnetometerRaw raw = MagnetometerRaw();
  // QMC5883L is the other way around and comes X,Y,Z
  // answer is in 2's complement becuase XAxis etc are ints...
  raw.XAxis = (dataRegister->X_MSB << 8) | (dataRegister->X_LSB);
   d4504:	882b      	ldrh	r3, [r5, #0]
   d4506:	6023      	str	r3, [r4, #0]
  raw.YAxis = (dataRegister->Y_MSB << 8) | (dataRegister->Y_LSB);
   d4508:	886b      	ldrh	r3, [r5, #2]
   d450a:	6063      	str	r3, [r4, #4]
  raw.ZAxis = (dataRegister->Z_MSB << 8) | (dataRegister->Z_LSB);
   d450c:	88ab      	ldrh	r3, [r5, #4]
   d450e:	60a3      	str	r3, [r4, #8]
return raw;
}
   d4510:	4620      	mov	r0, r4
   d4512:	bd38      	pop	{r3, r4, r5, pc}

000d4514 <_ZN8QMC5883L14ReadScaledAxisEP12QMC5883L_ODR>:

MagnetometerScaled QMC5883L::ReadScaledAxis(QMC5883L_ODR* dataRegister)
{
   d4514:	b510      	push	{r4, lr}
   d4516:	b08a      	sub	sp, #40	; 0x28
   d4518:	4604      	mov	r4, r0
  MagnetometerRaw raw = ReadRawAxis(dataRegister);
   d451a:	460a      	mov	r2, r1
   d451c:	4601      	mov	r1, r0
   d451e:	a804      	add	r0, sp, #16
   d4520:	f7ff ffe7 	bl	d44f2 <_ZN8QMC5883L11ReadRawAxisEP12QMC5883L_ODR>
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
  scaled.YAxis = raw.YAxis * m_Scale;
   d4524:	ed9d 7a05 	vldr	s14, [sp, #20]
Serial.print(" raw.Zaxis ");
Serial.print(raw.ZAxis, BIN);
Serial.println(" ");
*/
// end of bit for debugging
  scaled.XAxis = raw.XAxis * m_Scale;
   d4528:	edd4 7a03 	vldr	s15, [r4, #12]
  scaled.YAxis = raw.YAxis * m_Scale;
   d452c:	eef8 0ac7 	vcvt.f32.s32	s1, s14
  scaled.ZAxis = raw.ZAxis * m_Scale;
   d4530:	ed9d 7a06 	vldr	s14, [sp, #24]
   d4534:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
  return scaled;
   d4538:	ed9d 7a04 	vldr	s14, [sp, #16]
   d453c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
   d4540:	ee60 0aa7 	vmul.f32	s1, s1, s15
   d4544:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4548:	ee21 1a27 	vmul.f32	s2, s2, s15
   d454c:	b00a      	add	sp, #40	; 0x28
   d454e:	bd10      	pop	{r4, pc}

000d4550 <_GLOBAL__sub_I__ZN8QMC5883LC2Ev>:
   d4550:	f000 b810 	b.w	d4574 <HAL_Pin_Map>

000d4554 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <netdb_freeaddrinfo+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	689b      	ldr	r3, [r3, #8]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030268 	.word	0x00030268

000d4564 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <netdb_getaddrinfo+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	68db      	ldr	r3, [r3, #12]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030268 	.word	0x00030268

000d4574 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_Pin_Map+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	681b      	ldr	r3, [r3, #0]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003022c 	.word	0x0003022c

000d4584 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_Pin_Mode+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	689b      	ldr	r3, [r3, #8]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003022c 	.word	0x0003022c

000d4594 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_Get_Pin_Mode+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	68db      	ldr	r3, [r3, #12]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003022c 	.word	0x0003022c

000d45a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_GPIO_Write+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	691b      	ldr	r3, [r3, #16]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003022c 	.word	0x0003022c

000d45b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_SPI_Init+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	69db      	ldr	r3, [r3, #28]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030230 	.word	0x00030230

000d45c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_SPI_Is_Enabled+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6a1b      	ldr	r3, [r3, #32]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030230 	.word	0x00030230

000d45d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_RNG_GetRandomNumber+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	685b      	ldr	r3, [r3, #4]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030218 	.word	0x00030218

000d45e4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_Delay_Milliseconds+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	689b      	ldr	r3, [r3, #8]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030218 	.word	0x00030218

000d45f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	695b      	ldr	r3, [r3, #20]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030218 	.word	0x00030218

000d4604 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_Core_System_Reset_Ex+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030234 	.word	0x00030234

000d4614 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <os_thread_create+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	685b      	ldr	r3, [r3, #4]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030248 	.word	0x00030248

000d4624 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <os_thread_is_current+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	689b      	ldr	r3, [r3, #8]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030248 	.word	0x00030248

000d4634 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <os_thread_join+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	691b      	ldr	r3, [r3, #16]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030248 	.word	0x00030248

000d4644 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <os_thread_cleanup+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	695b      	ldr	r3, [r3, #20]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030248 	.word	0x00030248

000d4654 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <os_mutex_create+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030248 	.word	0x00030248

000d4664 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <os_mutex_recursive_create+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030248 	.word	0x00030248

000d4674 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <os_thread_exit+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030248 	.word	0x00030248

000d4684 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <inet_inet_ntop+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030264 	.word	0x00030264

000d4694 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USART_Init+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003023c 	.word	0x0003023c

000d46a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USART_Write_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	68db      	ldr	r3, [r3, #12]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USART_Available_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	691b      	ldr	r3, [r3, #16]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USART_Read_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	695b      	ldr	r3, [r3, #20]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USART_Peek_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	699b      	ldr	r3, [r3, #24]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USART_Flush_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	69db      	ldr	r3, [r3, #28]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USART_Is_Enabled+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6a1b      	ldr	r3, [r3, #32]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USART_Available_Data_For_Write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_I2C_Request_Data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030228 	.word	0x00030228

000d4724 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_I2C_Begin_Transmission+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	699b      	ldr	r3, [r3, #24]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030228 	.word	0x00030228

000d4734 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_I2C_End_Transmission+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	69db      	ldr	r3, [r3, #28]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030228 	.word	0x00030228

000d4744 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_I2C_Write_Data+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a1b      	ldr	r3, [r3, #32]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030228 	.word	0x00030228

000d4754 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_I2C_Available_Data+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030228 	.word	0x00030228

000d4764 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <HAL_I2C_Read_Data+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030228 	.word	0x00030228

000d4774 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <HAL_I2C_Peek_Data+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030228 	.word	0x00030228

000d4784 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <HAL_I2C_Flush_Data+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030228 	.word	0x00030228

000d4794 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <HAL_I2C_Is_Enabled+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030228 	.word	0x00030228

000d47a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <HAL_I2C_Init+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030228 	.word	0x00030228

000d47b4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <HAL_I2C_Acquire+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030228 	.word	0x00030228

000d47c4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_I2C_Release+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030228 	.word	0x00030228

000d47d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USB_USART_Init+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	681b      	ldr	r3, [r3, #0]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003024c 	.word	0x0003024c

000d47e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USB_USART_Begin+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	685b      	ldr	r3, [r3, #4]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003024c 	.word	0x0003024c

000d47f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USB_USART_Available_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003024c 	.word	0x0003024c

000d4804 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	695b      	ldr	r3, [r3, #20]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003024c 	.word	0x0003024c

000d4814 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USB_USART_Receive_Data+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	699b      	ldr	r3, [r3, #24]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003024c 	.word	0x0003024c

000d4824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USB_USART_Send_Data+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	69db      	ldr	r3, [r3, #28]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003024c 	.word	0x0003024c

000d4834 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USB_USART_Flush_Data+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003024c 	.word	0x0003024c

000d4844 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <set_system_mode+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	685b      	ldr	r3, [r3, #4]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030220 	.word	0x00030220

000d4854 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <system_delay_ms+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	695b      	ldr	r3, [r3, #20]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030220 	.word	0x00030220

000d4864 <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <system_version_info+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030220 	.word	0x00030220

000d4874 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b03      	ldr	r3, [pc, #12]	; (d4884 <system_ctrl_set_app_request_handler+0x10>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d487e:	9301      	str	r3, [sp, #4]
   d4880:	bd08      	pop	{r3, pc}
   d4882:	0000      	.short	0x0000
   d4884:	00030220 	.word	0x00030220

000d4888 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b03      	ldr	r3, [pc, #12]	; (d4898 <system_ctrl_set_result+0x10>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4892:	9301      	str	r3, [sp, #4]
   d4894:	bd08      	pop	{r3, pc}
   d4896:	0000      	.short	0x0000
   d4898:	00030220 	.word	0x00030220

000d489c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <network_connect+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	685b      	ldr	r3, [r3, #4]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030240 	.word	0x00030240

000d48ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <network_connecting+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	689b      	ldr	r3, [r3, #8]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030240 	.word	0x00030240

000d48bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <network_disconnect+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	68db      	ldr	r3, [r3, #12]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030240 	.word	0x00030240

000d48cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <network_ready+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	691b      	ldr	r3, [r3, #16]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030240 	.word	0x00030240

000d48dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <network_on+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	695b      	ldr	r3, [r3, #20]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030240 	.word	0x00030240

000d48ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <network_off+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	699b      	ldr	r3, [r3, #24]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030240 	.word	0x00030240

000d48fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <network_listen+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	69db      	ldr	r3, [r3, #28]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030240 	.word	0x00030240

000d490c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <network_listening+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6a1b      	ldr	r3, [r3, #32]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030240 	.word	0x00030240

000d491c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <network_set_listen_timeout+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030240 	.word	0x00030240

000d492c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <network_get_listen_timeout+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030240 	.word	0x00030240

000d493c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <spark_deviceID+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	69db      	ldr	r3, [r3, #28]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030244 	.word	0x00030244

000d494c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030244 	.word	0x00030244

000d495c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <malloc+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	681b      	ldr	r3, [r3, #0]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003021c 	.word	0x0003021c

000d496c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <free+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	685b      	ldr	r3, [r3, #4]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	0003021c 	.word	0x0003021c

000d497c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <realloc+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	689b      	ldr	r3, [r3, #8]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	0003021c 	.word	0x0003021c

000d498c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <vsnprintf+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003021c 	.word	0x0003021c

000d499c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <abort+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003021c 	.word	0x0003021c

000d49ac <_ZN4PMIC20getInputVoltageLimitEv>:
byte PMIC::getInputVoltageLimit(void) {

    //TODO
    return 1;

}
   d49ac:	2001      	movs	r0, #1
   d49ae:	4770      	bx	lr

000d49b0 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d49b0:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49b2:	f001 f815 	bl	d59e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d49b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d49ba:	f000 be12 	b.w	d55e2 <_ZN7TwoWire4lockEv>

000d49be <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d49be:	b510      	push	{r4, lr}
   d49c0:	4604      	mov	r4, r0
    lock_(_lock)
   d49c2:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d49c4:	b109      	cbz	r1, d49ca <_ZN4PMICC1Eb+0xc>
        lock();
   d49c6:	f7ff fff3 	bl	d49b0 <_ZN4PMIC4lockEv>
    }
}
   d49ca:	4620      	mov	r0, r4
   d49cc:	bd10      	pop	{r4, pc}

000d49ce <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d49ce:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d49d0:	f001 f806 	bl	d59e0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d49d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d49d8:	f000 be0c 	b.w	d55f4 <_ZN7TwoWire6unlockEv>

000d49dc <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d49dc:	b510      	push	{r4, lr}
{
    if (lock_) {
   d49de:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d49e0:	4604      	mov	r4, r0
{
    if (lock_) {
   d49e2:	b10b      	cbz	r3, d49e8 <_ZN4PMICD1Ev+0xc>
        unlock();
   d49e4:	f7ff fff3 	bl	d49ce <_ZN4PMIC6unlockEv>
    }
}
   d49e8:	4620      	mov	r0, r4
   d49ea:	bd10      	pop	{r4, pc}

000d49ec <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d49ec:	b510      	push	{r4, lr}
   d49ee:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d49f0:	6800      	ldr	r0, [r0, #0]
   d49f2:	f7ff ffec 	bl	d49ce <_ZN4PMIC6unlockEv>
   d49f6:	4620      	mov	r0, r4
   d49f8:	bd10      	pop	{r4, pc}

000d49fa <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d49fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d49fc:	ac02      	add	r4, sp, #8
   d49fe:	460d      	mov	r5, r1
   d4a00:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d4a04:	f7ff ffd4 	bl	d49b0 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4a08:	f000 ffea 	bl	d59e0 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d4a0c:	216b      	movs	r1, #107	; 0x6b
   d4a0e:	f000 fdda 	bl	d55c6 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4a12:	f000 ffe5 	bl	d59e0 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d4a16:	6803      	ldr	r3, [r0, #0]
   d4a18:	4629      	mov	r1, r5
   d4a1a:	689b      	ldr	r3, [r3, #8]
   d4a1c:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4a1e:	f000 ffdf 	bl	d59e0 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d4a22:	2101      	movs	r1, #1
   d4a24:	f000 fdd2 	bl	d55cc <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4a28:	f000 ffda 	bl	d59e0 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d4a2c:	2301      	movs	r3, #1
   d4a2e:	461a      	mov	r2, r3
   d4a30:	216b      	movs	r1, #107	; 0x6b
   d4a32:	f000 fdbf 	bl	d55b4 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d4a36:	f000 ffd3 	bl	d59e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d4a3a:	6803      	ldr	r3, [r0, #0]
   d4a3c:	695b      	ldr	r3, [r3, #20]
   d4a3e:	4798      	blx	r3
   d4a40:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d4a42:	4620      	mov	r0, r4
   d4a44:	f7ff ffd2 	bl	d49ec <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d4a48:	b2e8      	uxtb	r0, r5
   d4a4a:	b003      	add	sp, #12
   d4a4c:	bd30      	pop	{r4, r5, pc}

000d4a4e <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
   d4a4e:	2100      	movs	r1, #0
   d4a50:	f7ff bfd3 	b.w	d49fa <_ZN4PMIC12readRegisterEh>

000d4a54 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
   d4a54:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
   d4a56:	f7ff fffa 	bl	d4a4e <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x03;
    return mapping[raw];
}
   d4a5a:	4b03      	ldr	r3, [pc, #12]	; (d4a68 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x03;
    return mapping[raw];
   d4a5c:	f000 0003 	and.w	r0, r0, #3
}
   d4a60:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d4a64:	bd08      	pop	{r3, pc}
   d4a66:	bf00      	nop
   d4a68:	000d684a 	.word	0x000d684a

000d4a6c <_ZN4PMIC23getMinimumSystemVoltageEv>:
 * Function Name  : getMinimumSystemVoltage
 * Description    : Returns the set minimum system voltage
 * Input          : NONE
 * Return         : The set system voltage in millivolts or 0 if ERROR
*******************************************************************************/
uint16_t PMIC::getMinimumSystemVoltage() {
   d4a6c:	b508      	push	{r3, lr}

    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d4a6e:	2101      	movs	r1, #1
   d4a70:	f7ff ffc3 	bl	d49fa <_ZN4PMIC12readRegisterEh>

        default:
        return 0; // return error since the value didn't match
    }

}
   d4a74:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <_ZN4PMIC23getMinimumSystemVoltageEv+0x14>)
   d4a76:	f000 000e 	and.w	r0, r0, #14
   d4a7a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	000d685a 	.word	0x000d685a

000d4a84 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d4a84:	2102      	movs	r1, #2
   d4a86:	f7ff bfb8 	b.w	d49fa <_ZN4PMIC12readRegisterEh>

000d4a8a <_ZN4PMIC16getChargeVoltageEv>:
 * Return         :
 *******************************************************************************/

byte PMIC::getChargeVoltage(void) {

    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d4a8a:	2104      	movs	r1, #4
   d4a8c:	f7ff bfb5 	b.w	d49fa <_ZN4PMIC12readRegisterEh>

000d4a90 <_ZN4PMIC21getChargeVoltageValueEv>:
}

uint16_t PMIC::getChargeVoltageValue() {
   d4a90:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d4a92:	f7ff fffa 	bl	d4a8a <_ZN4PMIC16getChargeVoltageEv>
   d4a96:	2302      	movs	r3, #2
    unsigned baseVoltage = 16;
    unsigned v = 3504;
   d4a98:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
}

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
   d4a9c:	2110      	movs	r1, #16
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d4a9e:	fa40 f403 	asr.w	r4, r0, r3
   d4aa2:	3301      	adds	r3, #1
   d4aa4:	f004 0401 	and.w	r4, r4, #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d4aa8:	2b08      	cmp	r3, #8
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d4aaa:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d4aae:	ea4f 0141 	mov.w	r1, r1, lsl #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d4ab2:	d1f4      	bne.n	d4a9e <_ZN4PMIC21getChargeVoltageValueEv+0xe>
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
        baseVoltage *= 2;
    }
    return v;
}
   d4ab4:	b290      	uxth	r0, r2
   d4ab6:	bd10      	pop	{r4, pc}

000d4ab8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ab8:	2200      	movs	r2, #0
   d4aba:	4611      	mov	r1, r2
   d4abc:	6840      	ldr	r0, [r0, #4]
   d4abe:	f7ff bf25 	b.w	d490c <network_listening>

000d4ac2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ac2:	2200      	movs	r2, #0
   d4ac4:	4611      	mov	r1, r2
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	f7ff bf30 	b.w	d492c <network_get_listen_timeout>

000d4acc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4acc:	2200      	movs	r2, #0
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	f7ff bf24 	b.w	d491c <network_set_listen_timeout>

000d4ad4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	f081 0101 	eor.w	r1, r1, #1
   d4ada:	6840      	ldr	r0, [r0, #4]
   d4adc:	f7ff bf0e 	b.w	d48fc <network_listen>

000d4ae0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ae0:	2300      	movs	r3, #0
   d4ae2:	461a      	mov	r2, r3
   d4ae4:	4619      	mov	r1, r3
   d4ae6:	6840      	ldr	r0, [r0, #4]
   d4ae8:	f7ff bf00 	b.w	d48ec <network_off>

000d4aec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4aec:	2300      	movs	r3, #0
   d4aee:	461a      	mov	r2, r3
   d4af0:	4619      	mov	r1, r3
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	f7ff bef2 	b.w	d48dc <network_on>

000d4af8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4af8:	2200      	movs	r2, #0
   d4afa:	4611      	mov	r1, r2
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	f7ff bee5 	b.w	d48cc <network_ready>

000d4b02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b02:	2200      	movs	r2, #0
   d4b04:	4611      	mov	r1, r2
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	f7ff bed0 	b.w	d48ac <network_connecting>

000d4b0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	2102      	movs	r1, #2
   d4b10:	6840      	ldr	r0, [r0, #4]
   d4b12:	f7ff bed3 	b.w	d48bc <network_disconnect>

000d4b16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b16:	2300      	movs	r3, #0
   d4b18:	461a      	mov	r2, r3
   d4b1a:	6840      	ldr	r0, [r0, #4]
   d4b1c:	f7ff bebe 	b.w	d489c <network_connect>

000d4b20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b20:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b22:	2203      	movs	r2, #3
   d4b24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b26:	4a02      	ldr	r2, [pc, #8]	; (d4b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b28:	601a      	str	r2, [r3, #0]
   d4b2a:	4770      	bx	lr
   d4b2c:	2003e368 	.word	0x2003e368
   d4b30:	000d6880 	.word	0x000d6880

000d4b34 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4b34:	4770      	bx	lr

000d4b36 <_ZN8SPIClassD0Ev>:
   d4b36:	b510      	push	{r4, lr}
   d4b38:	4604      	mov	r4, r0
   d4b3a:	f7ff faac 	bl	d4096 <_ZdlPv>
   d4b3e:	4620      	mov	r0, r4
   d4b40:	bd10      	pop	{r4, pc}
	...

000d4b44 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4b44:	b570      	push	{r4, r5, r6, lr}
   d4b46:	4b08      	ldr	r3, [pc, #32]	; (d4b68 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4b48:	6003      	str	r3, [r0, #0]
   d4b4a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4b4c:	2500      	movs	r5, #0
   d4b4e:	460e      	mov	r6, r1
   d4b50:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4b54:	f7ff fd7e 	bl	d4654 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4b58:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4b5a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4b5c:	f7ff fd2a 	bl	d45b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4b60:	60a5      	str	r5, [r4, #8]
}
   d4b62:	4620      	mov	r0, r4
   d4b64:	bd70      	pop	{r4, r5, r6, pc}
   d4b66:	bf00      	nop
   d4b68:	000d68b4 	.word	0x000d68b4

000d4b6c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4b6c:	7900      	ldrb	r0, [r0, #4]
   d4b6e:	f7ff bd29 	b.w	d45c4 <HAL_SPI_Is_Enabled>

000d4b72 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d4b72:	4601      	mov	r1, r0
   d4b74:	2200      	movs	r2, #0
   d4b76:	208c      	movs	r0, #140	; 0x8c
   d4b78:	f7ff bd44 	b.w	d4604 <HAL_Core_System_Reset_Ex>

000d4b7c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d4b7c:	2000      	movs	r0, #0
   d4b7e:	f7ff bff8 	b.w	d4b72 <_ZN11SystemClass5resetEm>
	...

000d4b84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4b84:	4b04      	ldr	r3, [pc, #16]	; (d4b98 <_GLOBAL__sub_I_System+0x14>)
   d4b86:	2000      	movs	r0, #0
   d4b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b8c:	7018      	strb	r0, [r3, #0]
   d4b8e:	8058      	strh	r0, [r3, #2]
   d4b90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b92:	f7ff be57 	b.w	d4844 <set_system_mode>
   d4b96:	bf00      	nop
   d4b98:	2003e370 	.word	0x2003e370

000d4b9c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b9c:	b510      	push	{r4, lr}
   d4b9e:	4604      	mov	r4, r0
{
	free(buffer);
   d4ba0:	6800      	ldr	r0, [r0, #0]
   d4ba2:	f7ff fee3 	bl	d496c <free>
}
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	bd10      	pop	{r4, pc}

000d4baa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4baa:	b510      	push	{r4, lr}
   d4bac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bae:	6800      	ldr	r0, [r0, #0]
   d4bb0:	b108      	cbz	r0, d4bb6 <_ZN6String10invalidateEv+0xc>
   d4bb2:	f7ff fedb 	bl	d496c <free>
	buffer = NULL;
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bba:	60a3      	str	r3, [r4, #8]
   d4bbc:	6063      	str	r3, [r4, #4]
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bc0:	b538      	push	{r3, r4, r5, lr}
   d4bc2:	4604      	mov	r4, r0
   d4bc4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4bc6:	6800      	ldr	r0, [r0, #0]
   d4bc8:	3101      	adds	r1, #1
   d4bca:	f7ff fed7 	bl	d497c <realloc>
	if (newbuffer) {
   d4bce:	b110      	cbz	r0, d4bd6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4bd0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4bd4:	2001      	movs	r0, #1
	}
	return 0;
}
   d4bd6:	bd38      	pop	{r3, r4, r5, pc}

000d4bd8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bd8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4bda:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bdc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4bde:	b113      	cbz	r3, d4be6 <_ZN6String7reserveEj+0xe>
   d4be0:	6843      	ldr	r3, [r0, #4]
   d4be2:	428b      	cmp	r3, r1
   d4be4:	d207      	bcs.n	d4bf6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4be6:	4620      	mov	r0, r4
   d4be8:	f7ff ffea 	bl	d4bc0 <_ZN6String12changeBufferEj>
   d4bec:	b120      	cbz	r0, d4bf8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4bee:	68a3      	ldr	r3, [r4, #8]
   d4bf0:	b90b      	cbnz	r3, d4bf6 <_ZN6String7reserveEj+0x1e>
   d4bf2:	6822      	ldr	r2, [r4, #0]
   d4bf4:	7013      	strb	r3, [r2, #0]
   d4bf6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4bf8:	bd10      	pop	{r4, pc}

000d4bfa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bfa:	b570      	push	{r4, r5, r6, lr}
   d4bfc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4bfe:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c00:	4604      	mov	r4, r0
   d4c02:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4c04:	f7ff ffe8 	bl	d4bd8 <_ZN6String7reserveEj>
   d4c08:	b918      	cbnz	r0, d4c12 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f7ff ffcd 	bl	d4baa <_ZN6String10invalidateEv>
		return *this;
   d4c10:	e009      	b.n	d4c26 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c12:	462a      	mov	r2, r5
   d4c14:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c16:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c18:	6820      	ldr	r0, [r4, #0]
   d4c1a:	f001 fd5f 	bl	d66dc <memcpy>
	buffer[len] = 0;
   d4c1e:	6822      	ldr	r2, [r4, #0]
   d4c20:	68a3      	ldr	r3, [r4, #8]
   d4c22:	2100      	movs	r1, #0
   d4c24:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c26:	4620      	mov	r0, r4
   d4c28:	bd70      	pop	{r4, r5, r6, pc}

000d4c2a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c2a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c2c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c2e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c30:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c32:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c34:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c36:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c38:	460d      	mov	r5, r1
   d4c3a:	b139      	cbz	r1, d4c4c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c3c:	4608      	mov	r0, r1
   d4c3e:	f001 fd89 	bl	d6754 <strlen>
   d4c42:	4629      	mov	r1, r5
   d4c44:	4602      	mov	r2, r0
   d4c46:	4620      	mov	r0, r4
   d4c48:	f7ff ffd7 	bl	d4bfa <_ZN6String4copyEPKcj>
}
   d4c4c:	4620      	mov	r0, r4
   d4c4e:	bd38      	pop	{r3, r4, r5, pc}

000d4c50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c52:	4606      	mov	r6, r0
   d4c54:	460d      	mov	r5, r1
   d4c56:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c58:	2400      	movs	r4, #0
  while (size--) {
   d4c5a:	42bd      	cmp	r5, r7
   d4c5c:	d00c      	beq.n	d4c78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c5e:	6833      	ldr	r3, [r6, #0]
   d4c60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c64:	689b      	ldr	r3, [r3, #8]
   d4c66:	4630      	mov	r0, r6
   d4c68:	4798      	blx	r3
     if (chunk>=0)
   d4c6a:	2800      	cmp	r0, #0
   d4c6c:	db01      	blt.n	d4c72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c70:	e7f3      	b.n	d4c5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c72:	2c00      	cmp	r4, #0
   d4c74:	bf08      	it	eq
   d4c76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c78:	4620      	mov	r0, r4
   d4c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c7c:	b570      	push	{r4, r5, r6, lr}
   d4c7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c84:	b149      	cbz	r1, d4c9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c86:	f001 fd65 	bl	d6754 <strlen>
   d4c8a:	682b      	ldr	r3, [r5, #0]
   d4c8c:	4602      	mov	r2, r0
   d4c8e:	4621      	mov	r1, r4
   d4c90:	4628      	mov	r0, r5
   d4c92:	68db      	ldr	r3, [r3, #12]
    }
   d4c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c98:	4718      	bx	r3
    }
   d4c9a:	bd70      	pop	{r4, r5, r6, pc}

000d4c9c <_ZN5Print5printEPKc>:
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	f7ff ffed 	bl	d4c7c <_ZN5Print5writeEPKc>
   d4ca2:	bd08      	pop	{r3, pc}

000d4ca4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ca4:	6803      	ldr	r3, [r0, #0]
   d4ca6:	689b      	ldr	r3, [r3, #8]
   d4ca8:	4718      	bx	r3

000d4caa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4caa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4cac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4cb0:	f7ff fff8 	bl	d4ca4 <_ZN5Print5printEc>
  n += print('\n');
   d4cb4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4cb6:	4604      	mov	r4, r0
  n += print('\n');
   d4cb8:	4628      	mov	r0, r5
   d4cba:	f7ff fff3 	bl	d4ca4 <_ZN5Print5printEc>
  return n;
}
   d4cbe:	4420      	add	r0, r4
   d4cc0:	bd38      	pop	{r3, r4, r5, pc}

000d4cc2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4cc2:	b538      	push	{r3, r4, r5, lr}
   d4cc4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4cc6:	f7ff ffd9 	bl	d4c7c <_ZN5Print5writeEPKc>
   d4cca:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ccc:	4628      	mov	r0, r5
   d4cce:	f7ff ffec 	bl	d4caa <_ZN5Print7printlnEv>
  return n;
}
   d4cd2:	4420      	add	r0, r4
   d4cd4:	bd38      	pop	{r3, r4, r5, pc}

000d4cd6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4cd6:	b530      	push	{r4, r5, lr}
   d4cd8:	b08b      	sub	sp, #44	; 0x2c
   d4cda:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4cdc:	2100      	movs	r1, #0
   d4cde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ce2:	2a01      	cmp	r2, #1
   d4ce4:	bf98      	it	ls
   d4ce6:	220a      	movls	r2, #10
   d4ce8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4cec:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4cf0:	fb05 3312 	mls	r3, r5, r2, r3
   d4cf4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cf8:	2b09      	cmp	r3, #9
   d4cfa:	bf94      	ite	ls
   d4cfc:	3330      	addls	r3, #48	; 0x30
   d4cfe:	3337      	addhi	r3, #55	; 0x37
   d4d00:	b2db      	uxtb	r3, r3
   d4d02:	4621      	mov	r1, r4
   d4d04:	f804 3901 	strb.w	r3, [r4], #-1
   d4d08:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d0a:	2d00      	cmp	r5, #0
   d4d0c:	d1ee      	bne.n	d4cec <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d0e:	f7ff ffb5 	bl	d4c7c <_ZN5Print5writeEPKc>
}
   d4d12:	b00b      	add	sp, #44	; 0x2c
   d4d14:	bd30      	pop	{r4, r5, pc}

000d4d16 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4d16:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4d18:	b92a      	cbnz	r2, d4d26 <_ZN5Print5printEmi+0x10>
   d4d1a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4d20:	689b      	ldr	r3, [r3, #8]
   d4d22:	b2c9      	uxtb	r1, r1
   d4d24:	4718      	bx	r3
  else return printNumber(n, base);
   d4d26:	b2d2      	uxtb	r2, r2
}
   d4d28:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4d2c:	f7ff bfd3 	b.w	d4cd6 <_ZN5Print11printNumberEmh>

000d4d30 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4d30:	f7ff bff1 	b.w	d4d16 <_ZN5Print5printEmi>

000d4d34 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d38:	4607      	mov	r7, r0
   d4d3a:	460e      	mov	r6, r1
  if (base == 0) {
   d4d3c:	4615      	mov	r5, r2
   d4d3e:	b92a      	cbnz	r2, d4d4c <_ZN5Print5printEli+0x18>
    return write(n);
   d4d40:	6803      	ldr	r3, [r0, #0]
   d4d42:	b2c9      	uxtb	r1, r1
   d4d44:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4d4a:	4718      	bx	r3
  } else if (base == 10) {
   d4d4c:	2a0a      	cmp	r2, #10
   d4d4e:	d102      	bne.n	d4d56 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4d50:	2900      	cmp	r1, #0
   d4d52:	da01      	bge.n	d4d58 <_ZN5Print5printEli+0x24>
   d4d54:	e004      	b.n	d4d60 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d56:	b2d2      	uxtb	r2, r2
  }
}
   d4d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d5c:	f7ff bfbb 	b.w	d4cd6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d60:	212d      	movs	r1, #45	; 0x2d
   d4d62:	f7ff ff9f 	bl	d4ca4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4d66:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d68:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4d6a:	4271      	negs	r1, r6
   d4d6c:	4638      	mov	r0, r7
   d4d6e:	f7ff ffb2 	bl	d4cd6 <_ZN5Print11printNumberEmh>
   d4d72:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d78 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d7c:	ec57 6b10 	vmov	r6, r7, d0
   d4d80:	4682      	mov	sl, r0
   d4d82:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4d84:	ee10 2a10 	vmov	r2, s0
   d4d88:	463b      	mov	r3, r7
   d4d8a:	ee10 0a10 	vmov	r0, s0
   d4d8e:	4639      	mov	r1, r7
   d4d90:	f001 fbe8 	bl	d6564 <__aeabi_dcmpun>
   d4d94:	b108      	cbz	r0, d4d9a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d96:	4948      	ldr	r1, [pc, #288]	; (d4eb8 <_ZN5Print10printFloatEdh+0x140>)
   d4d98:	e012      	b.n	d4dc0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4d9a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4d9e:	f04f 32ff 	mov.w	r2, #4294967295
   d4da2:	4b46      	ldr	r3, [pc, #280]	; (d4ebc <_ZN5Print10printFloatEdh+0x144>)
   d4da4:	4630      	mov	r0, r6
   d4da6:	4649      	mov	r1, r9
   d4da8:	f001 fbdc 	bl	d6564 <__aeabi_dcmpun>
   d4dac:	b968      	cbnz	r0, d4dca <_ZN5Print10printFloatEdh+0x52>
   d4dae:	f04f 32ff 	mov.w	r2, #4294967295
   d4db2:	4b42      	ldr	r3, [pc, #264]	; (d4ebc <_ZN5Print10printFloatEdh+0x144>)
   d4db4:	4630      	mov	r0, r6
   d4db6:	4649      	mov	r1, r9
   d4db8:	f001 fbb6 	bl	d6528 <__aeabi_dcmple>
   d4dbc:	b928      	cbnz	r0, d4dca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dbe:	4940      	ldr	r1, [pc, #256]	; (d4ec0 <_ZN5Print10printFloatEdh+0x148>)
   d4dc0:	4650      	mov	r0, sl
   d4dc2:	f7ff ff5b 	bl	d4c7c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4dca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4dce:	4b3d      	ldr	r3, [pc, #244]	; (d4ec4 <_ZN5Print10printFloatEdh+0x14c>)
   d4dd0:	4630      	mov	r0, r6
   d4dd2:	4639      	mov	r1, r7
   d4dd4:	f001 fbbc 	bl	d6550 <__aeabi_dcmpgt>
   d4dd8:	b108      	cbz	r0, d4dde <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dda:	493b      	ldr	r1, [pc, #236]	; (d4ec8 <_ZN5Print10printFloatEdh+0x150>)
   d4ddc:	e7f0      	b.n	d4dc0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4de2:	4b3a      	ldr	r3, [pc, #232]	; (d4ecc <_ZN5Print10printFloatEdh+0x154>)
   d4de4:	4630      	mov	r0, r6
   d4de6:	4639      	mov	r1, r7
   d4de8:	f001 fb94 	bl	d6514 <__aeabi_dcmplt>
   d4dec:	2800      	cmp	r0, #0
   d4dee:	d1f4      	bne.n	d4dda <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4df0:	2200      	movs	r2, #0
   d4df2:	2300      	movs	r3, #0
   d4df4:	4630      	mov	r0, r6
   d4df6:	4639      	mov	r1, r7
   d4df8:	f001 fb8c 	bl	d6514 <__aeabi_dcmplt>
   d4dfc:	b140      	cbz	r0, d4e10 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4dfe:	212d      	movs	r1, #45	; 0x2d
   d4e00:	4650      	mov	r0, sl
   d4e02:	f7ff ff4f 	bl	d4ca4 <_ZN5Print5printEc>
     number = -number;
   d4e06:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4e0a:	4604      	mov	r4, r0
     number = -number;
   d4e0c:	461f      	mov	r7, r3
   d4e0e:	e000      	b.n	d4e12 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e10:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e12:	492f      	ldr	r1, [pc, #188]	; (d4ed0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e14:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e18:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4e1a:	fa5f f388 	uxtb.w	r3, r8
   d4e1e:	429d      	cmp	r5, r3
   d4e20:	d906      	bls.n	d4e30 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4e22:	2200      	movs	r2, #0
   d4e24:	4b2b      	ldr	r3, [pc, #172]	; (d4ed4 <_ZN5Print10printFloatEdh+0x15c>)
   d4e26:	f001 fa2d 	bl	d6284 <__aeabi_ddiv>
   d4e2a:	f108 0801 	add.w	r8, r8, #1
   d4e2e:	e7f4      	b.n	d4e1a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4e30:	4632      	mov	r2, r6
   d4e32:	463b      	mov	r3, r7
   d4e34:	f000 ff4a 	bl	d5ccc <__adddf3>
   d4e38:	460f      	mov	r7, r1
   d4e3a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e3c:	f001 fbd0 	bl	d65e0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e40:	220a      	movs	r2, #10
   d4e42:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e44:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e46:	4650      	mov	r0, sl
   d4e48:	f7ff ff45 	bl	d4cd6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e4c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4e4e:	b37d      	cbz	r5, d4eb0 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4e50:	4640      	mov	r0, r8
   d4e52:	f001 f877 	bl	d5f44 <__aeabi_ui2d>
   d4e56:	4602      	mov	r2, r0
   d4e58:	460b      	mov	r3, r1
   d4e5a:	4630      	mov	r0, r6
   d4e5c:	4639      	mov	r1, r7
   d4e5e:	f000 ff33 	bl	d5cc8 <__aeabi_dsub>
   d4e62:	4606      	mov	r6, r0
   d4e64:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e66:	4650      	mov	r0, sl
   d4e68:	491b      	ldr	r1, [pc, #108]	; (d4ed8 <_ZN5Print10printFloatEdh+0x160>)
   d4e6a:	f7ff ff07 	bl	d4c7c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4e6e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4e70:	4b18      	ldr	r3, [pc, #96]	; (d4ed4 <_ZN5Print10printFloatEdh+0x15c>)
   d4e72:	2200      	movs	r2, #0
   d4e74:	4630      	mov	r0, r6
   d4e76:	4639      	mov	r1, r7
   d4e78:	f001 f8da 	bl	d6030 <__aeabi_dmul>
   d4e7c:	460f      	mov	r7, r1
   d4e7e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4e80:	f001 fb86 	bl	d6590 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4e84:	220a      	movs	r2, #10
   d4e86:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4e88:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4e8a:	4650      	mov	r0, sl
   d4e8c:	f7ff ff52 	bl	d4d34 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4e90:	4404      	add	r4, r0
    remainder -= toPrint;
   d4e92:	4640      	mov	r0, r8
   d4e94:	f001 f866 	bl	d5f64 <__aeabi_i2d>
   d4e98:	4602      	mov	r2, r0
   d4e9a:	460b      	mov	r3, r1
   d4e9c:	4630      	mov	r0, r6
   d4e9e:	4639      	mov	r1, r7
   d4ea0:	f000 ff12 	bl	d5cc8 <__aeabi_dsub>
   d4ea4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ea6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4eaa:	4606      	mov	r6, r0
   d4eac:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4eae:	d1df      	bne.n	d4e70 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4eb6:	bf00      	nop
   d4eb8:	000d68bc 	.word	0x000d68bc
   d4ebc:	7fefffff 	.word	0x7fefffff
   d4ec0:	000d68c6 	.word	0x000d68c6
   d4ec4:	41efffff 	.word	0x41efffff
   d4ec8:	000d68c0 	.word	0x000d68c0
   d4ecc:	c1efffff 	.word	0xc1efffff
   d4ed0:	3fe00000 	.word	0x3fe00000
   d4ed4:	40240000 	.word	0x40240000
   d4ed8:	000d68c4 	.word	0x000d68c4

000d4edc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4edc:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ede:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4ee0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ee2:	f7ff ff49 	bl	d4d78 <_ZN5Print10printFloatEdh>
   d4ee6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4ee8:	4628      	mov	r0, r5
   d4eea:	f7ff fede 	bl	d4caa <_ZN5Print7printlnEv>
  return n;
}
   d4eee:	4420      	add	r0, r4
   d4ef0:	bd38      	pop	{r3, r4, r5, pc}

000d4ef2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4ef2:	b40c      	push	{r2, r3}
   d4ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ef8:	b087      	sub	sp, #28
   d4efa:	af00      	add	r7, sp, #0
   d4efc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4f00:	4605      	mov	r5, r0
   d4f02:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4f06:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4f08:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4f0a:	4623      	mov	r3, r4
   d4f0c:	464a      	mov	r2, r9
   d4f0e:	2114      	movs	r1, #20
   d4f10:	1d38      	adds	r0, r7, #4
   d4f12:	f7ff fd3b 	bl	d498c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4f16:	2813      	cmp	r0, #19
   d4f18:	d805      	bhi.n	d4f26 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f1a:	1d39      	adds	r1, r7, #4
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	f7ff fead 	bl	d4c7c <_ZN5Print5writeEPKc>
   d4f22:	4604      	mov	r4, r0
   d4f24:	e013      	b.n	d4f4e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4f26:	f100 0308 	add.w	r3, r0, #8
   d4f2a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4f2e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4f30:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4f34:	1c41      	adds	r1, r0, #1
   d4f36:	4623      	mov	r3, r4
   d4f38:	464a      	mov	r2, r9
   d4f3a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4f3c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4f3e:	f7ff fd25 	bl	d498c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f42:	4669      	mov	r1, sp
   d4f44:	4628      	mov	r0, r5
   d4f46:	f7ff fe99 	bl	d4c7c <_ZN5Print5writeEPKc>
   d4f4a:	4604      	mov	r4, r0
   d4f4c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4f4e:	b11e      	cbz	r6, d4f58 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff feaa 	bl	d4caa <_ZN5Print7printlnEv>
   d4f56:	4404      	add	r4, r0
    return n;
}
   d4f58:	4620      	mov	r0, r4
   d4f5a:	371c      	adds	r7, #28
   d4f5c:	46bd      	mov	sp, r7
   d4f5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f62:	b002      	add	sp, #8
   d4f64:	4770      	bx	lr
	...

000d4f68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f68:	4b01      	ldr	r3, [pc, #4]	; (d4f70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f6a:	4a02      	ldr	r2, [pc, #8]	; (d4f74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f6c:	601a      	str	r2, [r3, #0]
   d4f6e:	4770      	bx	lr
   d4f70:	2003e378 	.word	0x2003e378
   d4f74:	000d697d 	.word	0x000d697d

000d4f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f78:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f7a:	681a      	ldr	r2, [r3, #0]
   d4f7c:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f7e:	601a      	str	r2, [r3, #0]
   d4f80:	4770      	bx	lr
   d4f82:	bf00      	nop
   d4f84:	2003e2a0 	.word	0x2003e2a0
   d4f88:	2003e37c 	.word	0x2003e37c

000d4f8c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f8c:	2100      	movs	r1, #0
   d4f8e:	f7ff bc61 	b.w	d4854 <system_delay_ms>

000d4f92 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f92:	b510      	push	{r4, lr}
   d4f94:	4604      	mov	r4, r0
   d4f96:	f7ff f8ba 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	bd10      	pop	{r4, pc}

000d4f9e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f9e:	b513      	push	{r0, r1, r4, lr}
   d4fa0:	460b      	mov	r3, r1
   d4fa2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fa4:	c803      	ldmia	r0, {r0, r1}
   d4fa6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4faa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4fae:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4fb2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4fb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4fba:	b002      	add	sp, #8
   d4fbc:	bd10      	pop	{r4, pc}
	...

000d4fc0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fc0:	4803      	ldr	r0, [pc, #12]	; (d4fd0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fc2:	4a04      	ldr	r2, [pc, #16]	; (d4fd4 <_GLOBAL__sub_I_RGB+0x14>)
   d4fc4:	4904      	ldr	r1, [pc, #16]	; (d4fd8 <_GLOBAL__sub_I_RGB+0x18>)
   d4fc6:	2300      	movs	r3, #0
   d4fc8:	6083      	str	r3, [r0, #8]
   d4fca:	f000 bd29 	b.w	d5a20 <__aeabi_atexit>
   d4fce:	bf00      	nop
   d4fd0:	2003e380 	.word	0x2003e380
   d4fd4:	2003e308 	.word	0x2003e308
   d4fd8:	000d4f93 	.word	0x000d4f93

000d4fdc <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d4fdc:	0909      	lsrs	r1, r1, #4
   d4fde:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d4fe2:	ee07 0a90 	vmov	s15, r0
   d4fe6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d4fea:	eddf 7a02 	vldr	s15, [pc, #8]	; d4ff4 <_ZN6detail9_getVCellEhh+0x18>
   d4fee:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4ff2:	4770      	bx	lr
   d4ff4:	44480000 	.word	0x44480000

000d4ff8 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d4ff8:	6800      	ldr	r0, [r0, #0]
   d4ffa:	f000 baf2 	b.w	d55e2 <_ZN7TwoWire4lockEv>

000d4ffe <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d4ffe:	b510      	push	{r4, lr}
   d5000:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d5002:	6001      	str	r1, [r0, #0]
   d5004:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d5006:	b10a      	cbz	r2, d500c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d5008:	f7ff fff6 	bl	d4ff8 <_ZN9FuelGauge4lockEv>
    }
}
   d500c:	4620      	mov	r0, r4
   d500e:	bd10      	pop	{r4, pc}

000d5010 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d5010:	b538      	push	{r3, r4, r5, lr}
   d5012:	4604      	mov	r4, r0
   d5014:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5016:	f000 fce3 	bl	d59e0 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d501a:	462a      	mov	r2, r5
   d501c:	4601      	mov	r1, r0
   d501e:	4620      	mov	r0, r4
   d5020:	f7ff ffed 	bl	d4ffe <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d5024:	4620      	mov	r0, r4
   d5026:	bd38      	pop	{r3, r4, r5, pc}

000d5028 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d5028:	6800      	ldr	r0, [r0, #0]
   d502a:	f000 bae3 	b.w	d55f4 <_ZN7TwoWire6unlockEv>

000d502e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d502e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d5030:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5032:	4604      	mov	r4, r0
{
    if (lock_) {
   d5034:	b10b      	cbz	r3, d503a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d5036:	f7ff fff7 	bl	d5028 <_ZN9FuelGauge6unlockEv>
    }
}
   d503a:	4620      	mov	r0, r4
   d503c:	bd10      	pop	{r4, pc}

000d503e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d503e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5040:	4604      	mov	r4, r0
   d5042:	4616      	mov	r6, r2
   d5044:	461d      	mov	r5, r3
   d5046:	460f      	mov	r7, r1
   d5048:	f7ff ffd6 	bl	d4ff8 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d504c:	6820      	ldr	r0, [r4, #0]
   d504e:	2136      	movs	r1, #54	; 0x36
   d5050:	f000 fab9 	bl	d55c6 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d5054:	6820      	ldr	r0, [r4, #0]
   d5056:	6803      	ldr	r3, [r0, #0]
   d5058:	4639      	mov	r1, r7
   d505a:	689b      	ldr	r3, [r3, #8]
   d505c:	4798      	blx	r3
    i2c_.endTransmission(true);
   d505e:	2101      	movs	r1, #1
   d5060:	6820      	ldr	r0, [r4, #0]
   d5062:	f000 fab3 	bl	d55cc <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d5066:	2202      	movs	r2, #2
   d5068:	2136      	movs	r1, #54	; 0x36
   d506a:	2301      	movs	r3, #1
   d506c:	6820      	ldr	r0, [r4, #0]
   d506e:	f000 faa1 	bl	d55b4 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d5072:	6820      	ldr	r0, [r4, #0]
   d5074:	6803      	ldr	r3, [r0, #0]
   d5076:	695b      	ldr	r3, [r3, #20]
   d5078:	4798      	blx	r3
   d507a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d507c:	6820      	ldr	r0, [r4, #0]
   d507e:	6803      	ldr	r3, [r0, #0]
   d5080:	695b      	ldr	r3, [r3, #20]
   d5082:	4798      	blx	r3
   d5084:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5086:	4620      	mov	r0, r4
}
   d5088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d508c:	f7ff bfcc 	b.w	d5028 <_ZN9FuelGauge6unlockEv>

000d5090 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d5090:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d5092:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d5094:	2200      	movs	r2, #0
   d5096:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d509a:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d509e:	2102      	movs	r1, #2
   d50a0:	f10d 0206 	add.w	r2, sp, #6
   d50a4:	f7ff ffcb 	bl	d503e <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d50a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d50ac:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d50b0:	b003      	add	sp, #12
   d50b2:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d50b6:	f7ff bf91 	b.w	d4fdc <_ZN6detail9_getVCellEhh>
	...

000d50bc <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d50bc:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d50be:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d50c0:	2200      	movs	r2, #0
	byte LSB = 0;
   d50c2:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d50c6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d50ca:	2104      	movs	r1, #4
   d50cc:	f10d 0206 	add.w	r2, sp, #6
   d50d0:	f7ff ffb5 	bl	d503e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d50d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d50d8:	f000 ff44 	bl	d5f64 <__aeabi_i2d>
   d50dc:	2200      	movs	r2, #0
   d50de:	4b09      	ldr	r3, [pc, #36]	; (d5104 <_ZN9FuelGauge6getSoCEv+0x48>)
   d50e0:	f000 ffa6 	bl	d6030 <__aeabi_dmul>
   d50e4:	f001 fa9c 	bl	d6620 <__aeabi_d2f>
   d50e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d50ec:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d50f0:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d50f4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d50f8:	ee37 0a80 	vadd.f32	s0, s15, s0
   d50fc:	b003      	add	sp, #12
   d50fe:	f85d fb04 	ldr.w	pc, [sp], #4
   d5102:	bf00      	nop
   d5104:	3f700000 	.word	0x3f700000

000d5108 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5108:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d510a:	4b0c      	ldr	r3, [pc, #48]	; (d513c <serialEventRun+0x34>)
   d510c:	b133      	cbz	r3, d511c <serialEventRun+0x14>
   d510e:	f000 f921 	bl	d5354 <_Z16_fetch_usbserialv>
   d5112:	6803      	ldr	r3, [r0, #0]
   d5114:	691b      	ldr	r3, [r3, #16]
   d5116:	4798      	blx	r3
   d5118:	2800      	cmp	r0, #0
   d511a:	dc09      	bgt.n	d5130 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d511c:	4b08      	ldr	r3, [pc, #32]	; (d5140 <serialEventRun+0x38>)
   d511e:	b163      	cbz	r3, d513a <serialEventRun+0x32>
   d5120:	f000 f9d6 	bl	d54d0 <_Z22__fetch_global_Serial1v>
   d5124:	6803      	ldr	r3, [r0, #0]
   d5126:	691b      	ldr	r3, [r3, #16]
   d5128:	4798      	blx	r3
   d512a:	2800      	cmp	r0, #0
   d512c:	dc03      	bgt.n	d5136 <serialEventRun+0x2e>
   d512e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5130:	f3af 8000 	nop.w
   d5134:	e7f2      	b.n	d511c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5136:	f3af 8000 	nop.w
   d513a:	bd08      	pop	{r3, pc}
	...

000d5144 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5144:	b508      	push	{r3, lr}
	serialEventRun();
   d5146:	f7ff ffdf 	bl	d5108 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d514a:	f7ff fa53 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d514e:	4b01      	ldr	r3, [pc, #4]	; (d5154 <_post_loop+0x10>)
   d5150:	6018      	str	r0, [r3, #0]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	2003e71c 	.word	0x2003e71c

000d5158 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5158:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d515a:	2300      	movs	r3, #0
   d515c:	9300      	str	r3, [sp, #0]
   d515e:	461a      	mov	r2, r3
   d5160:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5164:	f7ff fb90 	bl	d4888 <system_ctrl_set_result>
}
   d5168:	b003      	add	sp, #12
   d516a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5170 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5170:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5172:	8843      	ldrh	r3, [r0, #2]
   d5174:	2b0a      	cmp	r3, #10
   d5176:	d008      	beq.n	d518a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5178:	2b50      	cmp	r3, #80	; 0x50
   d517a:	d109      	bne.n	d5190 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d517c:	4b09      	ldr	r3, [pc, #36]	; (d51a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d517e:	681b      	ldr	r3, [r3, #0]
   d5180:	b13b      	cbz	r3, d5192 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5182:	b003      	add	sp, #12
   d5184:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5188:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d518a:	f7ff ffe5 	bl	d5158 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d518e:	e006      	b.n	d519e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5190:	2300      	movs	r3, #0
   d5192:	9300      	str	r3, [sp, #0]
   d5194:	461a      	mov	r2, r3
   d5196:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d519a:	f7ff fb75 	bl	d4888 <system_ctrl_set_result>
        break;
    }
}
   d519e:	b003      	add	sp, #12
   d51a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d51a4:	2003e390 	.word	0x2003e390

000d51a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d51a8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51aa:	f7ff fa13 	bl	d45d4 <HAL_RNG_GetRandomNumber>
   d51ae:	4604      	mov	r4, r0
    srand(seed);
   d51b0:	f001 faa8 	bl	d6704 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d51b4:	4b07      	ldr	r3, [pc, #28]	; (d51d4 <module_user_init_hook+0x2c>)
   d51b6:	b113      	cbz	r3, d51be <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d51b8:	4620      	mov	r0, r4
   d51ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d51be:	2100      	movs	r1, #0
   d51c0:	4804      	ldr	r0, [pc, #16]	; (d51d4 <module_user_init_hook+0x2c>)
   d51c2:	f7ff fbc3 	bl	d494c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51c6:	2100      	movs	r1, #0
   d51c8:	4803      	ldr	r0, [pc, #12]	; (d51d8 <module_user_init_hook+0x30>)
}
   d51ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51ce:	f7ff bb51 	b.w	d4874 <system_ctrl_set_app_request_handler>
   d51d2:	bf00      	nop
   d51d4:	00000000 	.word	0x00000000
   d51d8:	000d5171 	.word	0x000d5171

000d51dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d51dc:	4770      	bx	lr

000d51de <_ZN9IPAddressD0Ev>:
   d51de:	b510      	push	{r4, lr}
   d51e0:	4604      	mov	r4, r0
   d51e2:	f7fe ff58 	bl	d4096 <_ZdlPv>
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}

000d51ea <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d51ea:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d51ec:	7d03      	ldrb	r3, [r0, #20]
   d51ee:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d51f0:	b08d      	sub	sp, #52	; 0x34
   d51f2:	460e      	mov	r6, r1
   d51f4:	f100 0704 	add.w	r7, r0, #4
   d51f8:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d51fc:	d002      	beq.n	d5204 <_ZNK9IPAddress7printToER5Print+0x1a>
   d51fe:	f100 0508 	add.w	r5, r0, #8
   d5202:	e018      	b.n	d5236 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5204:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5206:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5208:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d520c:	232f      	movs	r3, #47	; 0x2f
   d520e:	462a      	mov	r2, r5
   d5210:	200a      	movs	r0, #10
   d5212:	f7ff fa37 	bl	d4684 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5216:	4628      	mov	r0, r5
   d5218:	f001 fa9c 	bl	d6754 <strlen>
   d521c:	6833      	ldr	r3, [r6, #0]
   d521e:	4602      	mov	r2, r0
   d5220:	68db      	ldr	r3, [r3, #12]
   d5222:	4629      	mov	r1, r5
   d5224:	4630      	mov	r0, r6
   d5226:	4798      	blx	r3
   d5228:	e00f      	b.n	d524a <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d522a:	b124      	cbz	r4, d5236 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d522c:	212e      	movs	r1, #46	; 0x2e
   d522e:	4630      	mov	r0, r6
   d5230:	f7ff fd38 	bl	d4ca4 <_ZN5Print5printEc>
   d5234:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5236:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d523a:	220a      	movs	r2, #10
   d523c:	4630      	mov	r0, r6
   d523e:	f7ff fd77 	bl	d4d30 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5242:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5244:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5246:	d1f0      	bne.n	d522a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5248:	4620      	mov	r0, r4
    }
    return n;
}
   d524a:	b00d      	add	sp, #52	; 0x34
   d524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5250 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5250:	b510      	push	{r4, lr}
   d5252:	4b05      	ldr	r3, [pc, #20]	; (d5268 <_ZN9IPAddressC1Ev+0x18>)
   d5254:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5256:	2211      	movs	r2, #17
   d5258:	f840 3b04 	str.w	r3, [r0], #4
   d525c:	2100      	movs	r1, #0
   d525e:	f001 fa48 	bl	d66f2 <memset>
{
    clear();
}
   d5262:	4620      	mov	r0, r4
   d5264:	bd10      	pop	{r4, pc}
   d5266:	bf00      	nop
   d5268:	000d69d8 	.word	0x000d69d8

000d526c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d526c:	4603      	mov	r3, r0
   d526e:	4a07      	ldr	r2, [pc, #28]	; (d528c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5270:	b510      	push	{r4, lr}
   d5272:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5276:	f101 0210 	add.w	r2, r1, #16
   d527a:	f851 4b04 	ldr.w	r4, [r1], #4
   d527e:	f843 4b04 	str.w	r4, [r3], #4
   d5282:	4291      	cmp	r1, r2
   d5284:	d1f9      	bne.n	d527a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5286:	780a      	ldrb	r2, [r1, #0]
   d5288:	701a      	strb	r2, [r3, #0]
}
   d528a:	bd10      	pop	{r4, pc}
   d528c:	000d69d8 	.word	0x000d69d8

000d5290 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5290:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5292:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5296:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d529a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d529e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52a2:	2304      	movs	r3, #4
   d52a4:	6041      	str	r1, [r0, #4]
   d52a6:	7503      	strb	r3, [r0, #20]
   d52a8:	bd10      	pop	{r4, pc}

000d52aa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d52aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52ac:	780d      	ldrb	r5, [r1, #0]
   d52ae:	788b      	ldrb	r3, [r1, #2]
   d52b0:	784a      	ldrb	r2, [r1, #1]
   d52b2:	78c9      	ldrb	r1, [r1, #3]
   d52b4:	9100      	str	r1, [sp, #0]
   d52b6:	4629      	mov	r1, r5
   d52b8:	f7ff ffea 	bl	d5290 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d52bc:	b003      	add	sp, #12
   d52be:	bd30      	pop	{r4, r5, pc}

000d52c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52c0:	7441      	strb	r1, [r0, #17]
   d52c2:	4770      	bx	lr

000d52c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d52c4:	4770      	bx	lr

000d52c6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d52c6:	2100      	movs	r1, #0
   d52c8:	7c00      	ldrb	r0, [r0, #16]
   d52ca:	f7ff baa3 	b.w	d4814 <HAL_USB_USART_Receive_Data>

000d52ce <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d52ce:	2101      	movs	r1, #1
   d52d0:	7c00      	ldrb	r0, [r0, #16]
   d52d2:	f7ff ba9f 	b.w	d4814 <HAL_USB_USART_Receive_Data>

000d52d6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d52d6:	7c00      	ldrb	r0, [r0, #16]
   d52d8:	f7ff ba94 	b.w	d4804 <HAL_USB_USART_Available_Data_For_Write>

000d52dc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d52dc:	7c00      	ldrb	r0, [r0, #16]
   d52de:	f7ff ba89 	b.w	d47f4 <HAL_USB_USART_Available_Data>

000d52e2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d52e2:	b538      	push	{r3, r4, r5, lr}
   d52e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52e6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d52e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52ea:	f7ff fa8b 	bl	d4804 <HAL_USB_USART_Available_Data_For_Write>
   d52ee:	2800      	cmp	r0, #0
   d52f0:	dc01      	bgt.n	d52f6 <_ZN9USBSerial5writeEh+0x14>
   d52f2:	7c60      	ldrb	r0, [r4, #17]
   d52f4:	b120      	cbz	r0, d5300 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d52f6:	4629      	mov	r1, r5
   d52f8:	7c20      	ldrb	r0, [r4, #16]
   d52fa:	f7ff fa93 	bl	d4824 <HAL_USB_USART_Send_Data>
    return 1;
   d52fe:	2001      	movs	r0, #1
  }
  return 0;
}
   d5300:	bd38      	pop	{r3, r4, r5, pc}

000d5302 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5302:	7c00      	ldrb	r0, [r0, #16]
   d5304:	f7ff ba96 	b.w	d4834 <HAL_USB_USART_Flush_Data>

000d5308 <_ZN9USBSerialD0Ev>:
   d5308:	b510      	push	{r4, lr}
   d530a:	4604      	mov	r4, r0
   d530c:	f7fe fec3 	bl	d4096 <_ZdlPv>
   d5310:	4620      	mov	r0, r4
   d5312:	bd10      	pop	{r4, pc}

000d5314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5314:	b510      	push	{r4, lr}
   d5316:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5318:	2300      	movs	r3, #0
   d531a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d531c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5320:	60a3      	str	r3, [r4, #8]
   d5322:	4b05      	ldr	r3, [pc, #20]	; (d5338 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5324:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5326:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5328:	4608      	mov	r0, r1
{
  _serial = serial;
   d532a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d532c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d532e:	4611      	mov	r1, r2
   d5330:	f7ff fa50 	bl	d47d4 <HAL_USB_USART_Init>
}
   d5334:	4620      	mov	r0, r4
   d5336:	bd10      	pop	{r4, pc}
   d5338:	000d69ec 	.word	0x000d69ec

000d533c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d533c:	2200      	movs	r2, #0
   d533e:	7c00      	ldrb	r0, [r0, #16]
   d5340:	f7ff ba50 	b.w	d47e4 <HAL_USB_USART_Begin>

000d5344 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5344:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5346:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5348:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d534a:	2100      	movs	r1, #0
   d534c:	f001 f9d1 	bl	d66f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5350:	4620      	mov	r0, r4
   d5352:	bd10      	pop	{r4, pc}

000d5354 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5354:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5356:	4d0e      	ldr	r5, [pc, #56]	; (d5390 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5358:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d535a:	a801      	add	r0, sp, #4
   d535c:	f7ff fff2 	bl	d5344 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5360:	6829      	ldr	r1, [r5, #0]
   d5362:	f011 0401 	ands.w	r4, r1, #1
   d5366:	d110      	bne.n	d538a <_Z16_fetch_usbserialv+0x36>
   d5368:	4628      	mov	r0, r5
   d536a:	f7fe fe98 	bl	d409e <__cxa_guard_acquire>
   d536e:	b160      	cbz	r0, d538a <_Z16_fetch_usbserialv+0x36>
   d5370:	aa01      	add	r2, sp, #4
   d5372:	4621      	mov	r1, r4
   d5374:	4807      	ldr	r0, [pc, #28]	; (d5394 <_Z16_fetch_usbserialv+0x40>)
   d5376:	f7ff ffcd 	bl	d5314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d537a:	4628      	mov	r0, r5
   d537c:	f7fe fe94 	bl	d40a8 <__cxa_guard_release>
   d5380:	4a05      	ldr	r2, [pc, #20]	; (d5398 <_Z16_fetch_usbserialv+0x44>)
   d5382:	4906      	ldr	r1, [pc, #24]	; (d539c <_Z16_fetch_usbserialv+0x48>)
   d5384:	4803      	ldr	r0, [pc, #12]	; (d5394 <_Z16_fetch_usbserialv+0x40>)
   d5386:	f000 fb4b 	bl	d5a20 <__aeabi_atexit>
	return _usbserial;
}
   d538a:	4802      	ldr	r0, [pc, #8]	; (d5394 <_Z16_fetch_usbserialv+0x40>)
   d538c:	b007      	add	sp, #28
   d538e:	bd30      	pop	{r4, r5, pc}
   d5390:	2003e394 	.word	0x2003e394
   d5394:	2003e398 	.word	0x2003e398
   d5398:	2003e308 	.word	0x2003e308
   d539c:	000d52c5 	.word	0x000d52c5

000d53a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d53a0:	2200      	movs	r2, #0
   d53a2:	4611      	mov	r1, r2
   d53a4:	6840      	ldr	r0, [r0, #4]
   d53a6:	f7ff ba91 	b.w	d48cc <network_ready>

000d53aa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53aa:	2200      	movs	r2, #0
   d53ac:	4611      	mov	r1, r2
   d53ae:	6840      	ldr	r0, [r0, #4]
   d53b0:	f7ff baac 	b.w	d490c <network_listening>

000d53b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53b4:	2200      	movs	r2, #0
   d53b6:	4611      	mov	r1, r2
   d53b8:	6840      	ldr	r0, [r0, #4]
   d53ba:	f7ff bab7 	b.w	d492c <network_get_listen_timeout>

000d53be <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53be:	2200      	movs	r2, #0
   d53c0:	6840      	ldr	r0, [r0, #4]
   d53c2:	f7ff baab 	b.w	d491c <network_set_listen_timeout>

000d53c6 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53c6:	2200      	movs	r2, #0
   d53c8:	f081 0101 	eor.w	r1, r1, #1
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	f7ff ba95 	b.w	d48fc <network_listen>

000d53d2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d53d2:	2300      	movs	r3, #0
   d53d4:	461a      	mov	r2, r3
   d53d6:	4619      	mov	r1, r3
   d53d8:	6840      	ldr	r0, [r0, #4]
   d53da:	f7ff ba87 	b.w	d48ec <network_off>

000d53de <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d53de:	2300      	movs	r3, #0
   d53e0:	461a      	mov	r2, r3
   d53e2:	4619      	mov	r1, r3
   d53e4:	6840      	ldr	r0, [r0, #4]
   d53e6:	f7ff ba79 	b.w	d48dc <network_on>

000d53ea <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53ea:	2200      	movs	r2, #0
   d53ec:	4611      	mov	r1, r2
   d53ee:	6840      	ldr	r0, [r0, #4]
   d53f0:	f7ff ba5c 	b.w	d48ac <network_connecting>

000d53f4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53f4:	2200      	movs	r2, #0
   d53f6:	2102      	movs	r1, #2
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	f7ff ba5f 	b.w	d48bc <network_disconnect>

000d53fe <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53fe:	2300      	movs	r3, #0
   d5400:	461a      	mov	r2, r3
   d5402:	6840      	ldr	r0, [r0, #4]
   d5404:	f7ff ba4a 	b.w	d489c <network_connect>

000d5408 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5408:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d540a:	4d0c      	ldr	r5, [pc, #48]	; (d543c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d540c:	2428      	movs	r4, #40	; 0x28
   d540e:	4622      	mov	r2, r4
   d5410:	2100      	movs	r1, #0
   d5412:	4628      	mov	r0, r5
   d5414:	f001 f96d 	bl	d66f2 <memset>
        cid = -1;
   d5418:	f04f 33ff 	mov.w	r3, #4294967295
   d541c:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d541e:	802c      	strh	r4, [r5, #0]
   d5420:	4d07      	ldr	r5, [pc, #28]	; (d5440 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d5422:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5424:	4628      	mov	r0, r5
   d5426:	606b      	str	r3, [r5, #4]
   d5428:	4b06      	ldr	r3, [pc, #24]	; (d5444 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d542a:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d542e:	4622      	mov	r2, r4
   d5430:	2100      	movs	r1, #0
   d5432:	f001 f95e 	bl	d66f2 <memset>
        size = sizeof(*this);
   d5436:	812c      	strh	r4, [r5, #8]
   d5438:	bd38      	pop	{r3, r4, r5, pc}
   d543a:	bf00      	nop
   d543c:	2003e3dc 	.word	0x2003e3dc
   d5440:	2003e3ac 	.word	0x2003e3ac
   d5444:	000d6a1c 	.word	0x000d6a1c

000d5448 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5448:	4770      	bx	lr

000d544a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d544a:	7441      	strb	r1, [r0, #17]
   d544c:	4770      	bx	lr

000d544e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d544e:	7c00      	ldrb	r0, [r0, #16]
   d5450:	f7ff b958 	b.w	d4704 <HAL_USART_Available_Data_For_Write>

000d5454 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5454:	7c00      	ldrb	r0, [r0, #16]
   d5456:	f7ff b92d 	b.w	d46b4 <HAL_USART_Available_Data>

000d545a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d545a:	7c00      	ldrb	r0, [r0, #16]
   d545c:	f7ff b93a 	b.w	d46d4 <HAL_USART_Peek_Data>

000d5460 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5460:	7c00      	ldrb	r0, [r0, #16]
   d5462:	f7ff b92f 	b.w	d46c4 <HAL_USART_Read_Data>

000d5466 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5466:	7c00      	ldrb	r0, [r0, #16]
   d5468:	f7ff b93c 	b.w	d46e4 <HAL_USART_Flush_Data>

000d546c <_ZN11USARTSerialD0Ev>:
   d546c:	b510      	push	{r4, lr}
   d546e:	4604      	mov	r4, r0
   d5470:	f7fe fe11 	bl	d4096 <_ZdlPv>
   d5474:	4620      	mov	r0, r4
   d5476:	bd10      	pop	{r4, pc}

000d5478 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5478:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d547a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d547c:	4604      	mov	r4, r0
   d547e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5480:	b925      	cbnz	r5, d548c <_ZN11USARTSerial5writeEh+0x14>
   d5482:	7c00      	ldrb	r0, [r0, #16]
   d5484:	f7ff f93e 	bl	d4704 <HAL_USART_Available_Data_For_Write>
   d5488:	2800      	cmp	r0, #0
   d548a:	dd05      	ble.n	d5498 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d548c:	4631      	mov	r1, r6
   d548e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5494:	f7ff b906 	b.w	d46a4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5498:	4628      	mov	r0, r5
   d549a:	bd70      	pop	{r4, r5, r6, pc}

000d549c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d549c:	b510      	push	{r4, lr}
   d549e:	4604      	mov	r4, r0
   d54a0:	4608      	mov	r0, r1
   d54a2:	4611      	mov	r1, r2
   d54a4:	2200      	movs	r2, #0
   d54a6:	6062      	str	r2, [r4, #4]
   d54a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54ac:	60a2      	str	r2, [r4, #8]
   d54ae:	4a05      	ldr	r2, [pc, #20]	; (d54c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54b0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54b2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54b4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54b6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54b8:	461a      	mov	r2, r3
   d54ba:	f7ff f8eb 	bl	d4694 <HAL_USART_Init>
}
   d54be:	4620      	mov	r0, r4
   d54c0:	bd10      	pop	{r4, pc}
   d54c2:	bf00      	nop
   d54c4:	000d6a50 	.word	0x000d6a50

000d54c8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d54c8:	7c00      	ldrb	r0, [r0, #16]
   d54ca:	f7ff b913 	b.w	d46f4 <HAL_USART_Is_Enabled>
	...

000d54d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54d2:	4d0c      	ldr	r5, [pc, #48]	; (d5504 <_Z22__fetch_global_Serial1v+0x34>)
   d54d4:	6829      	ldr	r1, [r5, #0]
   d54d6:	f011 0401 	ands.w	r4, r1, #1
   d54da:	d111      	bne.n	d5500 <_Z22__fetch_global_Serial1v+0x30>
   d54dc:	4628      	mov	r0, r5
   d54de:	f7fe fdde 	bl	d409e <__cxa_guard_acquire>
   d54e2:	b168      	cbz	r0, d5500 <_Z22__fetch_global_Serial1v+0x30>
   d54e4:	4a08      	ldr	r2, [pc, #32]	; (d5508 <_Z22__fetch_global_Serial1v+0x38>)
   d54e6:	4b09      	ldr	r3, [pc, #36]	; (d550c <_Z22__fetch_global_Serial1v+0x3c>)
   d54e8:	4809      	ldr	r0, [pc, #36]	; (d5510 <_Z22__fetch_global_Serial1v+0x40>)
   d54ea:	4621      	mov	r1, r4
   d54ec:	f7ff ffd6 	bl	d549c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d54f0:	4628      	mov	r0, r5
   d54f2:	f7fe fdd9 	bl	d40a8 <__cxa_guard_release>
   d54f6:	4a07      	ldr	r2, [pc, #28]	; (d5514 <_Z22__fetch_global_Serial1v+0x44>)
   d54f8:	4907      	ldr	r1, [pc, #28]	; (d5518 <_Z22__fetch_global_Serial1v+0x48>)
   d54fa:	4805      	ldr	r0, [pc, #20]	; (d5510 <_Z22__fetch_global_Serial1v+0x40>)
   d54fc:	f000 fa90 	bl	d5a20 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5500:	4803      	ldr	r0, [pc, #12]	; (d5510 <_Z22__fetch_global_Serial1v+0x40>)
   d5502:	bd38      	pop	{r3, r4, r5, pc}
   d5504:	2003e49c 	.word	0x2003e49c
   d5508:	2003e4a0 	.word	0x2003e4a0
   d550c:	2003e418 	.word	0x2003e418
   d5510:	2003e404 	.word	0x2003e404
   d5514:	2003e308 	.word	0x2003e308
   d5518:	000d5449 	.word	0x000d5449

000d551c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d551c:	4770      	bx	lr

000d551e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5520:	4606      	mov	r6, r0
   d5522:	4615      	mov	r5, r2
   d5524:	460c      	mov	r4, r1
   d5526:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5528:	42bc      	cmp	r4, r7
   d552a:	d006      	beq.n	d553a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d552c:	6833      	ldr	r3, [r6, #0]
   d552e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5532:	689b      	ldr	r3, [r3, #8]
   d5534:	4630      	mov	r0, r6
   d5536:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5538:	e7f6      	b.n	d5528 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d553a:	4628      	mov	r0, r5
   d553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d553e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d553e:	2200      	movs	r2, #0
   d5540:	7c00      	ldrb	r0, [r0, #16]
   d5542:	f7ff b8ff 	b.w	d4744 <HAL_I2C_Write_Data>

000d5546 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5546:	2100      	movs	r1, #0
   d5548:	7c00      	ldrb	r0, [r0, #16]
   d554a:	f7ff b903 	b.w	d4754 <HAL_I2C_Available_Data>

000d554e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d554e:	2100      	movs	r1, #0
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	f7ff b907 	b.w	d4764 <HAL_I2C_Read_Data>

000d5556 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5556:	2100      	movs	r1, #0
   d5558:	7c00      	ldrb	r0, [r0, #16]
   d555a:	f7ff b90b 	b.w	d4774 <HAL_I2C_Peek_Data>

000d555e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d555e:	2100      	movs	r1, #0
   d5560:	7c00      	ldrb	r0, [r0, #16]
   d5562:	f7ff b90f 	b.w	d4784 <HAL_I2C_Flush_Data>

000d5566 <_ZN7TwoWireD0Ev>:
   d5566:	b510      	push	{r4, lr}
   d5568:	4604      	mov	r4, r0
   d556a:	f7fe fd94 	bl	d4096 <_ZdlPv>
   d556e:	4620      	mov	r0, r4
   d5570:	bd10      	pop	{r4, pc}
	...

000d5574 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5574:	b510      	push	{r4, lr}
   d5576:	4604      	mov	r4, r0
   d5578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d557c:	4608      	mov	r0, r1
   d557e:	60a3      	str	r3, [r4, #8]
   d5580:	2100      	movs	r1, #0
   d5582:	4b04      	ldr	r3, [pc, #16]	; (d5594 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5584:	7420      	strb	r0, [r4, #16]
   d5586:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5588:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d558a:	f7ff f90b 	bl	d47a4 <HAL_I2C_Init>

}
   d558e:	4620      	mov	r0, r4
   d5590:	bd10      	pop	{r4, pc}
   d5592:	bf00      	nop
   d5594:	000d6a80 	.word	0x000d6a80

000d5598 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5598:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d559a:	2400      	movs	r4, #0
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	9400      	str	r4, [sp, #0]
   d55a0:	f7ff f8b8 	bl	d4714 <HAL_I2C_Request_Data>
  return result;
}
   d55a4:	b2c0      	uxtb	r0, r0
   d55a6:	b002      	add	sp, #8
   d55a8:	bd10      	pop	{r4, pc}

000d55aa <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d55aa:	2301      	movs	r3, #1
   d55ac:	b2d2      	uxtb	r2, r2
   d55ae:	b2c9      	uxtb	r1, r1
   d55b0:	f7ff bff2 	b.w	d5598 <_ZN7TwoWire11requestFromEhhh>

000d55b4 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d55b4:	b2db      	uxtb	r3, r3
   d55b6:	b2d2      	uxtb	r2, r2
   d55b8:	b2c9      	uxtb	r1, r1
   d55ba:	f7ff bfed 	b.w	d5598 <_ZN7TwoWire11requestFromEhhh>

000d55be <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d55be:	2200      	movs	r2, #0
   d55c0:	7c00      	ldrb	r0, [r0, #16]
   d55c2:	f7ff b8af 	b.w	d4724 <HAL_I2C_Begin_Transmission>

000d55c6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d55c6:	b2c9      	uxtb	r1, r1
   d55c8:	f7ff bff9 	b.w	d55be <_ZN7TwoWire17beginTransmissionEh>

000d55cc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d55cc:	2200      	movs	r2, #0
   d55ce:	7c00      	ldrb	r0, [r0, #16]
   d55d0:	f7ff b8b0 	b.w	d4734 <HAL_I2C_End_Transmission>

000d55d4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d55d4:	2101      	movs	r1, #1
   d55d6:	f7ff bff9 	b.w	d55cc <_ZN7TwoWire15endTransmissionEh>

000d55da <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d55da:	2100      	movs	r1, #0
   d55dc:	7c00      	ldrb	r0, [r0, #16]
   d55de:	f7ff b8d9 	b.w	d4794 <HAL_I2C_Is_Enabled>

000d55e2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d55e2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d55e4:	2100      	movs	r1, #0
   d55e6:	7c00      	ldrb	r0, [r0, #16]
   d55e8:	f7ff f8e4 	bl	d47b4 <HAL_I2C_Acquire>
}
   d55ec:	fab0 f080 	clz	r0, r0
   d55f0:	0940      	lsrs	r0, r0, #5
   d55f2:	bd08      	pop	{r3, pc}

000d55f4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d55f4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d55f6:	2100      	movs	r1, #0
   d55f8:	7c00      	ldrb	r0, [r0, #16]
   d55fa:	f7ff f8e3 	bl	d47c4 <HAL_I2C_Release>
}
   d55fe:	fab0 f080 	clz	r0, r0
   d5602:	0940      	lsrs	r0, r0, #5
   d5604:	bd08      	pop	{r3, pc}

000d5606 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5606:	2200      	movs	r2, #0
   d5608:	4611      	mov	r1, r2
   d560a:	6840      	ldr	r0, [r0, #4]
   d560c:	f7ff b97e 	b.w	d490c <network_listening>

000d5610 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5610:	2200      	movs	r2, #0
   d5612:	4611      	mov	r1, r2
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	f7ff b989 	b.w	d492c <network_get_listen_timeout>

000d561a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d561a:	2200      	movs	r2, #0
   d561c:	6840      	ldr	r0, [r0, #4]
   d561e:	f7ff b97d 	b.w	d491c <network_set_listen_timeout>

000d5622 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5622:	2200      	movs	r2, #0
   d5624:	f081 0101 	eor.w	r1, r1, #1
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	f7ff b967 	b.w	d48fc <network_listen>

000d562e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d562e:	2300      	movs	r3, #0
   d5630:	461a      	mov	r2, r3
   d5632:	4619      	mov	r1, r3
   d5634:	6840      	ldr	r0, [r0, #4]
   d5636:	f7ff b959 	b.w	d48ec <network_off>

000d563a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d563a:	2300      	movs	r3, #0
   d563c:	461a      	mov	r2, r3
   d563e:	4619      	mov	r1, r3
   d5640:	6840      	ldr	r0, [r0, #4]
   d5642:	f7ff b94b 	b.w	d48dc <network_on>

000d5646 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5646:	2200      	movs	r2, #0
   d5648:	4611      	mov	r1, r2
   d564a:	6840      	ldr	r0, [r0, #4]
   d564c:	f7ff b93e 	b.w	d48cc <network_ready>

000d5650 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5650:	2200      	movs	r2, #0
   d5652:	4611      	mov	r1, r2
   d5654:	6840      	ldr	r0, [r0, #4]
   d5656:	f7ff b929 	b.w	d48ac <network_connecting>

000d565a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d565a:	2200      	movs	r2, #0
   d565c:	2102      	movs	r1, #2
   d565e:	6840      	ldr	r0, [r0, #4]
   d5660:	f7ff b92c 	b.w	d48bc <network_disconnect>

000d5664 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5664:	2300      	movs	r3, #0
   d5666:	461a      	mov	r2, r3
   d5668:	6840      	ldr	r0, [r0, #4]
   d566a:	f7ff b917 	b.w	d489c <network_connect>

000d566e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d566e:	b110      	cbz	r0, d5676 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5670:	6803      	ldr	r3, [r0, #0]
   d5672:	685b      	ldr	r3, [r3, #4]
   d5674:	4718      	bx	r3
   d5676:	4770      	bx	lr

000d5678 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5678:	b538      	push	{r3, r4, r5, lr}
   d567a:	4604      	mov	r4, r0
   d567c:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d567e:	b1d0      	cbz	r0, d56b6 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5680:	f7fe ffd0 	bl	d4624 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5684:	b9b8      	cbnz	r0, d56b6 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5686:	7c23      	ldrb	r3, [r4, #16]
   d5688:	b91b      	cbnz	r3, d5692 <_ZN6Thread7disposeEv+0x1a>
   d568a:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d568c:	b108      	cbz	r0, d5692 <_ZN6Thread7disposeEv+0x1a>
   d568e:	f7fe ffd1 	bl	d4634 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5692:	6865      	ldr	r5, [r4, #4]
   d5694:	b155      	cbz	r5, d56ac <_ZN6Thread7disposeEv+0x34>

    ~_Function_base()
    {
      if (_M_manager)
   d5696:	68ab      	ldr	r3, [r5, #8]
   d5698:	b11b      	cbz	r3, d56a2 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d569a:	2203      	movs	r2, #3
   d569c:	4629      	mov	r1, r5
   d569e:	4628      	mov	r0, r5
   d56a0:	4798      	blx	r3
            delete wrapper;
   d56a2:	4628      	mov	r0, r5
   d56a4:	f7fe fcf7 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d56a8:	2300      	movs	r3, #0
   d56aa:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d56ac:	6820      	ldr	r0, [r4, #0]
   d56ae:	f7fe ffc9 	bl	d4644 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d56b2:	2300      	movs	r3, #0
   d56b4:	6023      	str	r3, [r4, #0]
   d56b6:	bd38      	pop	{r3, r4, r5, pc}

000d56b8 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d56b8:	b538      	push	{r3, r4, r5, lr}
   d56ba:	4b0b      	ldr	r3, [pc, #44]	; (d56e8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d56bc:	6003      	str	r3, [r0, #0]
   d56be:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56c0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d56c4:	b108      	cbz	r0, d56ca <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d56c6:	f7fe fce8 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56ca:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d56ce:	b12d      	cbz	r5, d56dc <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d56d0:	4628      	mov	r0, r5
   d56d2:	f7ff ffd1 	bl	d5678 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56d6:	4628      	mov	r0, r5
   d56d8:	f7fe fcdd 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56dc:	68a0      	ldr	r0, [r4, #8]
   d56de:	b108      	cbz	r0, d56e4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d56e0:	f7ff ffc5 	bl	d566e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d56e4:	4620      	mov	r0, r4
   d56e6:	bd38      	pop	{r3, r4, r5, pc}
   d56e8:	000d6aa8 	.word	0x000d6aa8

000d56ec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d56ec:	b538      	push	{r3, r4, r5, lr}
   d56ee:	4c0d      	ldr	r4, [pc, #52]	; (d5724 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d56f0:	4b0d      	ldr	r3, [pc, #52]	; (d5728 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d56f2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d56f4:	2500      	movs	r5, #0
   d56f6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56f8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56fc:	6063      	str	r3, [r4, #4]
   d56fe:	60a5      	str	r5, [r4, #8]
   d5700:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5704:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5708:	f7fe ffac 	bl	d4664 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d570c:	4b07      	ldr	r3, [pc, #28]	; (d572c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d570e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5712:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5714:	4620      	mov	r0, r4
   d5716:	4a06      	ldr	r2, [pc, #24]	; (d5730 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5718:	4906      	ldr	r1, [pc, #24]	; (d5734 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d571e:	f000 b97f 	b.w	d5a20 <__aeabi_atexit>
   d5722:	bf00      	nop
   d5724:	2003e524 	.word	0x2003e524
   d5728:	000d6adc 	.word	0x000d6adc
   d572c:	000d6aa8 	.word	0x000d6aa8
   d5730:	2003e308 	.word	0x2003e308
   d5734:	000d56b9 	.word	0x000d56b9

000d5738 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5738:	2300      	movs	r3, #0
   d573a:	461a      	mov	r2, r3
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	f7ff b8ad 	b.w	d489c <network_connect>

000d5742 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5742:	2200      	movs	r2, #0
   d5744:	2102      	movs	r1, #2
   d5746:	6840      	ldr	r0, [r0, #4]
   d5748:	f7ff b8b8 	b.w	d48bc <network_disconnect>

000d574c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d574c:	2200      	movs	r2, #0
   d574e:	4611      	mov	r1, r2
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	f7ff b8ab 	b.w	d48ac <network_connecting>

000d5756 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5756:	2200      	movs	r2, #0
   d5758:	4611      	mov	r1, r2
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7ff b8b6 	b.w	d48cc <network_ready>

000d5760 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5760:	2300      	movs	r3, #0
   d5762:	461a      	mov	r2, r3
   d5764:	4619      	mov	r1, r3
   d5766:	6840      	ldr	r0, [r0, #4]
   d5768:	f7ff b8b8 	b.w	d48dc <network_on>

000d576c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d576c:	2300      	movs	r3, #0
   d576e:	461a      	mov	r2, r3
   d5770:	4619      	mov	r1, r3
   d5772:	6840      	ldr	r0, [r0, #4]
   d5774:	f7ff b8ba 	b.w	d48ec <network_off>

000d5778 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5778:	2200      	movs	r2, #0
   d577a:	f081 0101 	eor.w	r1, r1, #1
   d577e:	6840      	ldr	r0, [r0, #4]
   d5780:	f7ff b8bc 	b.w	d48fc <network_listen>

000d5784 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5784:	2200      	movs	r2, #0
   d5786:	6840      	ldr	r0, [r0, #4]
   d5788:	f7ff b8c8 	b.w	d491c <network_set_listen_timeout>

000d578c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d578c:	2200      	movs	r2, #0
   d578e:	4611      	mov	r1, r2
   d5790:	6840      	ldr	r0, [r0, #4]
   d5792:	f7ff b8cb 	b.w	d492c <network_get_listen_timeout>

000d5796 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5796:	2200      	movs	r2, #0
   d5798:	4611      	mov	r1, r2
   d579a:	6840      	ldr	r0, [r0, #4]
   d579c:	f7ff b8b6 	b.w	d490c <network_listening>

000d57a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d57a0:	b570      	push	{r4, r5, r6, lr}
   d57a2:	b08c      	sub	sp, #48	; 0x30
   d57a4:	4614      	mov	r4, r2
   d57a6:	4606      	mov	r6, r0
    IPAddress addr;
   d57a8:	f7ff fd52 	bl	d5250 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57ac:	ab0c      	add	r3, sp, #48	; 0x30
   d57ae:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d57b0:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57b2:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d57b6:	4620      	mov	r0, r4
   d57b8:	f7fe fed4 	bl	d4564 <netdb_getaddrinfo>
    if (!r && ai) {
   d57bc:	4601      	mov	r1, r0
   d57be:	bb58      	cbnz	r0, d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d57c0:	9b00      	ldr	r3, [sp, #0]
   d57c2:	b34b      	cbz	r3, d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d57c4:	685a      	ldr	r2, [r3, #4]
   d57c6:	2a02      	cmp	r2, #2
   d57c8:	d00e      	beq.n	d57e8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d57ca:	2a0a      	cmp	r2, #10
   d57cc:	d124      	bne.n	d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d57ce:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d57d0:	2211      	movs	r2, #17
   d57d2:	a801      	add	r0, sp, #4
   d57d4:	f000 ff8d 	bl	d66f2 <memset>
                a.v = 6;
   d57d8:	2306      	movs	r3, #6
   d57da:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57de:	ad01      	add	r5, sp, #4
   d57e0:	f104 0308 	add.w	r3, r4, #8
   d57e4:	3418      	adds	r4, #24
   d57e6:	e005      	b.n	d57f4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57e8:	6959      	ldr	r1, [r3, #20]
   d57ea:	4630      	mov	r0, r6
   d57ec:	3104      	adds	r1, #4
   d57ee:	f7ff fd5c 	bl	d52aa <_ZN9IPAddressaSEPKh>
                break;
   d57f2:	e011      	b.n	d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57f4:	6818      	ldr	r0, [r3, #0]
   d57f6:	6859      	ldr	r1, [r3, #4]
   d57f8:	462a      	mov	r2, r5
   d57fa:	c203      	stmia	r2!, {r0, r1}
   d57fc:	3308      	adds	r3, #8
   d57fe:	42a3      	cmp	r3, r4
   d5800:	4615      	mov	r5, r2
   d5802:	d1f7      	bne.n	d57f4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5804:	a901      	add	r1, sp, #4
   d5806:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5808:	ad07      	add	r5, sp, #28
   d580a:	f7ff fd2f 	bl	d526c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d580e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5810:	1d34      	adds	r4, r6, #4
   d5812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5814:	682b      	ldr	r3, [r5, #0]
   d5816:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5818:	9800      	ldr	r0, [sp, #0]
   d581a:	f7fe fe9b 	bl	d4554 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d581e:	4630      	mov	r0, r6
   d5820:	b00c      	add	sp, #48	; 0x30
   d5822:	bd70      	pop	{r4, r5, r6, pc}

000d5824 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5824:	4b02      	ldr	r3, [pc, #8]	; (d5830 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5826:	4a03      	ldr	r2, [pc, #12]	; (d5834 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5828:	601a      	str	r2, [r3, #0]
   d582a:	2200      	movs	r2, #0
   d582c:	605a      	str	r2, [r3, #4]
   d582e:	4770      	bx	lr
   d5830:	2003e6f4 	.word	0x2003e6f4
   d5834:	000d6adc 	.word	0x000d6adc

000d5838 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5838:	b510      	push	{r4, lr}
   d583a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d583c:	480f      	ldr	r0, [pc, #60]	; (d587c <pinAvailable+0x44>)
   d583e:	f7ff f995 	bl	d4b6c <_ZN8SPIClass9isEnabledEv>
   d5842:	b128      	cbz	r0, d5850 <pinAvailable+0x18>
   d5844:	f1a4 030b 	sub.w	r3, r4, #11
   d5848:	2b02      	cmp	r3, #2
   d584a:	d801      	bhi.n	d5850 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d584c:	2000      	movs	r0, #0
   d584e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5850:	f000 f8a6 	bl	d59a0 <_Z19__fetch_global_Wirev>
   d5854:	f7ff fec1 	bl	d55da <_ZN7TwoWire9isEnabledEv>
   d5858:	b108      	cbz	r0, d585e <pinAvailable+0x26>
   d585a:	2c01      	cmp	r4, #1
   d585c:	d9f6      	bls.n	d584c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d585e:	f7ff fe37 	bl	d54d0 <_Z22__fetch_global_Serial1v>
   d5862:	f7ff fe31 	bl	d54c8 <_ZN11USARTSerial9isEnabledEv>
   d5866:	b118      	cbz	r0, d5870 <pinAvailable+0x38>
   d5868:	f1a4 0309 	sub.w	r3, r4, #9
   d586c:	2b01      	cmp	r3, #1
   d586e:	d9ed      	bls.n	d584c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5870:	2c23      	cmp	r4, #35	; 0x23
   d5872:	bf8c      	ite	hi
   d5874:	2000      	movhi	r0, #0
   d5876:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5878:	bd10      	pop	{r4, pc}
   d587a:	bf00      	nop
   d587c:	2003e6fc 	.word	0x2003e6fc

000d5880 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5880:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5882:	b538      	push	{r3, r4, r5, lr}
   d5884:	4604      	mov	r4, r0
   d5886:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5888:	d80a      	bhi.n	d58a0 <pinMode+0x20>
   d588a:	29ff      	cmp	r1, #255	; 0xff
   d588c:	d008      	beq.n	d58a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d588e:	f7ff ffd3 	bl	d5838 <pinAvailable>
   d5892:	b128      	cbz	r0, d58a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5894:	4629      	mov	r1, r5
   d5896:	4620      	mov	r0, r4
}
   d5898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d589c:	f7fe be72 	b.w	d4584 <HAL_Pin_Mode>
   d58a0:	bd38      	pop	{r3, r4, r5, pc}

000d58a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d58a2:	b538      	push	{r3, r4, r5, lr}
   d58a4:	4604      	mov	r4, r0
   d58a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d58a8:	f7fe fe74 	bl	d4594 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d58ac:	28ff      	cmp	r0, #255	; 0xff
   d58ae:	d010      	beq.n	d58d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d58b0:	2806      	cmp	r0, #6
   d58b2:	d804      	bhi.n	d58be <digitalWrite+0x1c>
   d58b4:	234d      	movs	r3, #77	; 0x4d
   d58b6:	fa23 f000 	lsr.w	r0, r3, r0
   d58ba:	07c3      	lsls	r3, r0, #31
   d58bc:	d409      	bmi.n	d58d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d58be:	4620      	mov	r0, r4
   d58c0:	f7ff ffba 	bl	d5838 <pinAvailable>
   d58c4:	b128      	cbz	r0, d58d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58c6:	4629      	mov	r1, r5
   d58c8:	4620      	mov	r0, r4
}
   d58ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d58ce:	f7fe be69 	b.w	d45a4 <HAL_GPIO_Write>
   d58d2:	bd38      	pop	{r3, r4, r5, pc}

000d58d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d58d6:	4c0c      	ldr	r4, [pc, #48]	; (d5908 <_GLOBAL__sub_I_SPI+0x34>)
   d58d8:	4e0c      	ldr	r6, [pc, #48]	; (d590c <_GLOBAL__sub_I_SPI+0x38>)
   d58da:	4d0d      	ldr	r5, [pc, #52]	; (d5910 <_GLOBAL__sub_I_SPI+0x3c>)
   d58dc:	2100      	movs	r1, #0
   d58de:	4620      	mov	r0, r4
   d58e0:	f7ff f930 	bl	d4b44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58e6:	4c0b      	ldr	r4, [pc, #44]	; (d5914 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d58e8:	4632      	mov	r2, r6
   d58ea:	4629      	mov	r1, r5
   d58ec:	f000 f898 	bl	d5a20 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58f0:	2101      	movs	r1, #1
   d58f2:	4620      	mov	r0, r4
   d58f4:	f7ff f926 	bl	d4b44 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58f8:	4632      	mov	r2, r6
   d58fa:	4629      	mov	r1, r5
   d58fc:	4620      	mov	r0, r4
   d58fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5902:	f000 b88d 	b.w	d5a20 <__aeabi_atexit>
   d5906:	bf00      	nop
   d5908:	2003e6fc 	.word	0x2003e6fc
   d590c:	2003e308 	.word	0x2003e308
   d5910:	000d4b35 	.word	0x000d4b35
   d5914:	2003e70c 	.word	0x2003e70c

000d5918 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d5918:	b530      	push	{r4, r5, lr}
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d591a:	4d1c      	ldr	r5, [pc, #112]	; (d598c <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
   d591c:	b089      	sub	sp, #36	; 0x24
   d591e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
   d5920:	6820      	ldr	r0, [r4, #0]
   d5922:	f7fe fe5f 	bl	d45e4 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5926:	f7fe fe65 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
   d592a:	682b      	ldr	r3, [r5, #0]
   d592c:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
   d592e:	1ac0      	subs	r0, r0, r3
   d5930:	4290      	cmp	r0, r2
   d5932:	d3f5      	bcc.n	d5920 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
   d5934:	6823      	ldr	r3, [r4, #0]
   d5936:	b333      	cbz	r3, d5986 <_ZN19ApplicationWatchdog4loopEv+0x6e>
   d5938:	68e3      	ldr	r3, [r4, #12]
   d593a:	b323      	cbz	r3, d5986 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d593c:	1d25      	adds	r5, r4, #4
   d593e:	6923      	ldr	r3, [r4, #16]
   d5940:	4628      	mov	r0, r5
   d5942:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5944:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5946:	a904      	add	r1, sp, #16
   d5948:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d594a:	9302      	str	r3, [sp, #8]
   d594c:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d594e:	f7ff fb26 	bl	d4f9e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5952:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5954:	9a06      	ldr	r2, [sp, #24]
   d5956:	9202      	str	r2, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5958:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d595a:	9a07      	ldr	r2, [sp, #28]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d595c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d595e:	9307      	str	r3, [sp, #28]
   d5960:	4629      	mov	r1, r5
   d5962:	a804      	add	r0, sp, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5964:	9203      	str	r2, [sp, #12]
   d5966:	f7ff fb1a 	bl	d4f9e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d596a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d596c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d596e:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5970:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5972:	9206      	str	r2, [sp, #24]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5974:	a804      	add	r0, sp, #16
   d5976:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5978:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d597a:	9207      	str	r2, [sp, #28]
   d597c:	f7fe fbc7 	bl	d410e <_ZNSt14_Function_baseD1Ev>
   d5980:	4668      	mov	r0, sp
   d5982:	f7fe fbc4 	bl	d410e <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
   d5986:	b009      	add	sp, #36	; 0x24
   d5988:	bd30      	pop	{r4, r5, pc}
   d598a:	bf00      	nop
   d598c:	2003e71c 	.word	0x2003e71c

000d5990 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
   d5990:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
   d5992:	f7ff ffc1 	bl	d5918 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
   d5996:	2000      	movs	r0, #0
}
   d5998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
   d599c:	f7fe be52 	b.w	d4644 <os_thread_cleanup>

000d59a0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d59a0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d59a2:	4d0b      	ldr	r5, [pc, #44]	; (d59d0 <_Z19__fetch_global_Wirev+0x30>)
   d59a4:	6829      	ldr	r1, [r5, #0]
   d59a6:	f011 0401 	ands.w	r4, r1, #1
   d59aa:	d10f      	bne.n	d59cc <_Z19__fetch_global_Wirev+0x2c>
   d59ac:	4628      	mov	r0, r5
   d59ae:	f7fe fb76 	bl	d409e <__cxa_guard_acquire>
   d59b2:	b158      	cbz	r0, d59cc <_Z19__fetch_global_Wirev+0x2c>
   d59b4:	4621      	mov	r1, r4
   d59b6:	4807      	ldr	r0, [pc, #28]	; (d59d4 <_Z19__fetch_global_Wirev+0x34>)
   d59b8:	f7ff fddc 	bl	d5574 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59bc:	4628      	mov	r0, r5
   d59be:	f7fe fb73 	bl	d40a8 <__cxa_guard_release>
   d59c2:	4a05      	ldr	r2, [pc, #20]	; (d59d8 <_Z19__fetch_global_Wirev+0x38>)
   d59c4:	4905      	ldr	r1, [pc, #20]	; (d59dc <_Z19__fetch_global_Wirev+0x3c>)
   d59c6:	4803      	ldr	r0, [pc, #12]	; (d59d4 <_Z19__fetch_global_Wirev+0x34>)
   d59c8:	f000 f82a 	bl	d5a20 <__aeabi_atexit>
	return wire;
}
   d59cc:	4801      	ldr	r0, [pc, #4]	; (d59d4 <_Z19__fetch_global_Wirev+0x34>)
   d59ce:	bd38      	pop	{r3, r4, r5, pc}
   d59d0:	2003e720 	.word	0x2003e720
   d59d4:	2003e738 	.word	0x2003e738
   d59d8:	2003e308 	.word	0x2003e308
   d59dc:	000d551d 	.word	0x000d551d

000d59e0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d59e0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d59e2:	4c0b      	ldr	r4, [pc, #44]	; (d5a10 <_Z20__fetch_global_Wire1v+0x30>)
   d59e4:	6823      	ldr	r3, [r4, #0]
   d59e6:	07db      	lsls	r3, r3, #31
   d59e8:	d40f      	bmi.n	d5a0a <_Z20__fetch_global_Wire1v+0x2a>
   d59ea:	4620      	mov	r0, r4
   d59ec:	f7fe fb57 	bl	d409e <__cxa_guard_acquire>
   d59f0:	b158      	cbz	r0, d5a0a <_Z20__fetch_global_Wire1v+0x2a>
   d59f2:	2101      	movs	r1, #1
   d59f4:	4807      	ldr	r0, [pc, #28]	; (d5a14 <_Z20__fetch_global_Wire1v+0x34>)
   d59f6:	f7ff fdbd 	bl	d5574 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7fe fb54 	bl	d40a8 <__cxa_guard_release>
   d5a00:	4a05      	ldr	r2, [pc, #20]	; (d5a18 <_Z20__fetch_global_Wire1v+0x38>)
   d5a02:	4906      	ldr	r1, [pc, #24]	; (d5a1c <_Z20__fetch_global_Wire1v+0x3c>)
   d5a04:	4803      	ldr	r0, [pc, #12]	; (d5a14 <_Z20__fetch_global_Wire1v+0x34>)
   d5a06:	f000 f80b 	bl	d5a20 <__aeabi_atexit>
	return wire;
}
   d5a0a:	4802      	ldr	r0, [pc, #8]	; (d5a14 <_Z20__fetch_global_Wire1v+0x34>)
   d5a0c:	bd10      	pop	{r4, pc}
   d5a0e:	bf00      	nop
   d5a10:	2003e74c 	.word	0x2003e74c
   d5a14:	2003e724 	.word	0x2003e724
   d5a18:	2003e308 	.word	0x2003e308
   d5a1c:	000d551d 	.word	0x000d551d

000d5a20 <__aeabi_atexit>:
   d5a20:	460b      	mov	r3, r1
   d5a22:	4601      	mov	r1, r0
   d5a24:	4618      	mov	r0, r3
   d5a26:	f000 be4b 	b.w	d66c0 <__cxa_atexit>

000d5a2a <_ZSt25__throw_bad_function_callv>:
   d5a2a:	b508      	push	{r3, lr}
   d5a2c:	f7fe ffb6 	bl	d499c <abort>

000d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a30:	4b18      	ldr	r3, [pc, #96]	; (d5a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d1      	lsls	r1, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b16      	ldr	r3, [pc, #88]	; (d5a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d2      	lsls	r2, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b14      	ldr	r3, [pc, #80]	; (d5a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d0      	lsls	r0, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b12      	ldr	r3, [pc, #72]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d1      	lsls	r1, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b10      	ldr	r3, [pc, #64]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d2      	lsls	r2, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b0e      	ldr	r3, [pc, #56]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d0      	lsls	r0, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b0c      	ldr	r3, [pc, #48]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d1      	lsls	r1, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b0a      	ldr	r3, [pc, #40]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d2      	lsls	r2, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4770      	bx	lr
   d5a92:	bf00      	nop
   d5a94:	2003e76c 	.word	0x2003e76c
   d5a98:	2003e768 	.word	0x2003e768
   d5a9c:	2003e764 	.word	0x2003e764
   d5aa0:	2003e760 	.word	0x2003e760
   d5aa4:	2003e75c 	.word	0x2003e75c
   d5aa8:	2003e758 	.word	0x2003e758
   d5aac:	2003e754 	.word	0x2003e754
   d5ab0:	2003e750 	.word	0x2003e750

000d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ab4:	4b24      	ldr	r3, [pc, #144]	; (d5b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ab6:	681a      	ldr	r2, [r3, #0]
   d5ab8:	07d0      	lsls	r0, r2, #31
   d5aba:	bf5c      	itt	pl
   d5abc:	2201      	movpl	r2, #1
   d5abe:	601a      	strpl	r2, [r3, #0]
   d5ac0:	4b22      	ldr	r3, [pc, #136]	; (d5b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d1      	lsls	r1, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b20      	ldr	r3, [pc, #128]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d2      	lsls	r2, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b1e      	ldr	r3, [pc, #120]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d0      	lsls	r0, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b1c      	ldr	r3, [pc, #112]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d1      	lsls	r1, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b1a      	ldr	r3, [pc, #104]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d2      	lsls	r2, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b18      	ldr	r3, [pc, #96]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d0      	lsls	r0, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b16      	ldr	r3, [pc, #88]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d1      	lsls	r1, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b14      	ldr	r3, [pc, #80]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d2      	lsls	r2, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b12      	ldr	r3, [pc, #72]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d0      	lsls	r0, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b10      	ldr	r3, [pc, #64]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d1      	lsls	r1, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b0e      	ldr	r3, [pc, #56]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d2      	lsls	r2, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4770      	bx	lr
   d5b46:	bf00      	nop
   d5b48:	2003e79c 	.word	0x2003e79c
   d5b4c:	2003e798 	.word	0x2003e798
   d5b50:	2003e794 	.word	0x2003e794
   d5b54:	2003e790 	.word	0x2003e790
   d5b58:	2003e78c 	.word	0x2003e78c
   d5b5c:	2003e788 	.word	0x2003e788
   d5b60:	2003e784 	.word	0x2003e784
   d5b64:	2003e780 	.word	0x2003e780
   d5b68:	2003e77c 	.word	0x2003e77c
   d5b6c:	2003e778 	.word	0x2003e778
   d5b70:	2003e774 	.word	0x2003e774
   d5b74:	2003e770 	.word	0x2003e770

000d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b78:	4b24      	ldr	r3, [pc, #144]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d0      	lsls	r0, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b22      	ldr	r3, [pc, #136]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d1      	lsls	r1, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b20      	ldr	r3, [pc, #128]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d2      	lsls	r2, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b1e      	ldr	r3, [pc, #120]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d0      	lsls	r0, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b1c      	ldr	r3, [pc, #112]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d1      	lsls	r1, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b1a      	ldr	r3, [pc, #104]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d2      	lsls	r2, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b18      	ldr	r3, [pc, #96]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d0      	lsls	r0, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b16      	ldr	r3, [pc, #88]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d1      	lsls	r1, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b14      	ldr	r3, [pc, #80]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d2      	lsls	r2, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b12      	ldr	r3, [pc, #72]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d0      	lsls	r0, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b10      	ldr	r3, [pc, #64]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d1      	lsls	r1, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b0e      	ldr	r3, [pc, #56]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d2      	lsls	r2, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4770      	bx	lr
   d5c0a:	bf00      	nop
   d5c0c:	2003e7cc 	.word	0x2003e7cc
   d5c10:	2003e7c8 	.word	0x2003e7c8
   d5c14:	2003e7c4 	.word	0x2003e7c4
   d5c18:	2003e7c0 	.word	0x2003e7c0
   d5c1c:	2003e7bc 	.word	0x2003e7bc
   d5c20:	2003e7b8 	.word	0x2003e7b8
   d5c24:	2003e7b4 	.word	0x2003e7b4
   d5c28:	2003e7b0 	.word	0x2003e7b0
   d5c2c:	2003e7ac 	.word	0x2003e7ac
   d5c30:	2003e7a8 	.word	0x2003e7a8
   d5c34:	2003e7a4 	.word	0x2003e7a4
   d5c38:	2003e7a0 	.word	0x2003e7a0

000d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c3c:	4b18      	ldr	r3, [pc, #96]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	07d1      	lsls	r1, r2, #31
   d5c42:	bf5c      	itt	pl
   d5c44:	2201      	movpl	r2, #1
   d5c46:	601a      	strpl	r2, [r3, #0]
   d5c48:	4b16      	ldr	r3, [pc, #88]	; (d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d2      	lsls	r2, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b14      	ldr	r3, [pc, #80]	; (d5ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d0      	lsls	r0, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b12      	ldr	r3, [pc, #72]	; (d5cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d1      	lsls	r1, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b10      	ldr	r3, [pc, #64]	; (d5cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d2      	lsls	r2, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b0e      	ldr	r3, [pc, #56]	; (d5cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d0      	lsls	r0, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b0c      	ldr	r3, [pc, #48]	; (d5cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d1      	lsls	r1, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b0a      	ldr	r3, [pc, #40]	; (d5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d2      	lsls	r2, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4770      	bx	lr
   d5c9e:	bf00      	nop
   d5ca0:	2003e7ec 	.word	0x2003e7ec
   d5ca4:	2003e7e8 	.word	0x2003e7e8
   d5ca8:	2003e7e4 	.word	0x2003e7e4
   d5cac:	2003e7e0 	.word	0x2003e7e0
   d5cb0:	2003e7dc 	.word	0x2003e7dc
   d5cb4:	2003e7d8 	.word	0x2003e7d8
   d5cb8:	2003e7d4 	.word	0x2003e7d4
   d5cbc:	2003e7d0 	.word	0x2003e7d0

000d5cc0 <__aeabi_drsub>:
   d5cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5cc4:	e002      	b.n	d5ccc <__adddf3>
   d5cc6:	bf00      	nop

000d5cc8 <__aeabi_dsub>:
   d5cc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5ccc <__adddf3>:
   d5ccc:	b530      	push	{r4, r5, lr}
   d5cce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5cd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5cd6:	ea94 0f05 	teq	r4, r5
   d5cda:	bf08      	it	eq
   d5cdc:	ea90 0f02 	teqeq	r0, r2
   d5ce0:	bf1f      	itttt	ne
   d5ce2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5ce6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5cea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5cee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5cf2:	f000 80e2 	beq.w	d5eba <__adddf3+0x1ee>
   d5cf6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5cfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5cfe:	bfb8      	it	lt
   d5d00:	426d      	neglt	r5, r5
   d5d02:	dd0c      	ble.n	d5d1e <__adddf3+0x52>
   d5d04:	442c      	add	r4, r5
   d5d06:	ea80 0202 	eor.w	r2, r0, r2
   d5d0a:	ea81 0303 	eor.w	r3, r1, r3
   d5d0e:	ea82 0000 	eor.w	r0, r2, r0
   d5d12:	ea83 0101 	eor.w	r1, r3, r1
   d5d16:	ea80 0202 	eor.w	r2, r0, r2
   d5d1a:	ea81 0303 	eor.w	r3, r1, r3
   d5d1e:	2d36      	cmp	r5, #54	; 0x36
   d5d20:	bf88      	it	hi
   d5d22:	bd30      	pophi	{r4, r5, pc}
   d5d24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d34:	d002      	beq.n	d5d3c <__adddf3+0x70>
   d5d36:	4240      	negs	r0, r0
   d5d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5d48:	d002      	beq.n	d5d50 <__adddf3+0x84>
   d5d4a:	4252      	negs	r2, r2
   d5d4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5d50:	ea94 0f05 	teq	r4, r5
   d5d54:	f000 80a7 	beq.w	d5ea6 <__adddf3+0x1da>
   d5d58:	f1a4 0401 	sub.w	r4, r4, #1
   d5d5c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5d60:	db0d      	blt.n	d5d7e <__adddf3+0xb2>
   d5d62:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5d66:	fa22 f205 	lsr.w	r2, r2, r5
   d5d6a:	1880      	adds	r0, r0, r2
   d5d6c:	f141 0100 	adc.w	r1, r1, #0
   d5d70:	fa03 f20e 	lsl.w	r2, r3, lr
   d5d74:	1880      	adds	r0, r0, r2
   d5d76:	fa43 f305 	asr.w	r3, r3, r5
   d5d7a:	4159      	adcs	r1, r3
   d5d7c:	e00e      	b.n	d5d9c <__adddf3+0xd0>
   d5d7e:	f1a5 0520 	sub.w	r5, r5, #32
   d5d82:	f10e 0e20 	add.w	lr, lr, #32
   d5d86:	2a01      	cmp	r2, #1
   d5d88:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5d8c:	bf28      	it	cs
   d5d8e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5d92:	fa43 f305 	asr.w	r3, r3, r5
   d5d96:	18c0      	adds	r0, r0, r3
   d5d98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5d9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5da0:	d507      	bpl.n	d5db2 <__adddf3+0xe6>
   d5da2:	f04f 0e00 	mov.w	lr, #0
   d5da6:	f1dc 0c00 	rsbs	ip, ip, #0
   d5daa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5dae:	eb6e 0101 	sbc.w	r1, lr, r1
   d5db2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5db6:	d31b      	bcc.n	d5df0 <__adddf3+0x124>
   d5db8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5dbc:	d30c      	bcc.n	d5dd8 <__adddf3+0x10c>
   d5dbe:	0849      	lsrs	r1, r1, #1
   d5dc0:	ea5f 0030 	movs.w	r0, r0, rrx
   d5dc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5dc8:	f104 0401 	add.w	r4, r4, #1
   d5dcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5dd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5dd4:	f080 809a 	bcs.w	d5f0c <__adddf3+0x240>
   d5dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ddc:	bf08      	it	eq
   d5dde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5de2:	f150 0000 	adcs.w	r0, r0, #0
   d5de6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5dea:	ea41 0105 	orr.w	r1, r1, r5
   d5dee:	bd30      	pop	{r4, r5, pc}
   d5df0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5df4:	4140      	adcs	r0, r0
   d5df6:	eb41 0101 	adc.w	r1, r1, r1
   d5dfa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5dfe:	f1a4 0401 	sub.w	r4, r4, #1
   d5e02:	d1e9      	bne.n	d5dd8 <__adddf3+0x10c>
   d5e04:	f091 0f00 	teq	r1, #0
   d5e08:	bf04      	itt	eq
   d5e0a:	4601      	moveq	r1, r0
   d5e0c:	2000      	moveq	r0, #0
   d5e0e:	fab1 f381 	clz	r3, r1
   d5e12:	bf08      	it	eq
   d5e14:	3320      	addeq	r3, #32
   d5e16:	f1a3 030b 	sub.w	r3, r3, #11
   d5e1a:	f1b3 0220 	subs.w	r2, r3, #32
   d5e1e:	da0c      	bge.n	d5e3a <__adddf3+0x16e>
   d5e20:	320c      	adds	r2, #12
   d5e22:	dd08      	ble.n	d5e36 <__adddf3+0x16a>
   d5e24:	f102 0c14 	add.w	ip, r2, #20
   d5e28:	f1c2 020c 	rsb	r2, r2, #12
   d5e2c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e30:	fa21 f102 	lsr.w	r1, r1, r2
   d5e34:	e00c      	b.n	d5e50 <__adddf3+0x184>
   d5e36:	f102 0214 	add.w	r2, r2, #20
   d5e3a:	bfd8      	it	le
   d5e3c:	f1c2 0c20 	rsble	ip, r2, #32
   d5e40:	fa01 f102 	lsl.w	r1, r1, r2
   d5e44:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5e48:	bfdc      	itt	le
   d5e4a:	ea41 010c 	orrle.w	r1, r1, ip
   d5e4e:	4090      	lslle	r0, r2
   d5e50:	1ae4      	subs	r4, r4, r3
   d5e52:	bfa2      	ittt	ge
   d5e54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5e58:	4329      	orrge	r1, r5
   d5e5a:	bd30      	popge	{r4, r5, pc}
   d5e5c:	ea6f 0404 	mvn.w	r4, r4
   d5e60:	3c1f      	subs	r4, #31
   d5e62:	da1c      	bge.n	d5e9e <__adddf3+0x1d2>
   d5e64:	340c      	adds	r4, #12
   d5e66:	dc0e      	bgt.n	d5e86 <__adddf3+0x1ba>
   d5e68:	f104 0414 	add.w	r4, r4, #20
   d5e6c:	f1c4 0220 	rsb	r2, r4, #32
   d5e70:	fa20 f004 	lsr.w	r0, r0, r4
   d5e74:	fa01 f302 	lsl.w	r3, r1, r2
   d5e78:	ea40 0003 	orr.w	r0, r0, r3
   d5e7c:	fa21 f304 	lsr.w	r3, r1, r4
   d5e80:	ea45 0103 	orr.w	r1, r5, r3
   d5e84:	bd30      	pop	{r4, r5, pc}
   d5e86:	f1c4 040c 	rsb	r4, r4, #12
   d5e8a:	f1c4 0220 	rsb	r2, r4, #32
   d5e8e:	fa20 f002 	lsr.w	r0, r0, r2
   d5e92:	fa01 f304 	lsl.w	r3, r1, r4
   d5e96:	ea40 0003 	orr.w	r0, r0, r3
   d5e9a:	4629      	mov	r1, r5
   d5e9c:	bd30      	pop	{r4, r5, pc}
   d5e9e:	fa21 f004 	lsr.w	r0, r1, r4
   d5ea2:	4629      	mov	r1, r5
   d5ea4:	bd30      	pop	{r4, r5, pc}
   d5ea6:	f094 0f00 	teq	r4, #0
   d5eaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5eae:	bf06      	itte	eq
   d5eb0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5eb4:	3401      	addeq	r4, #1
   d5eb6:	3d01      	subne	r5, #1
   d5eb8:	e74e      	b.n	d5d58 <__adddf3+0x8c>
   d5eba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ebe:	bf18      	it	ne
   d5ec0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ec4:	d029      	beq.n	d5f1a <__adddf3+0x24e>
   d5ec6:	ea94 0f05 	teq	r4, r5
   d5eca:	bf08      	it	eq
   d5ecc:	ea90 0f02 	teqeq	r0, r2
   d5ed0:	d005      	beq.n	d5ede <__adddf3+0x212>
   d5ed2:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ed6:	bf04      	itt	eq
   d5ed8:	4619      	moveq	r1, r3
   d5eda:	4610      	moveq	r0, r2
   d5edc:	bd30      	pop	{r4, r5, pc}
   d5ede:	ea91 0f03 	teq	r1, r3
   d5ee2:	bf1e      	ittt	ne
   d5ee4:	2100      	movne	r1, #0
   d5ee6:	2000      	movne	r0, #0
   d5ee8:	bd30      	popne	{r4, r5, pc}
   d5eea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5eee:	d105      	bne.n	d5efc <__adddf3+0x230>
   d5ef0:	0040      	lsls	r0, r0, #1
   d5ef2:	4149      	adcs	r1, r1
   d5ef4:	bf28      	it	cs
   d5ef6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5efa:	bd30      	pop	{r4, r5, pc}
   d5efc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5f00:	bf3c      	itt	cc
   d5f02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5f06:	bd30      	popcc	{r4, r5, pc}
   d5f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5f10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f14:	f04f 0000 	mov.w	r0, #0
   d5f18:	bd30      	pop	{r4, r5, pc}
   d5f1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f1e:	bf1a      	itte	ne
   d5f20:	4619      	movne	r1, r3
   d5f22:	4610      	movne	r0, r2
   d5f24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f28:	bf1c      	itt	ne
   d5f2a:	460b      	movne	r3, r1
   d5f2c:	4602      	movne	r2, r0
   d5f2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f32:	bf06      	itte	eq
   d5f34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f38:	ea91 0f03 	teqeq	r1, r3
   d5f3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f40:	bd30      	pop	{r4, r5, pc}
   d5f42:	bf00      	nop

000d5f44 <__aeabi_ui2d>:
   d5f44:	f090 0f00 	teq	r0, #0
   d5f48:	bf04      	itt	eq
   d5f4a:	2100      	moveq	r1, #0
   d5f4c:	4770      	bxeq	lr
   d5f4e:	b530      	push	{r4, r5, lr}
   d5f50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f58:	f04f 0500 	mov.w	r5, #0
   d5f5c:	f04f 0100 	mov.w	r1, #0
   d5f60:	e750      	b.n	d5e04 <__adddf3+0x138>
   d5f62:	bf00      	nop

000d5f64 <__aeabi_i2d>:
   d5f64:	f090 0f00 	teq	r0, #0
   d5f68:	bf04      	itt	eq
   d5f6a:	2100      	moveq	r1, #0
   d5f6c:	4770      	bxeq	lr
   d5f6e:	b530      	push	{r4, r5, lr}
   d5f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5f7c:	bf48      	it	mi
   d5f7e:	4240      	negmi	r0, r0
   d5f80:	f04f 0100 	mov.w	r1, #0
   d5f84:	e73e      	b.n	d5e04 <__adddf3+0x138>
   d5f86:	bf00      	nop

000d5f88 <__aeabi_f2d>:
   d5f88:	0042      	lsls	r2, r0, #1
   d5f8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5f8e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5f92:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5f96:	bf1f      	itttt	ne
   d5f98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5f9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fa0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5fa4:	4770      	bxne	lr
   d5fa6:	f092 0f00 	teq	r2, #0
   d5faa:	bf14      	ite	ne
   d5fac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fb0:	4770      	bxeq	lr
   d5fb2:	b530      	push	{r4, r5, lr}
   d5fb4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5fb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fc0:	e720      	b.n	d5e04 <__adddf3+0x138>
   d5fc2:	bf00      	nop

000d5fc4 <__aeabi_ul2d>:
   d5fc4:	ea50 0201 	orrs.w	r2, r0, r1
   d5fc8:	bf08      	it	eq
   d5fca:	4770      	bxeq	lr
   d5fcc:	b530      	push	{r4, r5, lr}
   d5fce:	f04f 0500 	mov.w	r5, #0
   d5fd2:	e00a      	b.n	d5fea <__aeabi_l2d+0x16>

000d5fd4 <__aeabi_l2d>:
   d5fd4:	ea50 0201 	orrs.w	r2, r0, r1
   d5fd8:	bf08      	it	eq
   d5fda:	4770      	bxeq	lr
   d5fdc:	b530      	push	{r4, r5, lr}
   d5fde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5fe2:	d502      	bpl.n	d5fea <__aeabi_l2d+0x16>
   d5fe4:	4240      	negs	r0, r0
   d5fe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5fee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ff2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ff6:	f43f aedc 	beq.w	d5db2 <__adddf3+0xe6>
   d5ffa:	f04f 0203 	mov.w	r2, #3
   d5ffe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6002:	bf18      	it	ne
   d6004:	3203      	addne	r2, #3
   d6006:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d600a:	bf18      	it	ne
   d600c:	3203      	addne	r2, #3
   d600e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6012:	f1c2 0320 	rsb	r3, r2, #32
   d6016:	fa00 fc03 	lsl.w	ip, r0, r3
   d601a:	fa20 f002 	lsr.w	r0, r0, r2
   d601e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6022:	ea40 000e 	orr.w	r0, r0, lr
   d6026:	fa21 f102 	lsr.w	r1, r1, r2
   d602a:	4414      	add	r4, r2
   d602c:	e6c1      	b.n	d5db2 <__adddf3+0xe6>
   d602e:	bf00      	nop

000d6030 <__aeabi_dmul>:
   d6030:	b570      	push	{r4, r5, r6, lr}
   d6032:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6036:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d603a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d603e:	bf1d      	ittte	ne
   d6040:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6044:	ea94 0f0c 	teqne	r4, ip
   d6048:	ea95 0f0c 	teqne	r5, ip
   d604c:	f000 f8de 	bleq	d620c <__aeabi_dmul+0x1dc>
   d6050:	442c      	add	r4, r5
   d6052:	ea81 0603 	eor.w	r6, r1, r3
   d6056:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d605a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d605e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6062:	bf18      	it	ne
   d6064:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d606c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6070:	d038      	beq.n	d60e4 <__aeabi_dmul+0xb4>
   d6072:	fba0 ce02 	umull	ip, lr, r0, r2
   d6076:	f04f 0500 	mov.w	r5, #0
   d607a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d607e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6082:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6086:	f04f 0600 	mov.w	r6, #0
   d608a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d608e:	f09c 0f00 	teq	ip, #0
   d6092:	bf18      	it	ne
   d6094:	f04e 0e01 	orrne.w	lr, lr, #1
   d6098:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d609c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d60a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d60a4:	d204      	bcs.n	d60b0 <__aeabi_dmul+0x80>
   d60a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d60aa:	416d      	adcs	r5, r5
   d60ac:	eb46 0606 	adc.w	r6, r6, r6
   d60b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d60b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d60b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d60bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d60c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d60c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60c8:	bf88      	it	hi
   d60ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60ce:	d81e      	bhi.n	d610e <__aeabi_dmul+0xde>
   d60d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d60d4:	bf08      	it	eq
   d60d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d60da:	f150 0000 	adcs.w	r0, r0, #0
   d60de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60e2:	bd70      	pop	{r4, r5, r6, pc}
   d60e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d60e8:	ea46 0101 	orr.w	r1, r6, r1
   d60ec:	ea40 0002 	orr.w	r0, r0, r2
   d60f0:	ea81 0103 	eor.w	r1, r1, r3
   d60f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d60f8:	bfc2      	ittt	gt
   d60fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d60fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6102:	bd70      	popgt	{r4, r5, r6, pc}
   d6104:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6108:	f04f 0e00 	mov.w	lr, #0
   d610c:	3c01      	subs	r4, #1
   d610e:	f300 80ab 	bgt.w	d6268 <__aeabi_dmul+0x238>
   d6112:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6116:	bfde      	ittt	le
   d6118:	2000      	movle	r0, #0
   d611a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d611e:	bd70      	pople	{r4, r5, r6, pc}
   d6120:	f1c4 0400 	rsb	r4, r4, #0
   d6124:	3c20      	subs	r4, #32
   d6126:	da35      	bge.n	d6194 <__aeabi_dmul+0x164>
   d6128:	340c      	adds	r4, #12
   d612a:	dc1b      	bgt.n	d6164 <__aeabi_dmul+0x134>
   d612c:	f104 0414 	add.w	r4, r4, #20
   d6130:	f1c4 0520 	rsb	r5, r4, #32
   d6134:	fa00 f305 	lsl.w	r3, r0, r5
   d6138:	fa20 f004 	lsr.w	r0, r0, r4
   d613c:	fa01 f205 	lsl.w	r2, r1, r5
   d6140:	ea40 0002 	orr.w	r0, r0, r2
   d6144:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6148:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d614c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6150:	fa21 f604 	lsr.w	r6, r1, r4
   d6154:	eb42 0106 	adc.w	r1, r2, r6
   d6158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d615c:	bf08      	it	eq
   d615e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6162:	bd70      	pop	{r4, r5, r6, pc}
   d6164:	f1c4 040c 	rsb	r4, r4, #12
   d6168:	f1c4 0520 	rsb	r5, r4, #32
   d616c:	fa00 f304 	lsl.w	r3, r0, r4
   d6170:	fa20 f005 	lsr.w	r0, r0, r5
   d6174:	fa01 f204 	lsl.w	r2, r1, r4
   d6178:	ea40 0002 	orr.w	r0, r0, r2
   d617c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6184:	f141 0100 	adc.w	r1, r1, #0
   d6188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d618c:	bf08      	it	eq
   d618e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6192:	bd70      	pop	{r4, r5, r6, pc}
   d6194:	f1c4 0520 	rsb	r5, r4, #32
   d6198:	fa00 f205 	lsl.w	r2, r0, r5
   d619c:	ea4e 0e02 	orr.w	lr, lr, r2
   d61a0:	fa20 f304 	lsr.w	r3, r0, r4
   d61a4:	fa01 f205 	lsl.w	r2, r1, r5
   d61a8:	ea43 0302 	orr.w	r3, r3, r2
   d61ac:	fa21 f004 	lsr.w	r0, r1, r4
   d61b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61b4:	fa21 f204 	lsr.w	r2, r1, r4
   d61b8:	ea20 0002 	bic.w	r0, r0, r2
   d61bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d61c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61c4:	bf08      	it	eq
   d61c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61ca:	bd70      	pop	{r4, r5, r6, pc}
   d61cc:	f094 0f00 	teq	r4, #0
   d61d0:	d10f      	bne.n	d61f2 <__aeabi_dmul+0x1c2>
   d61d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d61d6:	0040      	lsls	r0, r0, #1
   d61d8:	eb41 0101 	adc.w	r1, r1, r1
   d61dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61e0:	bf08      	it	eq
   d61e2:	3c01      	subeq	r4, #1
   d61e4:	d0f7      	beq.n	d61d6 <__aeabi_dmul+0x1a6>
   d61e6:	ea41 0106 	orr.w	r1, r1, r6
   d61ea:	f095 0f00 	teq	r5, #0
   d61ee:	bf18      	it	ne
   d61f0:	4770      	bxne	lr
   d61f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d61f6:	0052      	lsls	r2, r2, #1
   d61f8:	eb43 0303 	adc.w	r3, r3, r3
   d61fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6200:	bf08      	it	eq
   d6202:	3d01      	subeq	r5, #1
   d6204:	d0f7      	beq.n	d61f6 <__aeabi_dmul+0x1c6>
   d6206:	ea43 0306 	orr.w	r3, r3, r6
   d620a:	4770      	bx	lr
   d620c:	ea94 0f0c 	teq	r4, ip
   d6210:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6214:	bf18      	it	ne
   d6216:	ea95 0f0c 	teqne	r5, ip
   d621a:	d00c      	beq.n	d6236 <__aeabi_dmul+0x206>
   d621c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6220:	bf18      	it	ne
   d6222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6226:	d1d1      	bne.n	d61cc <__aeabi_dmul+0x19c>
   d6228:	ea81 0103 	eor.w	r1, r1, r3
   d622c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6230:	f04f 0000 	mov.w	r0, #0
   d6234:	bd70      	pop	{r4, r5, r6, pc}
   d6236:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d623a:	bf06      	itte	eq
   d623c:	4610      	moveq	r0, r2
   d623e:	4619      	moveq	r1, r3
   d6240:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6244:	d019      	beq.n	d627a <__aeabi_dmul+0x24a>
   d6246:	ea94 0f0c 	teq	r4, ip
   d624a:	d102      	bne.n	d6252 <__aeabi_dmul+0x222>
   d624c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6250:	d113      	bne.n	d627a <__aeabi_dmul+0x24a>
   d6252:	ea95 0f0c 	teq	r5, ip
   d6256:	d105      	bne.n	d6264 <__aeabi_dmul+0x234>
   d6258:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d625c:	bf1c      	itt	ne
   d625e:	4610      	movne	r0, r2
   d6260:	4619      	movne	r1, r3
   d6262:	d10a      	bne.n	d627a <__aeabi_dmul+0x24a>
   d6264:	ea81 0103 	eor.w	r1, r1, r3
   d6268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d626c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6274:	f04f 0000 	mov.w	r0, #0
   d6278:	bd70      	pop	{r4, r5, r6, pc}
   d627a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d627e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6282:	bd70      	pop	{r4, r5, r6, pc}

000d6284 <__aeabi_ddiv>:
   d6284:	b570      	push	{r4, r5, r6, lr}
   d6286:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d628a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d628e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6292:	bf1d      	ittte	ne
   d6294:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6298:	ea94 0f0c 	teqne	r4, ip
   d629c:	ea95 0f0c 	teqne	r5, ip
   d62a0:	f000 f8a7 	bleq	d63f2 <__aeabi_ddiv+0x16e>
   d62a4:	eba4 0405 	sub.w	r4, r4, r5
   d62a8:	ea81 0e03 	eor.w	lr, r1, r3
   d62ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62b4:	f000 8088 	beq.w	d63c8 <__aeabi_ddiv+0x144>
   d62b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d62c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d62c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d62c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d62cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d62d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d62d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d62d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d62dc:	429d      	cmp	r5, r3
   d62de:	bf08      	it	eq
   d62e0:	4296      	cmpeq	r6, r2
   d62e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d62e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d62ea:	d202      	bcs.n	d62f2 <__aeabi_ddiv+0x6e>
   d62ec:	085b      	lsrs	r3, r3, #1
   d62ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d62f2:	1ab6      	subs	r6, r6, r2
   d62f4:	eb65 0503 	sbc.w	r5, r5, r3
   d62f8:	085b      	lsrs	r3, r3, #1
   d62fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d62fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6302:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6306:	ebb6 0e02 	subs.w	lr, r6, r2
   d630a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d630e:	bf22      	ittt	cs
   d6310:	1ab6      	subcs	r6, r6, r2
   d6312:	4675      	movcs	r5, lr
   d6314:	ea40 000c 	orrcs.w	r0, r0, ip
   d6318:	085b      	lsrs	r3, r3, #1
   d631a:	ea4f 0232 	mov.w	r2, r2, rrx
   d631e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6322:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6326:	bf22      	ittt	cs
   d6328:	1ab6      	subcs	r6, r6, r2
   d632a:	4675      	movcs	r5, lr
   d632c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6330:	085b      	lsrs	r3, r3, #1
   d6332:	ea4f 0232 	mov.w	r2, r2, rrx
   d6336:	ebb6 0e02 	subs.w	lr, r6, r2
   d633a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d633e:	bf22      	ittt	cs
   d6340:	1ab6      	subcs	r6, r6, r2
   d6342:	4675      	movcs	r5, lr
   d6344:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6348:	085b      	lsrs	r3, r3, #1
   d634a:	ea4f 0232 	mov.w	r2, r2, rrx
   d634e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6352:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6356:	bf22      	ittt	cs
   d6358:	1ab6      	subcs	r6, r6, r2
   d635a:	4675      	movcs	r5, lr
   d635c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6360:	ea55 0e06 	orrs.w	lr, r5, r6
   d6364:	d018      	beq.n	d6398 <__aeabi_ddiv+0x114>
   d6366:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d636a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d636e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6372:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6376:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d637a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d637e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6382:	d1c0      	bne.n	d6306 <__aeabi_ddiv+0x82>
   d6384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6388:	d10b      	bne.n	d63a2 <__aeabi_ddiv+0x11e>
   d638a:	ea41 0100 	orr.w	r1, r1, r0
   d638e:	f04f 0000 	mov.w	r0, #0
   d6392:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6396:	e7b6      	b.n	d6306 <__aeabi_ddiv+0x82>
   d6398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d639c:	bf04      	itt	eq
   d639e:	4301      	orreq	r1, r0
   d63a0:	2000      	moveq	r0, #0
   d63a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63a6:	bf88      	it	hi
   d63a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63ac:	f63f aeaf 	bhi.w	d610e <__aeabi_dmul+0xde>
   d63b0:	ebb5 0c03 	subs.w	ip, r5, r3
   d63b4:	bf04      	itt	eq
   d63b6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d63ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63be:	f150 0000 	adcs.w	r0, r0, #0
   d63c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63c6:	bd70      	pop	{r4, r5, r6, pc}
   d63c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d63cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d63d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d63d4:	bfc2      	ittt	gt
   d63d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63de:	bd70      	popgt	{r4, r5, r6, pc}
   d63e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63e4:	f04f 0e00 	mov.w	lr, #0
   d63e8:	3c01      	subs	r4, #1
   d63ea:	e690      	b.n	d610e <__aeabi_dmul+0xde>
   d63ec:	ea45 0e06 	orr.w	lr, r5, r6
   d63f0:	e68d      	b.n	d610e <__aeabi_dmul+0xde>
   d63f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63f6:	ea94 0f0c 	teq	r4, ip
   d63fa:	bf08      	it	eq
   d63fc:	ea95 0f0c 	teqeq	r5, ip
   d6400:	f43f af3b 	beq.w	d627a <__aeabi_dmul+0x24a>
   d6404:	ea94 0f0c 	teq	r4, ip
   d6408:	d10a      	bne.n	d6420 <__aeabi_ddiv+0x19c>
   d640a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d640e:	f47f af34 	bne.w	d627a <__aeabi_dmul+0x24a>
   d6412:	ea95 0f0c 	teq	r5, ip
   d6416:	f47f af25 	bne.w	d6264 <__aeabi_dmul+0x234>
   d641a:	4610      	mov	r0, r2
   d641c:	4619      	mov	r1, r3
   d641e:	e72c      	b.n	d627a <__aeabi_dmul+0x24a>
   d6420:	ea95 0f0c 	teq	r5, ip
   d6424:	d106      	bne.n	d6434 <__aeabi_ddiv+0x1b0>
   d6426:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d642a:	f43f aefd 	beq.w	d6228 <__aeabi_dmul+0x1f8>
   d642e:	4610      	mov	r0, r2
   d6430:	4619      	mov	r1, r3
   d6432:	e722      	b.n	d627a <__aeabi_dmul+0x24a>
   d6434:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6438:	bf18      	it	ne
   d643a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d643e:	f47f aec5 	bne.w	d61cc <__aeabi_dmul+0x19c>
   d6442:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6446:	f47f af0d 	bne.w	d6264 <__aeabi_dmul+0x234>
   d644a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d644e:	f47f aeeb 	bne.w	d6228 <__aeabi_dmul+0x1f8>
   d6452:	e712      	b.n	d627a <__aeabi_dmul+0x24a>

000d6454 <__gedf2>:
   d6454:	f04f 3cff 	mov.w	ip, #4294967295
   d6458:	e006      	b.n	d6468 <__cmpdf2+0x4>
   d645a:	bf00      	nop

000d645c <__ledf2>:
   d645c:	f04f 0c01 	mov.w	ip, #1
   d6460:	e002      	b.n	d6468 <__cmpdf2+0x4>
   d6462:	bf00      	nop

000d6464 <__cmpdf2>:
   d6464:	f04f 0c01 	mov.w	ip, #1
   d6468:	f84d cd04 	str.w	ip, [sp, #-4]!
   d646c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6474:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6478:	bf18      	it	ne
   d647a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d647e:	d01b      	beq.n	d64b8 <__cmpdf2+0x54>
   d6480:	b001      	add	sp, #4
   d6482:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6486:	bf0c      	ite	eq
   d6488:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d648c:	ea91 0f03 	teqne	r1, r3
   d6490:	bf02      	ittt	eq
   d6492:	ea90 0f02 	teqeq	r0, r2
   d6496:	2000      	moveq	r0, #0
   d6498:	4770      	bxeq	lr
   d649a:	f110 0f00 	cmn.w	r0, #0
   d649e:	ea91 0f03 	teq	r1, r3
   d64a2:	bf58      	it	pl
   d64a4:	4299      	cmppl	r1, r3
   d64a6:	bf08      	it	eq
   d64a8:	4290      	cmpeq	r0, r2
   d64aa:	bf2c      	ite	cs
   d64ac:	17d8      	asrcs	r0, r3, #31
   d64ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d64b2:	f040 0001 	orr.w	r0, r0, #1
   d64b6:	4770      	bx	lr
   d64b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64c0:	d102      	bne.n	d64c8 <__cmpdf2+0x64>
   d64c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64c6:	d107      	bne.n	d64d8 <__cmpdf2+0x74>
   d64c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64d0:	d1d6      	bne.n	d6480 <__cmpdf2+0x1c>
   d64d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64d6:	d0d3      	beq.n	d6480 <__cmpdf2+0x1c>
   d64d8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d64dc:	4770      	bx	lr
   d64de:	bf00      	nop

000d64e0 <__aeabi_cdrcmple>:
   d64e0:	4684      	mov	ip, r0
   d64e2:	4610      	mov	r0, r2
   d64e4:	4662      	mov	r2, ip
   d64e6:	468c      	mov	ip, r1
   d64e8:	4619      	mov	r1, r3
   d64ea:	4663      	mov	r3, ip
   d64ec:	e000      	b.n	d64f0 <__aeabi_cdcmpeq>
   d64ee:	bf00      	nop

000d64f0 <__aeabi_cdcmpeq>:
   d64f0:	b501      	push	{r0, lr}
   d64f2:	f7ff ffb7 	bl	d6464 <__cmpdf2>
   d64f6:	2800      	cmp	r0, #0
   d64f8:	bf48      	it	mi
   d64fa:	f110 0f00 	cmnmi.w	r0, #0
   d64fe:	bd01      	pop	{r0, pc}

000d6500 <__aeabi_dcmpeq>:
   d6500:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6504:	f7ff fff4 	bl	d64f0 <__aeabi_cdcmpeq>
   d6508:	bf0c      	ite	eq
   d650a:	2001      	moveq	r0, #1
   d650c:	2000      	movne	r0, #0
   d650e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6512:	bf00      	nop

000d6514 <__aeabi_dcmplt>:
   d6514:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6518:	f7ff ffea 	bl	d64f0 <__aeabi_cdcmpeq>
   d651c:	bf34      	ite	cc
   d651e:	2001      	movcc	r0, #1
   d6520:	2000      	movcs	r0, #0
   d6522:	f85d fb08 	ldr.w	pc, [sp], #8
   d6526:	bf00      	nop

000d6528 <__aeabi_dcmple>:
   d6528:	f84d ed08 	str.w	lr, [sp, #-8]!
   d652c:	f7ff ffe0 	bl	d64f0 <__aeabi_cdcmpeq>
   d6530:	bf94      	ite	ls
   d6532:	2001      	movls	r0, #1
   d6534:	2000      	movhi	r0, #0
   d6536:	f85d fb08 	ldr.w	pc, [sp], #8
   d653a:	bf00      	nop

000d653c <__aeabi_dcmpge>:
   d653c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6540:	f7ff ffce 	bl	d64e0 <__aeabi_cdrcmple>
   d6544:	bf94      	ite	ls
   d6546:	2001      	movls	r0, #1
   d6548:	2000      	movhi	r0, #0
   d654a:	f85d fb08 	ldr.w	pc, [sp], #8
   d654e:	bf00      	nop

000d6550 <__aeabi_dcmpgt>:
   d6550:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6554:	f7ff ffc4 	bl	d64e0 <__aeabi_cdrcmple>
   d6558:	bf34      	ite	cc
   d655a:	2001      	movcc	r0, #1
   d655c:	2000      	movcs	r0, #0
   d655e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6562:	bf00      	nop

000d6564 <__aeabi_dcmpun>:
   d6564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d656c:	d102      	bne.n	d6574 <__aeabi_dcmpun+0x10>
   d656e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6572:	d10a      	bne.n	d658a <__aeabi_dcmpun+0x26>
   d6574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d657c:	d102      	bne.n	d6584 <__aeabi_dcmpun+0x20>
   d657e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6582:	d102      	bne.n	d658a <__aeabi_dcmpun+0x26>
   d6584:	f04f 0000 	mov.w	r0, #0
   d6588:	4770      	bx	lr
   d658a:	f04f 0001 	mov.w	r0, #1
   d658e:	4770      	bx	lr

000d6590 <__aeabi_d2iz>:
   d6590:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6594:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6598:	d215      	bcs.n	d65c6 <__aeabi_d2iz+0x36>
   d659a:	d511      	bpl.n	d65c0 <__aeabi_d2iz+0x30>
   d659c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d65a4:	d912      	bls.n	d65cc <__aeabi_d2iz+0x3c>
   d65a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d65ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d65b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65b6:	fa23 f002 	lsr.w	r0, r3, r2
   d65ba:	bf18      	it	ne
   d65bc:	4240      	negne	r0, r0
   d65be:	4770      	bx	lr
   d65c0:	f04f 0000 	mov.w	r0, #0
   d65c4:	4770      	bx	lr
   d65c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d65ca:	d105      	bne.n	d65d8 <__aeabi_d2iz+0x48>
   d65cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d65d0:	bf08      	it	eq
   d65d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d65d6:	4770      	bx	lr
   d65d8:	f04f 0000 	mov.w	r0, #0
   d65dc:	4770      	bx	lr
   d65de:	bf00      	nop

000d65e0 <__aeabi_d2uiz>:
   d65e0:	004a      	lsls	r2, r1, #1
   d65e2:	d211      	bcs.n	d6608 <__aeabi_d2uiz+0x28>
   d65e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d65e8:	d211      	bcs.n	d660e <__aeabi_d2uiz+0x2e>
   d65ea:	d50d      	bpl.n	d6608 <__aeabi_d2uiz+0x28>
   d65ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d65f4:	d40e      	bmi.n	d6614 <__aeabi_d2uiz+0x34>
   d65f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d65fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6602:	fa23 f002 	lsr.w	r0, r3, r2
   d6606:	4770      	bx	lr
   d6608:	f04f 0000 	mov.w	r0, #0
   d660c:	4770      	bx	lr
   d660e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6612:	d102      	bne.n	d661a <__aeabi_d2uiz+0x3a>
   d6614:	f04f 30ff 	mov.w	r0, #4294967295
   d6618:	4770      	bx	lr
   d661a:	f04f 0000 	mov.w	r0, #0
   d661e:	4770      	bx	lr

000d6620 <__aeabi_d2f>:
   d6620:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6624:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6628:	bf24      	itt	cs
   d662a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d662e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6632:	d90d      	bls.n	d6650 <__aeabi_d2f+0x30>
   d6634:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6638:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d663c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6640:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6644:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6648:	bf08      	it	eq
   d664a:	f020 0001 	biceq.w	r0, r0, #1
   d664e:	4770      	bx	lr
   d6650:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6654:	d121      	bne.n	d669a <__aeabi_d2f+0x7a>
   d6656:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d665a:	bfbc      	itt	lt
   d665c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6660:	4770      	bxlt	lr
   d6662:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6666:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d666a:	f1c2 0218 	rsb	r2, r2, #24
   d666e:	f1c2 0c20 	rsb	ip, r2, #32
   d6672:	fa10 f30c 	lsls.w	r3, r0, ip
   d6676:	fa20 f002 	lsr.w	r0, r0, r2
   d667a:	bf18      	it	ne
   d667c:	f040 0001 	orrne.w	r0, r0, #1
   d6680:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6684:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6688:	fa03 fc0c 	lsl.w	ip, r3, ip
   d668c:	ea40 000c 	orr.w	r0, r0, ip
   d6690:	fa23 f302 	lsr.w	r3, r3, r2
   d6694:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6698:	e7cc      	b.n	d6634 <__aeabi_d2f+0x14>
   d669a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d669e:	d107      	bne.n	d66b0 <__aeabi_d2f+0x90>
   d66a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d66a4:	bf1e      	ittt	ne
   d66a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d66aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d66ae:	4770      	bxne	lr
   d66b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d66b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d66b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d66bc:	4770      	bx	lr
   d66be:	bf00      	nop

000d66c0 <__cxa_atexit>:
   d66c0:	b510      	push	{r4, lr}
   d66c2:	4c05      	ldr	r4, [pc, #20]	; (d66d8 <__cxa_atexit+0x18>)
   d66c4:	4613      	mov	r3, r2
   d66c6:	b12c      	cbz	r4, d66d4 <__cxa_atexit+0x14>
   d66c8:	460a      	mov	r2, r1
   d66ca:	4601      	mov	r1, r0
   d66cc:	2002      	movs	r0, #2
   d66ce:	f3af 8000 	nop.w
   d66d2:	bd10      	pop	{r4, pc}
   d66d4:	4620      	mov	r0, r4
   d66d6:	bd10      	pop	{r4, pc}
   d66d8:	00000000 	.word	0x00000000

000d66dc <memcpy>:
   d66dc:	b510      	push	{r4, lr}
   d66de:	1e43      	subs	r3, r0, #1
   d66e0:	440a      	add	r2, r1
   d66e2:	4291      	cmp	r1, r2
   d66e4:	d004      	beq.n	d66f0 <memcpy+0x14>
   d66e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66ee:	e7f8      	b.n	d66e2 <memcpy+0x6>
   d66f0:	bd10      	pop	{r4, pc}

000d66f2 <memset>:
   d66f2:	4402      	add	r2, r0
   d66f4:	4603      	mov	r3, r0
   d66f6:	4293      	cmp	r3, r2
   d66f8:	d002      	beq.n	d6700 <memset+0xe>
   d66fa:	f803 1b01 	strb.w	r1, [r3], #1
   d66fe:	e7fa      	b.n	d66f6 <memset+0x4>
   d6700:	4770      	bx	lr
	...

000d6704 <srand>:
   d6704:	b538      	push	{r3, r4, r5, lr}
   d6706:	4b12      	ldr	r3, [pc, #72]	; (d6750 <srand+0x4c>)
   d6708:	681c      	ldr	r4, [r3, #0]
   d670a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d670c:	4605      	mov	r5, r0
   d670e:	b9d3      	cbnz	r3, d6746 <srand+0x42>
   d6710:	2018      	movs	r0, #24
   d6712:	f7fe f923 	bl	d495c <malloc>
   d6716:	f243 330e 	movw	r3, #13070	; 0x330e
   d671a:	63a0      	str	r0, [r4, #56]	; 0x38
   d671c:	8003      	strh	r3, [r0, #0]
   d671e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6722:	8043      	strh	r3, [r0, #2]
   d6724:	f241 2334 	movw	r3, #4660	; 0x1234
   d6728:	8083      	strh	r3, [r0, #4]
   d672a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d672e:	80c3      	strh	r3, [r0, #6]
   d6730:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6734:	8103      	strh	r3, [r0, #8]
   d6736:	2305      	movs	r3, #5
   d6738:	8143      	strh	r3, [r0, #10]
   d673a:	230b      	movs	r3, #11
   d673c:	8183      	strh	r3, [r0, #12]
   d673e:	2201      	movs	r2, #1
   d6740:	2300      	movs	r3, #0
   d6742:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6748:	2200      	movs	r2, #0
   d674a:	611d      	str	r5, [r3, #16]
   d674c:	615a      	str	r2, [r3, #20]
   d674e:	bd38      	pop	{r3, r4, r5, pc}
   d6750:	2003e304 	.word	0x2003e304

000d6754 <strlen>:
   d6754:	4603      	mov	r3, r0
   d6756:	f813 2b01 	ldrb.w	r2, [r3], #1
   d675a:	2a00      	cmp	r2, #0
   d675c:	d1fb      	bne.n	d6756 <strlen+0x2>
   d675e:	1a18      	subs	r0, r3, r0
   d6760:	3801      	subs	r0, #1
   d6762:	4770      	bx	lr

000d6764 <dynalib_user>:
   d6764:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6774:	0000 0000 6157 6374 6468 676f 7420 6d69     ....Watchdog tim
   d6784:	6f65 7475 4400 7665 6369 2065 4449 203a     eout.Device ID: 
   d6794:	7325 5300 7379 6574 206d 6576 7372 6f69     %s.System versio
   d67a4:	3a6e 2520 0073 6e49 7570 2074 6f56 746c     n: %s.Input Volt
   d67b4:	6761 2065 694c 696d 3a74 2520 0064 6e49     age Limit: %d.In
   d67c4:	7570 2074 7543 7272 6e65 2074 694c 696d     put Current Limi
   d67d4:	3a74 2520 0064 694d 696e 756d 206d 7953     t: %d.Minimum Sy
   d67e4:	7473 6d65 5620 6c6f 6174 6567 203a 6425     stem Voltage: %d
   d67f4:	4300 6168 6772 2065 7543 7272 6e65 3a74     .Charge Current:
   d6804:	2520 0064 6843 7261 6567 5620 6c6f 6174      %d.Charge Volta
   d6814:	6567 203a 6425 4300 6168 6772 3a65 0020     ge: %d.Charge: .
   d6824:	6f56 746c 6761 3a65 0020 3a58 2520 2c64     Voltage: .X: %d,
   d6834:	5920 203a 6425 202c 3a5a 2520 0064 7061      Y: %d, Z: %d.ap
   d6844:	7770 7464 0000                              pwdt..

000d684a <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d684a:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

000d685a <CSWTCH.24>:
   d685a:	0bb8 0000 0c1c 0000 0c80 0000 0ce4 0000     ................
   d686a:	0d48 0000 0dac 0000 0e10 0000 0e74          H...........t.

000d6878 <_ZTVN5spark13EthernetClassE>:
	...
   d6880:	4b17 000d 4b0d 000d 4b03 000d 4af9 000d     .K...K...K...J..
   d6890:	4aed 000d 4ae1 000d 4ad5 000d 4acd 000d     .J...J...J...J..
   d68a0:	4ac3 000d 4ab9 000d 57a1 000d               .J...J...W..

000d68ac <_ZTV8SPIClass>:
	...
   d68b4:	4b35 000d 4b37 000d 616e 006e 766f 0066     5K..7K..nan.ovf.
   d68c4:	002e 6e69 0066 6e6c 6600 006e 6f63 6564     ..inf.ln.fn.code
   d68d4:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   d68e4:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   d68f4:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   d6904:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
   d6914:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d6924:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d6934:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d6944:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d6954:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d6964:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d6974:	4867 6e61 6c64 7265 6100 7070 6e00 6e6f     gHandler.app.non
   d6984:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   d6994:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   d69a4:	006c 005a 2b25 3330 3a64 3025 7532 2500     l.Z.%+03d:%02u.%
   d69b4:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d69c4:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d69d0 <_ZTV9IPAddress>:
	...
   d69d8:	51eb 000d 51dd 000d 51df 000d               .Q...Q...Q..

000d69e4 <_ZTV9USBSerial>:
	...
   d69ec:	52c5 000d 5309 000d 52e3 000d 4c51 000d     .R...S...R..QL..
   d69fc:	52dd 000d 52c7 000d 52cf 000d 5303 000d     .R...R...R...S..
   d6a0c:	52d7 000d 52c1 000d                         .R...R..

000d6a14 <_ZTVN5spark13CellularClassE>:
	...
   d6a1c:	53ff 000d 53f5 000d 53eb 000d 53a1 000d     .S...S...S...S..
   d6a2c:	53df 000d 53d3 000d 53c7 000d 53bf 000d     .S...S...S...S..
   d6a3c:	53b5 000d 53ab 000d 57a1 000d               .S...S...W..

000d6a48 <_ZTV11USARTSerial>:
	...
   d6a50:	5449 000d 546d 000d 5479 000d 4c51 000d     IT..mT..yT..QL..
   d6a60:	5455 000d 5461 000d 545b 000d 5467 000d     UT..aT..[T..gT..
   d6a70:	544b 000d 544f 000d                         KT..OT..

000d6a78 <_ZTV7TwoWire>:
	...
   d6a80:	551d 000d 5567 000d 553f 000d 551f 000d     .U..gU..?U...U..
   d6a90:	5547 000d 554f 000d 5557 000d 555f 000d     GU..OU..WU.._U..

000d6aa0 <_ZTVN5spark9MeshClassE>:
	...
   d6aa8:	5665 000d 565b 000d 5651 000d 5647 000d     eV..[V..QV..GV..
   d6ab8:	563b 000d 562f 000d 5623 000d 561b 000d     ;V../V..#V...V..
   d6ac8:	5611 000d 5607 000d 57a1 000d               .V...V...W..

000d6ad4 <_ZTVN5spark12NetworkClassE>:
	...
   d6adc:	5739 000d 5743 000d 574d 000d 5757 000d     9W..CW..MW..WW..
   d6aec:	5761 000d 576d 000d 5779 000d 5785 000d     aW..mW..yW...W..
   d6afc:	578d 000d 5797 000d 57a1 000d               .W...W...W..

000d6b08 <__sf_fake_stdin>:
	...

000d6b28 <__sf_fake_stdout>:
	...

000d6b48 <__sf_fake_stderr>:
	...
   d6b68:	0043                                        C.

000d6b6a <link_const_variable_data_end>:
	...

000d6b6c <link_constructors_location>:
   d6b6c:	000d4341 	.word	0x000d4341
   d6b70:	000d4465 	.word	0x000d4465
   d6b74:	000d4479 	.word	0x000d4479
   d6b78:	000d4551 	.word	0x000d4551
   d6b7c:	000d4b21 	.word	0x000d4b21
   d6b80:	000d4b85 	.word	0x000d4b85
   d6b84:	000d4f69 	.word	0x000d4f69
   d6b88:	000d4f79 	.word	0x000d4f79
   d6b8c:	000d4fc1 	.word	0x000d4fc1
   d6b90:	000d5409 	.word	0x000d5409
   d6b94:	000d56ed 	.word	0x000d56ed
   d6b98:	000d5825 	.word	0x000d5825
   d6b9c:	000d58d5 	.word	0x000d58d5
   d6ba0:	000d5a31 	.word	0x000d5a31
   d6ba4:	000d5ab5 	.word	0x000d5ab5
   d6ba8:	000d5b79 	.word	0x000d5b79
   d6bac:	000d5c3d 	.word	0x000d5c3d
